<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[leetcode 二叉树总结]]></title>
      <url>https://winper001.github.io/2018/08/28/leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[toc]</p>
<h1 id="基本的遍历方式"><a href="#基本的遍历方式" class="headerlink" title="基本的遍历方式"></a>基本的遍历方式</h1><p><strong>前序遍历</strong>：总是先访问根节点，再左子树，最后右子树</p>
<p><strong>中序遍历</strong>：总是先访问左子树，再根节点，最后右子树</p>
<p><strong>后序遍历</strong>：总是先访问左子树，再右子树，最后根节点</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/3EA61707E28741AAB94B8383D3C557BF?method=download&amp;shareKey=ed3886b8216afaa7928faa7bc3234305" alt=""><br><img src="https://note.youdao.com/yws/api/personal/file/49E43E2E8F7C43BB881EC2D3713A561E?method=download&amp;shareKey=cec7f8b7f231c656fd0334bd2ddb84ed" alt=""></p>
<p><strong>注</strong>：递归方式代码非常容易<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode *node)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!node)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//此时访问node称为前序遍历</span></div><div class="line">    traversal(node-&gt;left);</div><div class="line">    <span class="comment">//此时访问node称为中序遍历</span></div><div class="line">    traversal(node-&gt;right);</div><div class="line">    <span class="comment">//此时访问node称为后序遍历</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="94-二叉树的中序遍历（144，145）（回到目录）"><a href="#94-二叉树的中序遍历（144，145）（回到目录）" class="headerlink" title="94 二叉树的中序遍历（144，145）（回到目录）"></a>94 二叉树的中序遍历（144，145）（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h2><p><strong>递归方法1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        if(root==NULL) return res;</div><div class="line">        vector&lt;int&gt; temp1=inorderTraversal(root-&gt;left);</div><div class="line">        for(int i=0;i&lt;temp1.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp1[i]);</div><div class="line">        &#125;</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        </div><div class="line">        vector&lt;int&gt; temp2=inorderTraversal(root-&gt;right);</div><div class="line">        for(int i=0;i&lt;temp2.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp2[i]);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>递归方法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;  </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root)</div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> result;    </div><div class="line">        inorderTraversal(root-&gt;left);    </div><div class="line">        result.push_back(root-&gt;val);    </div><div class="line">        inorderTraversal(root-&gt;right);    </div><div class="line">        <span class="keyword">return</span> result;    </div><div class="line">    &#125;    </div><div class="line"><span class="keyword">private</span>:    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;   </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    vector&lt;int&gt; res;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        if(root==NULL) return res;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        stack&lt;TreeNode*&gt; s;</div><div class="line">        s.push(root);</div><div class="line">        while(!s.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode* node=s.top();</div><div class="line">            if(node-&gt;left)</div><div class="line">            &#123;</div><div class="line">                s.push(node-&gt;left);</div><div class="line">                node-&gt;left=NULL;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                res.push_back(node-&gt;val);</div><div class="line">                s.pop();</div><div class="line">                if(node-&gt;right)</div><div class="line">                &#123;</div><div class="line">                    s.push(node-&gt;right);</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144 二叉树的前序遍历"></a>144 二叉树的前序遍历</h2><p>题目描述提示帮助提交记录社区讨论阅读解答<br>给定一个二叉树，返回它的 前序 遍历。</p>
<p> 示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: [1,null,2,3]  </div><div class="line">   1</div><div class="line">    \</div><div class="line">     2</div><div class="line">    /</div><div class="line">   3 </div><div class="line">输出: [1,2,3]</div></pre></td></tr></table></figure></p>
<p><strong>进阶</strong>: 递归算法很简单，你可以通过迭代算法完成吗？</p>
<p><strong>递归方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp1=preorderTraversal(root-&gt;left);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp1.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp2=preorderTraversal(root-&gt;right);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp2.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp2[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        s.push(root);</div><div class="line">        <span class="keyword">while</span>(!s.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode* temp=s.top();</div><div class="line">            res.push_back(temp-&gt;val);</div><div class="line">            s.pop();</div><div class="line">            <span class="keyword">if</span>(temp-&gt;right)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;right);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp-&gt;left)<span class="comment">//后压进来的后访问</span></div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;left);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145 二叉树的后序遍历"></a>145 二叉树的后序遍历</h2><p>递归方法<br><strong>递归1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        postorder(root,res);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">private:</div><div class="line">    void postorder(TreeNode* root,vector&lt;int&gt; &amp;res)</div><div class="line">    &#123;</div><div class="line">        if(root==NULL)</div><div class="line">        &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        postorder(root-&gt;left,res);</div><div class="line">        postorder(root-&gt;right,res);</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>递归2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp1=postorderTraversal(root-&gt;left);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp1.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp2=postorderTraversal(root-&gt;right);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp2.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp2[i]);</div><div class="line">        &#125;</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        if(root==NULL) return res;</div><div class="line">        stack&lt;TreeNode*&gt; s;</div><div class="line">        s.push(root);</div><div class="line">        while(!s.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode* temp=s.top();</div><div class="line">            s.pop();</div><div class="line">            res.push_back(temp-&gt;val);</div><div class="line">            if(temp-&gt;left)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;left);</div><div class="line">            &#125;</div><div class="line">            if(temp-&gt;right)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;right);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //vector反转的两种方式</div><div class="line">        //return vector&lt;int&gt;(res.rbegin(),res.rend());//vector反转方式1</div><div class="line">        </div><div class="line">        reverse(res.begin(),res.end());//vector反转方式2</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><h2 id="102-二叉树的层次遍历"><a href="#102-二叉树的层次遍历" class="headerlink" title="102 二叉树的层次遍历"></a>102 二叉树的层次遍历</h2><p><strong>非递归</strong></p>
<p><strong>分析</strong>：先建立一个queue，然后先把根节点放进去，这时候找根节点的左右两个子节点，这时候去掉根节点，此时queue里的元素就是下一层的所有节点，用一个for循环遍历它们，然后存到一个一维向量里，遍历完之后再把这个一维向量存到二维向量里，以此类推，可以完成层序遍历。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; levelOrder(TreeNode *root) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; oneLevel;</div><div class="line">            <span class="keyword">int</span> size = q.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">                TreeNode *node = q.front();</div><div class="line">                q.pop();</div><div class="line">                oneLevel.push_back(node-&gt;val);</div><div class="line">                <span class="keyword">if</span> (node-&gt;left) q.push(node-&gt;left);</div><div class="line">                <span class="keyword">if</span> (node-&gt;right) q.push(node-&gt;right);</div><div class="line">            &#125;</div><div class="line">            res.push_back(oneLevel);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>递归做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//递归方法</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        preorder(root,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,<span class="keyword">int</span> depth)</span></span></div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(depth==res.size())</div><div class="line">        &#123;</div><div class="line">            res.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        res[depth].push_back(root-&gt;val);</div><div class="line">        preorder(root-&gt;left,res,depth+<span class="number">1</span>);</div><div class="line">        preorder(root-&gt;right,res,depth+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="构造二叉树"><a href="#构造二叉树" class="headerlink" title="构造二叉树"></a>构造二叉树</h1><p>例如105，106都是这类问题</p>
<h1 id="二叉树的平衡"><a href="#二叉树的平衡" class="headerlink" title="二叉树的平衡"></a>二叉树的平衡</h1><h2 id="108-将有序数组转换为二叉搜索树（回到目录）"><a href="#108-将有序数组转换为二叉搜索树（回到目录）" class="headerlink" title="108 将有序数组转换为二叉搜索树（回到目录）"></a>108 将有序数组转换为二叉搜索树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h2><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p>
<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>
<p>示例:</p>
<p><code>给定有序数组: [-10,-3,0,5,9],</code></p>
<p><code>一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     0</div><div class="line">    / \</div><div class="line">  -3   9</div><div class="line">  /   /</div><div class="line">-10  5</div></pre></td></tr></table></figure></p>
<p> 代码<br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(nums[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">int</span> mid=nums.size()/<span class="number">2</span>;</div><div class="line">        TreeNode* root=<span class="keyword">new</span> TreeNode(nums[mid]);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left(nums.begin(),nums.begin()+mid);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right(nums.begin()+mid+<span class="number">1</span>,nums.end());</div><div class="line">        root-&gt;left=sortedArrayToBST(left);</div><div class="line">        root-&gt;right=sortedArrayToBST(right);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="109-有序链表转换二叉搜索树"><a href="#109-有序链表转换二叉搜索树" class="headerlink" title="109 有序链表转换二叉搜索树"></a>109 有序链表转换二叉搜索树</h2><p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p>
<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>
<p><strong>使用了递归，和那个24题差不多,关键是如何找到链表的中间位置。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//使用了递归，和那个24题差不多</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">sortedListToBST</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(head-&gt;next==<span class="literal">NULL</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> TreeNode(head-&gt;val));</div><div class="line">        &#125;</div><div class="line">        ListNode* fast=head-&gt;next-&gt;next;</div><div class="line">        ListNode* slow=head;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)<span class="comment">//这段代码是在找链表中间位置的元素</span></div><div class="line">        &#123;</div><div class="line">            fast=fast-&gt;next-&gt;next;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        TreeNode* root=<span class="keyword">new</span> TreeNode(slow-&gt;next-&gt;val);<span class="comment">//这就是找到的中间位置</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,root-&gt;val);</div><div class="line">        root-&gt;right=sortedListToBST(slow-&gt;next-&gt;next);</div><div class="line">        slow-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        root-&gt;left=sortedListToBST(head);</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="110-平衡二叉树（回到目录）"><a href="#110-平衡二叉树（回到目录）" class="headerlink" title="110 平衡二叉树（回到目录）"></a>110 平衡二叉树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">给定二叉树 [3,9,20,null,null,15,7]</div><div class="line"></div><div class="line">    3</div><div class="line">   / \</div><div class="line">  9  20</div><div class="line">    /  \</div><div class="line">   15   7</div><div class="line">返回 true 。</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">给定二叉树 [1,2,2,3,3,null,null,4,4]</div><div class="line"></div><div class="line">       1</div><div class="line">      / \</div><div class="line">     2   2</div><div class="line">    / \</div><div class="line">   3   3</div><div class="line">  / \</div><div class="line"> 4   4</div><div class="line">返回 false 。</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(depth(root-&gt;left)-depth(root-&gt;right))&gt;<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> isBalanced(root-&gt;left)&amp;&amp;isBalanced(root-&gt;right);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode* root)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>+max(depth(root-&gt;left),depth(root-&gt;right));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode刷题汇总]]></title>
      <url>https://winper001.github.io/2018/08/27/leetcode%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[toc]</p>
<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1 两数之和"></a>1 两数之和</h1><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</p>
<p>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">给定 nums = [2, 7, 11, 15], target = 9</div><div class="line"></div><div class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</div><div class="line">所以返回 [0, 1]</div></pre></td></tr></table></figure></p>
<p>我的做法如下，直接暴力，复杂度是O(n2)，我们试图通过遍历数组的其余部分来寻找它对应的目标，这将耗费O(n)*O(n)的时间。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size();j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(i);</div><div class="line">                    res.push_back(j);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>也可以使用哈希表</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum;</div><div class="line">      <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmpmap;<span class="comment">//键值为nums的值，变量值为nums下标</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">          tmpmap[nums[i]] = i;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">          <span class="keyword">if</span> (tmpmap.count(target - nums[i]) != <span class="number">0</span> &amp;&amp; tmpmap[target-nums[i]]!=i) &#123;<span class="comment">//  如果目标值减去循环处的值存在，且它对应的下标不为i，即存在有另一个数与循环值相加等于target，则返回结果</span></div><div class="line">            twoSum.push_back(i);</div><div class="line">              twoSum.push_back(tmpmap[target - nums[i]]);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> twoSum;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><strong>优化版的哈希表如下</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;  </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum;  </div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmpmap;<span class="comment">//键值为nums的值，变量值为nums下标  </span></div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;  </div><div class="line">        <span class="keyword">if</span> (tmpmap.count(nums[i]) != <span class="number">0</span>) &#123;  </div><div class="line">            twoSum.push_back(tmpmap[nums[i]]);  </div><div class="line">            twoSum.push_back(i);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">        tmpmap[target - nums[i]] = i;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> twoSum;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="2-两数相加-链表-（回到目录）"><a href="#2-两数相加-链表-（回到目录）" class="headerlink" title="2 两数相加(链表)（回到目录）"></a>2 两数相加(链表)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</div><div class="line"></div><div class="line">输出：7 -&gt; 0 -&gt; 8</div><div class="line"></div><div class="line">原因：342 + 465 = 807</div></pre></td></tr></table></figure></p>
<p><strong>我一开始的做法</strong>:错的！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span></div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">int</span> num1,num2=<span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec1;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec2;</div><div class="line">        <span class="keyword">while</span>(l1)</div><div class="line">        &#123;</div><div class="line">            vec1.push_back(l1-&gt;val);</div><div class="line">            l1=l1-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(l2)</div><div class="line">        &#123;</div><div class="line">            vec2.push_back(l2-&gt;val);</div><div class="line">            l2=l2-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec1.size();i++)</div><div class="line">        &#123;</div><div class="line">            num1 +=<span class="built_in">pow</span>(<span class="number">10</span>,i)*vec1[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;vec2.size();j++)</div><div class="line">        &#123;</div><div class="line">            num2 +=<span class="built_in">pow</span>(<span class="number">10</span>,j)*vec2[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> sum=num1+num2;</div><div class="line">        <span class="function">ListNode <span class="title">head</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode *p=&amp;head;</div><div class="line">        <span class="keyword">int</span> shang=sum/<span class="number">10</span>;</div><div class="line">        <span class="keyword">int</span> yushu=sum%<span class="number">10</span>;</div><div class="line">        <span class="keyword">while</span>(shang)</div><div class="line">        &#123;</div><div class="line">            p-&gt;next=<span class="keyword">new</span> ListNode(yushu);</div><div class="line">            p=p-&gt;next;</div><div class="line">            shang=shang/<span class="number">10</span>;</div><div class="line">            yushu=shang%<span class="number">10</span>;</div><div class="line">            </div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        p-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> head.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>参考做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span></div><div class="line">    &#123;   <span class="function">ListNode <span class="title">target</span><span class="params">(<span class="number">0</span>)</span></span>; <span class="comment">//头结点</span></div><div class="line">        ListNode* node = &amp;target;  <span class="comment">//结点</span></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//每个结点的和</span></div><div class="line">        <span class="keyword">while</span> (l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span>) &#123;</div><div class="line">            sum /= <span class="number">10</span>;    <span class="comment">//求本次的进位</span></div><div class="line">            <span class="keyword">if</span> (l1 != <span class="literal">NULL</span>) &#123;</div><div class="line">                sum += l1-&gt;val;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (l2 != <span class="literal">NULL</span>) &#123;</div><div class="line">                sum += l2-&gt;val;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            node-&gt;next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>); <span class="comment">//该结点的值 就是结点和的余数</span></div><div class="line">            node = node-&gt;next; <span class="comment">//指向下一个结点</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sum / <span class="number">10</span> == <span class="number">1</span>)   <span class="comment">//对最后一个结点进行处理</span></div><div class="line">            node-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> target.next;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="3-无重复字符的最长子串（回到目录）"><a href="#3-无重复字符的最长子串（回到目录）" class="headerlink" title="3 无重复字符的最长子串（回到目录）"></a>3 无重复字符的最长子串（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">给定 &quot;abcabcbb&quot; ，没有重复字符的最长子串是 &quot;abc&quot; ，那么长度就是3。</div><div class="line"></div><div class="line">给定 &quot;bbbbb&quot; ，最长的子串就是 &quot;b&quot; ，长度是1。</div><div class="line"></div><div class="line">给定 &quot;pwwkew&quot; ，最长子串是 &quot;wke&quot; ，长度是3。请注意答案必须是一个子串，&quot;pwke&quot; 是 子序列  而不是子串。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> char_map[<span class="number">128</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="built_in">string</span> word=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            char_map[s[i]]++;</div><div class="line">            <span class="keyword">if</span>(char_map[s[i]]==<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                word += s[i];</div><div class="line">                <span class="keyword">if</span>(result&lt;word.length())</div><div class="line">                &#123;</div><div class="line">                    result=word.length();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(begin&lt;i &amp;&amp; char_map[s[i]]&gt;<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    char_map[s[begin]]--;</div><div class="line">                    begin++;</div><div class="line">                &#125;</div><div class="line">                word=<span class="string">""</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=begin;j&lt;=i;j++)</div><div class="line">                &#123;</div><div class="line">                    word += s[j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="4-两个排序数组的中位数"><a href="#4-两个排序数组的中位数" class="headerlink" title="4 两个排序数组的中位数"></a>4 两个排序数组的中位数</h1><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。</p>
<p>请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。</p>
<p>你可以假设 nums1 和 nums2 均不为空。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 3]</div><div class="line">nums2 = [2]</div><div class="line"></div><div class="line">中位数是 2.0</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 2]</div><div class="line">nums2 = [3, 4]</div><div class="line"></div><div class="line">中位数是 (2 + 3)/2 = 2.5</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums1.size()==<span class="number">0</span> &amp;&amp; nums2.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec;</div><div class="line">        <span class="keyword">double</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;nums1.size() &amp;&amp; j&lt;nums2.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums1[i]&lt;nums2[j])</div><div class="line">            &#123;</div><div class="line">                vec.push_back(nums1[i]);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                vec.push_back(nums2[j]);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;i&lt;nums1.size();i++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(nums1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;j&lt;nums2.size();j++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(nums2[j]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> len=vec.size();</div><div class="line">        <span class="keyword">if</span>(len%<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            res=vec[len/<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            res=(vec[len/<span class="number">2</span>]+vec[len/<span class="number">2</span><span class="number">-1</span>])/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="5-最长回文子串（回到目录）"><a href="#5-最长回文子串（回到目录）" class="headerlink" title="5 最长回文子串（回到目录）"></a>5 最长回文子串（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。</p>
<p>示例 1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: &quot;babad&quot;</div><div class="line">输出: &quot;bab&quot;</div><div class="line">注意: &quot;aba&quot;也是一个有效答案。</div></pre></td></tr></table></figure></p>
<p>示例 2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;cbbd&quot;</div><div class="line">输出: &quot;bb&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> len = s.size();</div><div class="line">        <span class="keyword">if</span>(len &lt;= <span class="number">1</span>)<span class="keyword">return</span> s;</div><div class="line">        <span class="keyword">int</span> start, maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//寻找以i-1,i为中点偶数长度的回文</span></div><div class="line">            <span class="keyword">int</span> low = i<span class="number">-1</span>, high = i;</div><div class="line">            <span class="keyword">while</span>(low &gt;= <span class="number">0</span> &amp;&amp; high &lt; len &amp;&amp; s[low] == s[high])</div><div class="line">            &#123;</div><div class="line">                low--;</div><div class="line">                high++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(high - low - <span class="number">1</span> &gt; maxLen)</div><div class="line">            &#123;</div><div class="line">                maxLen = high - low <span class="number">-1</span>;</div><div class="line">                start = low + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">             </div><div class="line">            <span class="comment">//寻找以i为中心的奇数长度的回文</span></div><div class="line">            low = i- <span class="number">1</span>; high = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(low &gt;= <span class="number">0</span> &amp;&amp; high &lt; len &amp;&amp; s[low] == s[high])</div><div class="line">            &#123;</div><div class="line">                low--;</div><div class="line">                high++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(high - low - <span class="number">1</span> &gt; maxLen)</div><div class="line">            &#123;</div><div class="line">                maxLen = high - low <span class="number">-1</span>;</div><div class="line">                start = low + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s.substr(start, maxLen);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="6-Z字形变换（回到目录）"><a href="#6-Z字形变换（回到目录）" class="headerlink" title="6 Z字形变换（回到目录）"></a>6 Z字形变换（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>将字符串 “PAYPALISHIRING” 以Z字形排列成给定的行数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div><div class="line">之后从左往右，逐行读取字符：&quot;PAHNAPLSIIGYIR&quot;</div><div class="line"></div><div class="line">实现一个将字符串进行指定行数变换的函数:</div><div class="line"></div><div class="line">string convert(string s, int numRows);</div><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 3</div><div class="line">输出: &quot;PAHNAPLSIIGYIR&quot;</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 4</div><div class="line">输出: &quot;PINALSIGYAHRPI&quot;</div><div class="line">解释:</div><div class="line"></div><div class="line">P     I    N</div><div class="line">A   L S  I G</div><div class="line">Y A   H R</div><div class="line">P     I</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = s.length();</div><div class="line">        <span class="keyword">int</span> nodeLen = <span class="number">2</span>*numRows<span class="number">-2</span>;<span class="comment">//两整列之间的差 也就是等差数列中的d</span></div><div class="line">        <span class="built_in">string</span> result = <span class="string">""</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (len == <span class="number">0</span> || numRows == <span class="number">0</span> || numRows == <span class="number">1</span>)<span class="comment">//特殊情况特殊处理</span></div><div class="line">            <span class="keyword">return</span> s;</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)<span class="comment">//从第一行遍历到最后一行</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j += nodeLen) &#123;</div><div class="line">                result += s[j];<span class="comment">//第一行和最后一行 还有普通行的整列数字</span></div><div class="line">                <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i != numRows<span class="number">-1</span> &amp;&amp; j - <span class="number">2</span>*i + nodeLen &lt; len)</div><div class="line">                    result += s[j - <span class="number">2</span>*i + nodeLen];<span class="comment">//单列行的数字</span></div><div class="line">            &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> result ;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="7-反转整数"><a href="#7-反转整数" class="headerlink" title="7 反转整数"></a>7 反转整数</h1><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 123</div><div class="line">输出: 321</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: -123</div><div class="line">输出: -321</div></pre></td></tr></table></figure></p>
<p>示例 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 120</div><div class="line">输出: 21</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (x) &#123;</div><div class="line">            <span class="keyword">int</span> temp = ans * <span class="number">10</span> + x % <span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span>(temp/<span class="number">10</span> !=ans)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            ans = temp;</div><div class="line">            x /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="8-字符串转整数-atoi-（回到目录）"><a href="#8-字符串转整数-atoi-（回到目录）" class="headerlink" title="8 字符串转整数 (atoi)（回到目录）"></a>8 字符串转整数 (atoi)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/integer-to-roman/description/" target="_blank" rel="external">LINK</a></p>
<p>实现 atoi，将字符串转为整数。</p>
<p>在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>
<p>字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。</p>
<p>当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。</p>
<p>若函数不能执行有效的转换，返回 0。</p>
<p>说明：</p>
<p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。如果数值超过可表示的范围，则返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: &quot;42&quot;</div><div class="line">输出: 42</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: &quot;   -42&quot;</div><div class="line">输出: -42</div><div class="line">解释: 第一个非空白字符为 &apos;-&apos;, 它是一个负号。</div><div class="line">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</div><div class="line">     </div><div class="line">示例 3:</div><div class="line">输入: &quot;4193 with words&quot;</div><div class="line">输出: 4193</div><div class="line">解释: 转换截止于数字 &apos;3&apos; ，因为它的下一个字符不为数字。</div><div class="line"></div><div class="line">示例 4:</div><div class="line">输入: &quot;words and 987&quot;</div><div class="line">输出: 0</div><div class="line">解释: 第一个非空字符是 &apos;w&apos;, 但它不是数字或正、负号。</div><div class="line">     因此无法执行有效的转换。</div><div class="line">     </div><div class="line">示例 5:</div><div class="line">输入: &quot;-91283472332&quot;</div><div class="line">输出: -2147483648</div><div class="line">解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 </div><div class="line">     因此返回 INT_MIN (−231) 。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> sign=<span class="number">1</span>;</div><div class="line">        <span class="keyword">long</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(str.empty())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(str[i]==<span class="string">' '</span>)</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'-'</span> || str[i]==<span class="string">'+'</span>)</div><div class="line">        &#123;</div><div class="line">            sign= (str[i]==<span class="string">'+'</span>)?<span class="number">1</span>:<span class="number">-1</span>;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(str[i]&gt;=<span class="string">'0'</span> &amp;&amp; str[i]&lt;=<span class="string">'9'</span>)</div><div class="line">        &#123;</div><div class="line">            res=res*<span class="number">10</span>+(str[i]-<span class="string">'0'</span>);</div><div class="line">            i++;</div><div class="line">            <span class="keyword">if</span>(res*sign&gt;=INT_MAX) <span class="keyword">return</span> INT_MAX;</div><div class="line">            <span class="keyword">if</span>(res*sign&lt;=INT_MIN) <span class="keyword">return</span> INT_MIN;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res*sign;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9 回文数"></a>9 回文数</h1><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: 121</div><div class="line">输出: true</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: -121</div><div class="line">输出: false</div><div class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</div><div class="line"></div><div class="line">示例 3:</div><div class="line">输入: 10</div><div class="line">输出: false</div><div class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> tmp=x;</div><div class="line">        <span class="keyword">int</span> reverse=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(tmp)</div><div class="line">        &#123;</div><div class="line">            reverse=reverse*<span class="number">10</span>+tmp%<span class="number">10</span>;</div><div class="line">            tmp=tmp/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(x==reverse)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="10-正则表达式匹配（回到目录）"><a href="#10-正则表达式匹配（回到目录）" class="headerlink" title="10. 正则表达式匹配（回到目录）"></a>10. 正则表达式匹配（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串 (s) 和一个字符模式 (p)。实现支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>
<p>‘.’ 匹配任意单个字符。<br>‘*’ 匹配零个或多个前面的元素。<br>匹配应该覆盖整个字符串 (s) ，而不是部分字符串。</p>
<p>说明:</p>
<p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">s = &quot;aa&quot;</div><div class="line">p = &quot;a&quot;</div><div class="line">输出: false</div><div class="line">解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入:</div><div class="line">s = &quot;aa&quot;</div><div class="line">p = &quot;a*&quot;</div><div class="line">输出: true</div><div class="line">解释: &apos;*&apos; 代表可匹配零个或多个前面的元素, 即可以匹配 &apos;a&apos; 。因此, 重复 &apos;a&apos; 一次, 字符串可变为 &quot;aa&quot;。</div><div class="line"></div><div class="line">示例 3:</div><div class="line">输入:</div><div class="line">s = &quot;ab&quot;</div><div class="line">p = &quot;.*&quot;</div><div class="line">输出: true</div><div class="line">解释: &quot;.*&quot; 表示可匹配零个或多个(&apos;*&apos;)任意字符(&apos;.&apos;)。</div><div class="line"></div><div class="line">示例 4:</div><div class="line">输入:</div><div class="line">s = &quot;aab&quot;</div><div class="line">p = &quot;c*a*b&quot;</div><div class="line">输出: true</div><div class="line">解释: &apos;c&apos; 可以不被重复, &apos;a&apos; 可以被重复一次。因此可以匹配字符串 &quot;aab&quot;。</div><div class="line"></div><div class="line">示例 5:</div><div class="line">输入:</div><div class="line">s = &quot;mississippi&quot;</div><div class="line">p = &quot;mis*is*p*.&quot;</div><div class="line">输出: fal</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (p.empty()) <span class="keyword">return</span> s.empty();</div><div class="line">        <span class="keyword">if</span> (p.size() == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> (s.size() == <span class="number">1</span> &amp;&amp; (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (p[<span class="number">1</span>] != <span class="string">'*'</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (s.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">return</span> (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>) &amp;&amp; isMatch(s.substr(<span class="number">1</span>), p.substr(<span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (!s.empty() &amp;&amp; (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>)) &#123;</div><div class="line">            <span class="keyword">if</span> (isMatch(s, p.substr(<span class="number">2</span>))) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            s = s.substr(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> isMatch(s, p.substr(<span class="number">2</span>));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="11-盛水（回到目录）"><a href="#11-盛水（回到目录）" class="headerlink" title="11 盛水（回到目录）"></a>11 盛水（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/integer-to-roman/description/" target="_blank" rel="external">LINK</a><br>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt=""><br>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;a,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a.second&gt;b.second;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=height.size();</div><div class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; index_height;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            index_height.push_back(make_pair(i,height[i]));</div><div class="line">        &#125;</div><div class="line">        sort(index_height.begin(),index_height.end(),cmp);</div><div class="line">        <span class="keyword">int</span> t=index_height[<span class="number">1</span>].first-index_height[<span class="number">0</span>].first;</div><div class="line">        res=t*index_height[<span class="number">1</span>].second;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>我的做法是<strong>错的</strong>，以为只需要找到最大的两个数，其实不是！还需要考虑index的距离。</p>
<p>还有一种做法，不知道哪里错了。(<strong>后来发现是temp的地方放错了！！！</strong>)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=height.size();</div><div class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=len<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> h=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>,temp=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(start&lt;end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(temp&gt;res)</div><div class="line">            &#123;</div><div class="line">                res=temp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(height[start]&lt;height[end])</div><div class="line">            &#123;</div><div class="line">                h=height[start];</div><div class="line">                start++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                h=height[end];</div><div class="line">                end--;</div><div class="line">            &#125;</div><div class="line">            temp=h*(end-start);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>下面的这个方法可以ac:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=height.size();</div><div class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=len<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> h=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>,temp=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(start&lt;end)</div><div class="line">        &#123;</div><div class="line">            temp=min(height[start],height[end])*(end-start);</div><div class="line">            <span class="keyword">if</span>(temp&gt;res)</div><div class="line">                &#123;</div><div class="line">                    res=temp;</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">if</span>(height[start]&lt;height[end])</div><div class="line">            &#123;</div><div class="line">                 </div><div class="line">                <span class="comment">//h=height[start];</span></div><div class="line">                start++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">//h=height[end];</span></div><div class="line">                end--;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="12-整数转换成罗马数字（回到目录）"><a href="#12-整数转换成罗马数字（回到目录）" class="headerlink" title="12 整数转换成罗马数字（回到目录）"></a>12 整数转换成罗马数字（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/integer-to-roman/description/" target="_blank" rel="external">LINK</a></p>
<p>我的做法如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; roman=&#123;<span class="string">"M"</span>,<span class="string">"D"</span>,<span class="string">"C"</span>,<span class="string">"L"</span>,<span class="string">"X"</span>,<span class="string">"V"</span>,<span class="string">"I"</span>&#125;;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; val=&#123;<span class="number">1000</span>,<span class="number">500</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;num !=<span class="number">0</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(num!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(num&gt;=val[i])</div><div class="line">                &#123;</div><div class="line">                    num -= val[i];</div><div class="line">                    res += roman[i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>参考做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; roman=&#123;<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125;;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; val=&#123;<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;num !=<span class="number">0</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(num&gt;=val[i])</div><div class="line">            &#123;</div><div class="line">                num -= val[i];</div><div class="line">                res += roman[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="13-罗马数字转换城整数（回到目录）"><a href="#13-罗马数字转换城整数（回到目录）" class="headerlink" title="13 罗马数字转换城整数（回到目录）"></a>13 罗马数字转换城整数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/roman-to-integer/description/" target="_blank" rel="external">LINK</a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; char_map=&#123;&#123;<span class="string">'I'</span>,<span class="number">1</span>&#125;,&#123;<span class="string">'V'</span>,<span class="number">5</span>&#125;,&#123;<span class="string">'X'</span>,<span class="number">10</span>&#125;,&#123;<span class="string">'L'</span>,<span class="number">50</span>&#125;,&#123;<span class="string">'C'</span>,<span class="number">100</span>&#125;,&#123;<span class="string">'D'</span>,<span class="number">500</span>&#125;,&#123;<span class="string">'M'</span>,<span class="number">1000</span>&#125;&#125;;</div><div class="line">        <span class="keyword">int</span> sum=char_map[s.back()];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size()<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(char_map[s[i]]&lt;char_map[s[i+<span class="number">1</span>]])</div><div class="line">            &#123;</div><div class="line">                sum=sum-char_map[s[i]];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                sum=sum+char_map[s[i]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="15-三数之和（回到目录）"><a href="#15-三数之和（回到目录）" class="headerlink" title="15 三数之和（回到目录）"></a>15 三数之和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/3sum/description/" target="_blank" rel="external">链接</a>:<br>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p>
<p><strong>注意</strong>: 答案中不可以包含重复的三元组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，满足要求的三元组集合为：</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-2</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> k=len<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(j&lt;k)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&gt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    k--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&lt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    j++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    res.push_back(&#123;nums[i],nums[j],nums[k]&#125;);</div><div class="line">                    <span class="keyword">while</span>(nums[j+<span class="number">1</span>]==nums[j])</div><div class="line">                    &#123;</div><div class="line">                        j++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">while</span>(nums[k]==nums[k<span class="number">-1</span>])</div><div class="line">                    &#123;</div><div class="line">                        k--;</div><div class="line">                    &#125;</div><div class="line">                    j++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(nums[i+<span class="number">1</span>]==nums[i])</div><div class="line">            &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>启发于4数之和的做法，有以下的代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num) <span class="comment">//相当于target==0</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span>(num.size()&lt;<span class="number">3</span>) <span class="keyword">return</span> res;</div><div class="line">        sort(num.begin(),num.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> target_2=-num[i];</div><div class="line">            <span class="keyword">int</span> left=i+<span class="number">1</span>,right=num.size()<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(left&lt;right)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sum_2=num[left]+num[right];</div><div class="line">                <span class="keyword">if</span>(sum_2&lt;target_2)</div><div class="line">                &#123;</div><div class="line">                    left++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum_2&gt;target_2)</div><div class="line">                &#123;</div><div class="line">                    right--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum_2==target_2)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item(<span class="number">3</span>,<span class="number">0</span>);</div><div class="line">                    item[<span class="number">0</span>]=num[i];</div><div class="line">                    item[<span class="number">1</span>]=num[left];</div><div class="line">                    item[<span class="number">2</span>]=num[right];</div><div class="line">                    res.push_back(item);</div><div class="line">                    <span class="keyword">while</span>(num[left]==item[<span class="number">1</span>]) left++;</div><div class="line">                    <span class="keyword">while</span>(num[right]==item[<span class="number">2</span>]) right--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(num[i+<span class="number">1</span>]==num[i]) i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16 最接近的三数之和"></a>16 最接近的三数之和</h1><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>
<p><code>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</code></p>
<p>与 target 最接近的三个数的和为 <code>2(-1 + 2 + 1 = 2).</code><br><strong>可以通过的做法之一</strong>，使用左右指针往中间夹逼。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//int closestSum=nums[0]+nums[1]+nums[2];</span></div><div class="line">        <span class="keyword">int</span> closestSum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> diff=<span class="number">99999999999999999</span>;</div><div class="line">        <span class="comment">//int diff=abs(closestSum-target);</span></div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> left=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> right=nums.size()<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(left&lt;right)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sum=nums[i]+nums[left]+nums[right];</div><div class="line">                <span class="keyword">int</span> new_diff=<span class="built_in">abs</span>(sum-target);</div><div class="line">                <span class="keyword">if</span>(diff&gt;new_diff)</div><div class="line">                &#123;</div><div class="line">                    diff=new_diff;</div><div class="line">                    closestSum=sum;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(sum&lt;target)</div><div class="line">                &#123;</div><div class="line">                    left++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    right--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> closestSum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="17-电话号码的字母组合（回到目录）"><a href="#17-电话号码的字母组合（回到目录）" class="headerlink" title="17 电话号码的字母组合（回到目录）"></a>17 电话号码的字母组合（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1:</p>
<p>不对应任何字母。</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""></p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入：&quot;23&quot;</div><div class="line"></div><div class="line">输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//使用递归回溯做法。非常妙！</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(digits.size()==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">string</span> local;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; table&#123;&#123;<span class="string">'w'</span>&#125;, &#123;<span class="string">'w'</span>&#125;, &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;, &#123;<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;, &#123;<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>&#125;, &#123;<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>&#125;, </div><div class="line">        &#123;<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>&#125;, &#123;<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>&#125;, &#123;<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>&#125;, &#123;<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>&#125;&#125;;<span class="comment">//前两个，随便定义。。。。</span></div><div class="line">        generate(table,res,local,<span class="number">0</span>,digits);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;table,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res,<span class="built_in">string</span> &amp;local,<span class="keyword">int</span> index,<span class="built_in">string</span> digits)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> digit=digits[index]-<span class="string">'0'</span>;</div><div class="line">        <span class="keyword">if</span>(index==digits.size())</div><div class="line">        &#123;</div><div class="line">            res.push_back(local);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;table[digit].size();i++)</div><div class="line">        &#123;</div><div class="line">            local.push_back(table[digit][i]);</div><div class="line">            generate(table,res,local,index+<span class="number">1</span>,digits);</div><div class="line">            local.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>==大坑==</strong>：<br>实际上这行代码是省略了的，因为对于一个字符串来说，结束符是‘\0’,index加到最后面递归函数自然会return，所以可以不用return。我一开始，是直接在<code>res.push_back(local);</code>的下一行加return，那肯定是错的。因为index还没大于digits.size，就不能return.</p>
<h1 id="18-四数之和（回到目录）"><a href="#18-四数之和（回到目录）" class="headerlink" title="18 四数之和（回到目录）"></a>18 四数之和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num, <span class="keyword">int</span> target) &#123;</div><div class="line">    </div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (num.size()&lt;<span class="number">4</span>)<span class="comment">//原先是num.empy()</span></div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">    </div><div class="line">        sort(num.begin(),num.end());</div><div class="line">    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.size()<span class="number">-3</span>; i++) &#123;<span class="comment">//原先是i&lt;num.size();</span></div><div class="line">        </div><div class="line">            <span class="keyword">int</span> target_3 = target - num[i];</div><div class="line">        </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; num.size()<span class="number">-2</span>; j++) &#123; <span class="comment">//原先是i&lt;num.size()</span></div><div class="line">            </div><div class="line">                <span class="keyword">int</span> target_2 = target_3 - num[j];</div><div class="line">            </div><div class="line">                <span class="keyword">int</span> front = j + <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> back = num.size() - <span class="number">1</span>;</div><div class="line">            </div><div class="line">                <span class="keyword">while</span>(front &lt; back) &#123;</div><div class="line">                </div><div class="line">                    <span class="keyword">int</span> two_sum = num[front] + num[back];</div><div class="line">                </div><div class="line">                    <span class="keyword">if</span> (two_sum &lt; target_2) front++;</div><div class="line">                </div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (two_sum &gt; target_2) back--;</div><div class="line">                </div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                    </div><div class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; quadruplet(<span class="number">4</span>, <span class="number">0</span>);</div><div class="line">                        quadruplet[<span class="number">0</span>] = num[i];</div><div class="line">                        quadruplet[<span class="number">1</span>] = num[j];</div><div class="line">                        quadruplet[<span class="number">2</span>] = num[front];</div><div class="line">                        quadruplet[<span class="number">3</span>] = num[back];</div><div class="line">                        res.push_back(quadruplet);</div><div class="line">                    </div><div class="line">                        <span class="comment">// Processing the duplicates of number 3</span></div><div class="line">                        <span class="keyword">while</span> (front &lt; back &amp;&amp; num[front] == quadruplet[<span class="number">2</span>]) ++front;</div><div class="line">                    </div><div class="line">                        <span class="comment">// Processing the duplicates of number 4</span></div><div class="line">                        <span class="keyword">while</span> (front &lt; back &amp;&amp; num[back] == quadruplet[<span class="number">3</span>]) --back;</div><div class="line">                </div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="comment">// Processing the duplicates of number 2</span></div><div class="line">                <span class="keyword">while</span>(j + <span class="number">1</span> &lt; num.size() &amp;&amp; num[j + <span class="number">1</span>] == num[j]) ++j;</div><div class="line">            &#125;</div><div class="line">        </div><div class="line">            <span class="comment">// Processing the duplicates of number 1</span></div><div class="line">            <span class="keyword">while</span> (i + <span class="number">1</span> &lt; num.size() &amp;&amp; num[i + <span class="number">1</span>] == num[i]) ++i;</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="19-删除倒数第N个节点（回到目录）"><a href="#19-删除倒数第N个节点（回到目录）" class="headerlink" title="19 删除倒数第N个节点（回到目录）"></a>19 删除倒数第N个节点（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><strong>我一开始的做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">        ListNode* p=head;</div><div class="line">        <span class="keyword">while</span>(p)</div><div class="line">        &#123;</div><div class="line">            len++;</div><div class="line">            p=p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span> &amp;&amp; n==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(len!=<span class="number">1</span> &amp;&amp;len==n)</div><div class="line">        &#123;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        p=head;</div><div class="line">        <span class="keyword">int</span> t1=len-n<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(t1&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            t1--;</div><div class="line">            p=p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* pre=p;</div><div class="line">        p=head;</div><div class="line">        <span class="keyword">int</span> t2=len-n+<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(t2&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            t2--;</div><div class="line">            p=p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* head_next=p;</div><div class="line">        pre-&gt;next=head_next;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="21-合并两个有序链表（回到目录）"><a href="#21-合并两个有序链表（回到目录）" class="headerlink" title="21 合并两个有序链表（回到目录）"></a>21 合并两个有序链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</div><div class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//新建节点的两种方式</span></div><div class="line">        <span class="comment">/*</span></div><div class="line">        ListNode temp(0);</div><div class="line">        ListNode* ptr=&amp;temp;</div><div class="line">        */</div><div class="line">        ListNode* pre=ListNode(<span class="number">0</span>);</div><div class="line">        ListNode* ptr=pre;</div><div class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">            &#123;</div><div class="line">                ptr=l1;</div><div class="line">                l1=l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ptr=l2;</div><div class="line">                l2=l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            ptr=ptr-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(l1)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l2)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l2;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> pre-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="20-有效的括号（回到目录）"><a href="#20-有效的括号（回到目录）" class="headerlink" title="20 有效的括号（回到目录）"></a>20 有效的括号（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个只包括 <code>&#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。</p>
<p>左括号必须以正确的顺序闭合。</p>
<p><strong>注意</strong>空字符串可被认为是有效字符串。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=s.size();</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(res.empty()) res.push(s[i]);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((res.top()==<span class="string">'('</span> &amp;&amp; s[i]==<span class="string">')'</span>) || (res.top()==<span class="string">'['</span> &amp;&amp; s[i]==<span class="string">']'</span>) ||(res.top()==<span class="string">'&#123;'</span> &amp;&amp; s[i]==<span class="string">'&#125;'</span>))</div><div class="line">            &#123;</div><div class="line">                res.pop();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                res.push(s[i]);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.empty();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="23-合并K个有序链表（回到目录）"><a href="#23-合并K个有序链表（回到目录）" class="headerlink" title="23 合并K个有序链表（回到目录）"></a>23 合并K个有序链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入:</div><div class="line">[</div><div class="line">  1-&gt;4-&gt;5,</div><div class="line">  1-&gt;3-&gt;4,</div><div class="line">  2-&gt;6</div><div class="line">]</div><div class="line">输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</div></pre></td></tr></table></figure></p>
<p><strong>方法1：分治归并</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(lists.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(lists.size()==<span class="number">1</span>) <span class="keyword">return</span> lists[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span>(lists.size()==<span class="number">2</span>) <span class="keyword">return</span> mergeTwoLists(lists[<span class="number">0</span>],lists[<span class="number">1</span>]);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid=lists.size()/<span class="number">2</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; sublists_1;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; sublists_2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid;i++)</div><div class="line">        &#123;</div><div class="line">            sublists_1.push_back(lists[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid;i&lt;lists.size();i++)</div><div class="line">        &#123;</div><div class="line">            sublists_2.push_back(lists[i]);</div><div class="line">        &#125;</div><div class="line">        ListNode* l1=mergeKLists(sublists_1);</div><div class="line">        ListNode* l2=mergeKLists(sublists_2);</div><div class="line">        <span class="keyword">return</span> mergeTwoLists(l1,l2);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1,ListNode* l2)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function">ListNode <span class="title">temp</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode* ptr= &amp;temp;</div><div class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">            &#123;</div><div class="line">                ptr-&gt;next=l1;</div><div class="line">                l1=l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ptr-&gt;next=l2;</div><div class="line">                l2=l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            ptr=ptr-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l1)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l2)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> temp.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法2: 将所有的节点放在一个vector,然后再排序，最后相连。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; node_vec;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lists.size();i++)</div><div class="line">        &#123;</div><div class="line">            node_vec.push_back(lists[i]);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node_vec.size()==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        sort(node_vec.begin(),node_vec.end(),cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;node_vec.size();i++)</div><div class="line">        &#123;</div><div class="line">            node_vec[i<span class="number">-1</span>]-&gt;next=node_vec[i];</div><div class="line">        &#125;</div><div class="line">        node_vec[node_vec.size()<span class="number">-1</span>]-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> node_vec[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> ListNode* a,<span class="keyword">const</span> ListNode* b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a-&gt;val &lt; b-&gt;val;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="24-两两交换链表中相邻的节点（回到目录）"><a href="#24-两两交换链表中相邻的节点（回到目录）" class="headerlink" title="24 两两交换链表中相邻的节点（回到目录）"></a>24 两两交换链表中相邻的节点（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>
<p>示例:</p>
<p><code>给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</code></p>
<p>说明:</p>
<p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(head-&gt;next == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        </div><div class="line">        ListNode* temp = head-&gt;next;</div><div class="line">        head-&gt;next = swapPairs(temp-&gt;next);</div><div class="line">        temp-&gt;next = head;<span class="comment">//这个temp和上一行函数里面的temp不一样。</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="26-删除排序数组中的重复项（82，83）（回到目录）"><a href="#26-删除排序数组中的重复项（82，83）（回到目录）" class="headerlink" title="26 删除排序数组中的重复项（82，83）（回到目录）"></a>26 删除排序数组中的重复项（82，83）（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">给定数组 nums = [1,1,2], </div><div class="line"></div><div class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </div><div class="line"></div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</div><div class="line"></div><div class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</div></pre></td></tr></table></figure></p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] ==nums[i<span class="number">-1</span>])</div><div class="line">                &#123;</div><div class="line">                     cnt++;               </div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    nums[i-cnt]=nums[i];</div><div class="line">                &#125;</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> (nums.size()-cnt);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法2</strong>（我更倾向）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] !=nums[i<span class="number">-1</span>])</div><div class="line">                &#123;</div><div class="line">                    index++;</div><div class="line">                    nums[index]=nums[i];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> index+<span class="number">1</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p><strong>快慢指针:同方法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>, cur = <span class="number">0</span>, n = nums.size();</div><div class="line">        <span class="keyword">while</span> (cur &lt; n) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[pre] == nums[cur]) ++cur;</div><div class="line">            <span class="keyword">else</span> nums[++pre] = nums[cur++];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="80-删除排序数组中的重复项-II（回到目录）"><a href="#80-删除排序数组中的重复项-II（回到目录）" class="headerlink" title="80 删除排序数组中的重复项 II（回到目录）"></a>80 删除排序数组中的重复项 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">给定 nums = [1,1,1,2,2,3],</div><div class="line"></div><div class="line">函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。</div><div class="line"></div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">给定 nums = [0,0,1,1,1,1,2,3,3],</div><div class="line"></div><div class="line">函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。</div><div class="line"></div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;=<span class="number">2</span>) <span class="keyword">return</span> nums.size();</div><div class="line">        <span class="keyword">int</span> pre=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> cur=<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> count=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(cur&lt;nums.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[pre]==nums[cur] &amp;&amp; count==<span class="number">0</span>) cur++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[pre]==nums[cur]) count--;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    count=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                nums[++pre]=nums[cur++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="31-下一个排列（回到目录）"><a href="#31-下一个排列（回到目录）" class="headerlink" title="31 下一个排列（回到目录）"></a>31 下一个排列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p>
<p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p>
<p>必须原地修改，只允许使用额外常数空间。</p>
<p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。</p>
<p>1,2,3 → 1,3,2</p>
<p>3,2,1 → 1,2,3</p>
<p>1,1,5 → 1,5,1<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[i+<span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(j=len<span class="number">-1</span>;j&gt;i;j--)<span class="comment">//为了找第一个比nums[i]大的数字</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(nums[j]&gt;nums[i]) <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                swap(nums[i],nums[j]);</div><div class="line">                reverse(nums.begin()+i+<span class="number">1</span>,nums.end());</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        reverse(nums.begin(),nums.end());</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="32-最长有效括号（回到目录）"><a href="#32-最长有效括号（回到目录）" class="headerlink" title="32 最长有效括号（回到目录）"></a>32 最长有效括号（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长的包含有效括号的子串的长度。</p>
<p><strong>使用栈</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//使用栈</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; index;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)</div><div class="line">            &#123;</div><div class="line">                index.push(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(index.empty())</div><div class="line">                &#123;</div><div class="line">                    start=i+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    index.pop();</div><div class="line">                    <span class="keyword">if</span>(index.empty())</div><div class="line">                    &#123;</div><div class="line">                        res=max(res,i-start+<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        res=max(res,i-index.top());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33 搜索旋转排序数组"></a>33 搜索旋转排序数组</h1><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>
<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>
<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>
<p>你可以假设数组中不存在重复的元素。</p>
<p>你的算法时间复杂度必须是 O(log n) 级别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: nums = [4,5,6,7,0,1,2], target = 0</div><div class="line">输出: 4</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: nums = [4,5,6,7,0,1,2], target = 3</div><div class="line">输出: -1</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[begin]&lt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(target&gt;=nums[begin])</div><div class="line">                    &#123;</div><div class="line">                        end=mid<span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        begin=mid+<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]&gt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    end=mid<span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]==nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[begin]&lt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]&gt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(target&gt;=nums[begin])</div><div class="line">                    &#123;</div><div class="line">                        end=mid<span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        begin=mid+<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]==nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>二分查找</strong><br>这道题让在旋转数组中搜索一个给定值，若存在返回坐标，若不存在返回-1。我们还是考虑二分搜索法，但是这道题的难点在于我们不知道原数组在哪旋转了，我们还是用题目中给的例子来分析，对于数组[0 1 2 4 5 6 7] 共有下列七种旋转方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">0　　1　　2　　 4　　5　　6　　7</div><div class="line"></div><div class="line">7　　0　　1　　 2　　4　　5　　6</div><div class="line"></div><div class="line">6　　7　　0　　 1　　2　　4　　5</div><div class="line"></div><div class="line">5　　6　　7　　 0　　1　　2　　4</div><div class="line"></div><div class="line">4　　5　　6　　7　　0　　1　　2</div><div class="line"></div><div class="line">2　　4　　5　　6　　7　　0　　1</div><div class="line"></div><div class="line">1　　2　　4　　5　　6　　7　　0</div></pre></td></tr></table></figure></p>
<p>二分搜索法的关键在于获得了中间数后，判断下面要搜索左半段还是右半段，我们观察上面红色的数字都是升序的，由此我们可以观察出规律，如果中间的数小于最右边的数，则右半段是有序的，若中间数大于最右边数，则左半段是有序的，我们只要在有序的半段里用首尾两个数组来判断目标值是否在这一区域内，这样就可以确定保留哪半边了，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;=right)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid]==target) <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;nums[right])<span class="comment">//说明右半边有序</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[mid]&lt;target &amp;&amp; target&lt;=nums[right]) left=mid+<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> right=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;=nums[right])<span class="comment">//说明左半部有序</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(target&gt;=nums[left] &amp;&amp; target&lt;nums[mid]) right=mid<span class="number">-1</span>;</div><div class="line">                <span class="keyword">else</span> left=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="34-在排序数组中查找元素的第一个和最后一个位置（回到目录）"><a href="#34-在排序数组中查找元素的第一个和最后一个位置（回到目录）" class="headerlink" title="34 在排序数组中查找元素的第一个和最后一个位置（回到目录）"></a>34 在排序数组中查找元素的第一个和最后一个位置（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>
<p>你的算法时间复杂度必须是 O(log n) 级别。</p>
<p>如果数组中不存在目标值，返回 [-1, -1]。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: nums = [5,7,7,8,8,10], target = 8</div><div class="line">输出: [3,4]</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: nums = [5,7,7,8,8,10], target = 6</div><div class="line">输出: [-1,-1]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        result.push_back(left_bound(nums,target));</div><div class="line">        result.push_back(right_bound(nums,target));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> target)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>,end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[mid<span class="number">-1</span>]&lt;target || mid==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> mid;</div><div class="line">                &#125;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> target)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> begin=<span class="number">0</span>,end=nums.size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(target==nums[mid])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[mid+<span class="number">1</span>]&gt;target || mid==nums.size()<span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">            begin=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">        &#123;</div><div class="line">            end=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">        &#123;</div><div class="line">            begin=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>二分查找法</strong>：</p>
<p>使用两次二分查找法，第一次找到左边界，第二次调用找到右边界即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(<span class="number">2</span>, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span>(nums.empty()) <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size()<span class="number">-1</span>;<span class="comment">//这里是因为左边界的数不可能到数组最后一位</span></div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (nums[right]!= target) <span class="keyword">return</span> res;</div><div class="line">        res[<span class="number">0</span>] = right;</div><div class="line">        right = nums.size();</div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right= mid;</div><div class="line">        &#125;</div><div class="line">        res[<span class="number">1</span>] = left - <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35 搜索插入位置"></a>35 搜索插入位置</h1><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>你可以假设数组中无重复元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [1,3,5,6], 5</div><div class="line">输出: 2</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1,3,5,6], 2</div><div class="line">输出: 1</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: [1,3,5,6], 7</div><div class="line">输出: 4</div><div class="line">示例 4:</div><div class="line"></div><div class="line">输入: [1,3,5,6], 0</div><div class="line">输出: 0</div></pre></td></tr></table></figure></p>
<p><strong>视频上解法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> index=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(index==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                index=mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(mid==<span class="number">0</span> || target&gt;nums[mid<span class="number">-1</span>])</div><div class="line">                &#123;</div><div class="line">                    index=mid;</div><div class="line">                &#125;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(mid==nums.size()<span class="number">-1</span> || target&lt;nums[mid+<span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    index=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> index;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>其他解法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] &gt;= target) <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums.size();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>其他解法2:二分查找法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (nums.back() &lt; target) <span class="keyword">return</span> nums.size();</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size();</div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right = mid;<span class="comment">//相当于查找第一个大于target的数</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> right;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="39-组合总和-I"><a href="#39-组合总和-I" class="headerlink" title="39 组合总和 I"></a>39 组合总和 I</h1><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的数字可以无限制重复被选取。</p>
<p>说明：</p>
<p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。 </p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [2,3,6,7], target = 7,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [7],</div><div class="line">  [2,2,3]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [2,3,5], target = 8,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [2,2,2,2],</div><div class="line">  [2,3,3],</div><div class="line">  [3,5]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combinationSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        sort(candidates.begin(),candidates.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        generate(candidates,res,item,target,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;candidates,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item,<span class="keyword">int</span> target,<span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=candidates.size();</div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.push_back(item);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(candidates[i]);</div><div class="line">            generate(candidates,res,item,target-candidates[i],i);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="40-组合总和-II（回到目录）"><a href="#40-组合总和-II（回到目录）" class="headerlink" title="40 组合总和 II（回到目录）"></a>40 组合总和 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的每个数字在每个组合中只能使用一次。</p>
<p>说明：</p>
<p>所有数字（包括目标数）都是正整数。<br>解集不能包含重复的组合。<br>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [10,1,2,7,6,1,5], target = 8,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [1, 7],</div><div class="line">  [1, 2, 5],</div><div class="line">  [2, 6],</div><div class="line">  [1, 1, 6]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [2,5,2,1,2], target = 5,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [1,2,2],</div><div class="line">  [5]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combinationSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        sort(num.begin(),num.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; local;</div><div class="line">        findCombination(res, <span class="number">0</span>, target, local, num);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findCombination</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res, <span class="keyword">const</span> <span class="keyword">int</span> start, <span class="keyword">const</span> <span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; local, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; num)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.push_back(local);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i&lt;num.size();i++) <span class="comment">// iterative component</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">if</span>(num[i]==num[i<span class="number">-1</span>] &amp;&amp; i&gt;start) <span class="keyword">continue</span>; <span class="comment">// check duplicate combination</span></div><div class="line">                local.push_back(num[i]),</div><div class="line">                findCombination(res,i+<span class="number">1</span>,target-num[i],local,num); <span class="comment">// recursive componenet</span></div><div class="line">                local.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>另一种做法</strong>:使用set容器，代码和上面那题一样的<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combinationSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        sort(num.begin(),num.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; local;</div><div class="line">        findCombination(res, <span class="number">0</span>, target, local, num);</div><div class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; (res.begin(),res.end());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findCombination</span><span class="params">(<span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res, <span class="keyword">const</span> <span class="keyword">int</span> order, <span class="keyword">const</span> <span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; local, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; num)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.insert(local);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = order;i&lt;num.size();i++) <span class="comment">// iterative component</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">                <span class="comment">//if(num[i]==num[i-1]&amp;&amp;i&gt;order) continue; // check duplicate combination</span></div><div class="line">                local.push_back(num[i]),</div><div class="line">                findCombination(res,i+<span class="number">1</span>,target-num[i],local,num); <span class="comment">// recursive componenet</span></div><div class="line">                local.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="45-跳跃游戏-II"><a href="#45-跳跃游戏-II" class="headerlink" title="45 跳跃游戏 II"></a>45 跳跃游戏 II</h1><p>给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: [2,3,1,1,4]</div><div class="line">输出: 2</div><div class="line">解释: 跳到最后一个位置的最小跳跃数是 2。</div><div class="line">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> current_max_index=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> pre_max_index=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> jump_min=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i&gt;current_max_index)</div><div class="line">            &#123;</div><div class="line">                jump_min++;</div><div class="line">                current_max_index=pre_max_index;</div><div class="line">            &#125;</div><div class="line">                         </div><div class="line">            <span class="keyword">if</span>(pre_max_index&lt;nums[i]+i)</div><div class="line">            &#123;</div><div class="line">                pre_max_index=nums[i]+i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> jump_min;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46 全排列"></a>46 全排列</h1><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p>
<p><strong>示例</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3]</div><div class="line"></div><div class="line">输出:</div><div class="line">[</div><div class="line">  [1,2,3],</div><div class="line">  [1,3,2],</div><div class="line">  [2,1,3],</div><div class="line">  [2,3,1],</div><div class="line">  [3,1,2],</div><div class="line">  [3,2,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        generate(nums,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp;res,<span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            res.push_back(nums);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)<span class="comment">//循环实现和begin+1之后的全排列</span></div><div class="line">        &#123;</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">            generate(nums,res,begin+<span class="number">1</span>);</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>注</strong>：我们来仔细推敲一下循环体里的代码，当我们对序列进行交换之后，就将交换后的序列除去第一个元素放入到下一次递归中去了，递归完成了再进行下一次循环。这是某一次循环程序所做的工作，这里有一个问题，那就是在进入到下一次循环时，序列是被改变了。可是，如果我们要假定第一位的所有可能性的话，那么，就必须是在建立在这些序列的初始状态一致的情况下,所以每次交换后，要还原，确保初始状态一致。 </p>
<h1 id="47-全排列II（回到目录）"><a href="#47-全排列II（回到目录）" class="headerlink" title="47 全排列II（回到目录）"></a>47 全排列II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入: [1,1,2]</div><div class="line"></div><div class="line">输出:</div><div class="line">[</div><div class="line">  [1,1,2],</div><div class="line">  [1,2,1],</div><div class="line">  [2,1,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permuteUnique(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res_set;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        generate(res,res_set,nums,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,<span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res_set,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size() &amp;&amp; res_set.find(nums) ==res_set.end())</div><div class="line">        &#123;</div><div class="line">            res.push_back(nums);</div><div class="line">            res_set.insert(nums);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">            generate(res,res_set,nums,begin+<span class="number">1</span>);</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="48-旋转图像（回到目录）"><a href="#48-旋转图像（回到目录）" class="headerlink" title="48 旋转图像（回到目录）"></a>48 旋转图像（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个 n × n 的二维矩阵表示一个图像。将图像顺时针旋转 90 度。</p>
<p>说明：你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">给定 matrix = </div><div class="line">[</div><div class="line">  [1,2,3],</div><div class="line">  [4,5,6],</div><div class="line">  [7,8,9]</div><div class="line">],</div><div class="line"></div><div class="line">原地旋转输入矩阵，使其变为:</div><div class="line">[</div><div class="line">  [7,4,1],</div><div class="line">  [8,5,2],</div><div class="line">  [9,6,3]</div><div class="line">]</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">给定 matrix =</div><div class="line">[</div><div class="line">  [ 5, 1, 9,11],</div><div class="line">  [ 2, 4, 8,10],</div><div class="line">  [13, 3, 6, 7],</div><div class="line">  [15,14,12,16]</div><div class="line">], </div><div class="line"></div><div class="line">原地旋转输入矩阵，使其变为:</div><div class="line">[</div><div class="line">  [15,13, 2, 5],</div><div class="line">  [14, 3, 4, 1],</div><div class="line">  [12, 6, 8, 9],</div><div class="line">  [16, 7,10,11]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//i表示的是绕中心的层数，j是列数</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> n=matrix.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> t=matrix[i][j];</div><div class="line">                matrix[i][j]=matrix[n<span class="number">-1</span>-j][i];</div><div class="line">                matrix[n<span class="number">-1</span>-j][i]=matrix[n<span class="number">-1</span>-i][n<span class="number">-1</span>-j];</div><div class="line">                matrix[n<span class="number">-1</span>-i][n<span class="number">-1</span>-j]=matrix[j][n<span class="number">-1</span>-i];</div><div class="line">                matrix[j][n<span class="number">-1</span>-i]=t;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49 字母异位词分组"></a>49 字母异位词分组</h1><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</div><div class="line">  [&quot;nat&quot;,&quot;tan&quot;],</div><div class="line">  [&quot;bat&quot;]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>说明</strong>：</p>
<p>所有输入均为小写字母。</p>
<p>不考虑答案输出的顺序。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; groupAnagrams(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs) </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;anagram;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">            change_to_vec(strs[i],vec);</div><div class="line">            <span class="keyword">if</span>(anagram.find(vec)==anagram.end())</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; item;</div><div class="line">                anagram[vec]=item;</div><div class="line">            &#125;</div><div class="line">            anagram[vec].push_back(strs[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;::iterator it;</div><div class="line">        <span class="keyword">for</span>(it=anagram.begin();it!=anagram.end();it++)</div><div class="line">        &#123;</div><div class="line">            res.push_back((*it).second);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_to_vec</span><span class="params">(<span class="built_in">string</span> &amp;str,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</div><div class="line">        &#123;</div><div class="line">            vec[str[i]-<span class="string">'a'</span>]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="51-N皇后（回到目录）"><a href="#51-N皇后（回到目录）" class="headerlink" title="51 N皇后（回到目录）"></a>51 N皇后（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; solveNQueens(<span class="keyword">int</span> n) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mark;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; location;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            mark.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                mark[i].push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            location.push_back(<span class="string">""</span>);<span class="comment">//字符串向量的初始化</span></div><div class="line">            location[i].append(n,<span class="string">'.'</span>);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        generate(<span class="number">0</span>,n,location,result,mark);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;location,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; &amp;result,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;mark)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(k==n)</div><div class="line">        &#123;</div><div class="line">            result.push_back(location);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(mark[k][i]==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; temp_mark;</div><div class="line">                temp_mark=mark;</div><div class="line">                location[k][i]=<span class="string">'Q'</span>;</div><div class="line">                put_down_queen(k,i,mark);</div><div class="line">                generate(k+<span class="number">1</span>,n,location,result,mark);</div><div class="line">                mark=temp_mark;</div><div class="line">                location[k][i]=<span class="string">'.'</span>;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put_down_queen</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;mark)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</div><div class="line">        mark[x][y]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;mark.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> new_x=x+i*dx[j];</div><div class="line">                <span class="keyword">int</span> new_y=y+i*dy[j];</div><div class="line">                <span class="keyword">if</span>(new_x&gt;=<span class="number">0</span> &amp;&amp; new_x&lt;mark.size() &amp;&amp; new_y&gt;=<span class="number">0</span> &amp;&amp; new_y&lt;mark.size())</div><div class="line">                &#123;</div><div class="line">                    mark[new_x][new_y]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53 最大子序和"></a>53 最大子序和</h1><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</div><div class="line">输出: 6</div><div class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</div></pre></td></tr></table></figure></p>
<p>进阶:</p>
<p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(nums.size()+<span class="number">6</span>,<span class="number">0</span>);</div><div class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> max_res=dp[<span class="number">0</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=max(dp[i<span class="number">-1</span>]+nums[i],nums[i]);</div><div class="line">            <span class="keyword">if</span>(max_res&lt;dp[i])</div><div class="line">            &#123;</div><div class="line">                max_res=dp[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_res;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="55-跳跃游戏（回到目录）"><a href="#55-跳跃游戏（回到目录）" class="headerlink" title="55 跳跃游戏（回到目录）"></a>55 跳跃游戏（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>
<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>
<p>判断你是否能够到达最后一个位置。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [2,3,1,1,4]</div><div class="line">输出: true</div><div class="line">解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [3,2,1,0,4]</div><div class="line">输出: false</div><div class="line">解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canjump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; index;</div><div class="line">        <span class="keyword">int</span> jump=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            index.push_back(i+nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> max_jump=index[<span class="number">0</span>];</div><div class="line">        <span class="keyword">while</span>(jump&lt;index.size() &amp;&amp; jump&lt;max_jump)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(max_jump&lt;index[jump])</div><div class="line">            &#123;</div><div class="line">                max_jump=index[jump];</div><div class="line">            &#125;</div><div class="line">            jump++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(jump==index.size()</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="61-旋转链表（回到目录）"><a href="#61-旋转链表（回到目录）" class="headerlink" title="61 旋转链表（回到目录）"></a>61 旋转链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</div><div class="line"></div><div class="line">输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</div><div class="line"></div><div class="line">解释:</div><div class="line"></div><div class="line">向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</div><div class="line"></div><div class="line">向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4</div><div class="line"></div><div class="line">输出: 2-&gt;0-&gt;1-&gt;NULL</div><div class="line"></div><div class="line">解释:</div><div class="line"></div><div class="line">向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL</div><div class="line"></div><div class="line">向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL</div><div class="line"></div><div class="line">向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL</div><div class="line"></div><div class="line">向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</div><div class="line"></div><div class="line">**链表移动位置和数组不一样**</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">rotateRight</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">int</span> len=<span class="number">1</span>;</div><div class="line">        ListNode* p=head;</div><div class="line">        <span class="keyword">while</span>(p-&gt;next)<span class="comment">//注意这里一定要使用p-&gt;next,不然编译器会报错。</span></div><div class="line">        &#123;</div><div class="line">            len++;</div><div class="line">            p=p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        p-&gt;next=head;</div><div class="line">        <span class="keyword">int</span> begin_pos=len-k%len<span class="number">-1</span>;</div><div class="line">        ListNode* cur=head;</div><div class="line">        <span class="keyword">while</span>(begin_pos)</div><div class="line">        &#123;</div><div class="line">            begin_pos--;</div><div class="line">            cur=cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* new_head=cur-&gt;next;</div><div class="line">        cur-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> new_head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64 最小路径和"></a>64 最小路径和</h1><p>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>
<p>说明：每次只能向下或者向右移动一步。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入:</div><div class="line">[</div><div class="line">  [1,3,1],</div><div class="line">  [1,5,1],</div><div class="line">  [4,2,1]</div><div class="line">]</div><div class="line">输出: 7</div><div class="line">解释: 因为路径 1→3→1→1→1 的总和最小。</div></pre></td></tr></table></figure></p>
<p>代码1：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(grid.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> row=grid.size();</div><div class="line">        <span class="keyword">int</span> col=grid[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;dp(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,<span class="number">0</span>));</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=grid[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;col;j++)</div><div class="line">        &#123;</div><div class="line">            dp[<span class="number">0</span>][j]=grid[<span class="number">0</span>][j]+dp[<span class="number">0</span>][j<span class="number">-1</span>];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;row;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i][<span class="number">0</span>]=grid[i][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;col;j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])+grid[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[row<span class="number">-1</span>][col<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>代码2：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = grid.size();</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">if</span>(m == <span class="number">0</span> || n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) </div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = grid[i][j];</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">0</span>) </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i][j<span class="number">-1</span>] + grid[i][j];</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>) </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] + grid[i][j];</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]) + grid[i][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="66-加一（回到目录）"><a href="#66-加一（回到目录）" class="headerlink" title="66 加一（回到目录）"></a>66 加一（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非负整数组成的非空数组，在该数的基础上加一，返回一个新的数组。</p>
<p>最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。</p>
<p>你可以假设除了整数 0 之外，这个整数不会以零开头。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; plusOne(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=digits.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(digits[i]!=<span class="number">9</span>)</div><div class="line">            &#123;</div><div class="line">                digits[i]++;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                digits[i]=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(digits[<span class="number">0</span>]==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                digits[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">                digits.push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> digits;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="67-二进制求和（回到目录）"><a href="#67-二进制求和（回到目录）" class="headerlink" title="67 二进制求和（回到目录）"></a>67 二进制求和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定两个二进制字符串，返回他们的和（用二进制表示）。</p>
<p>输入为非空字符串且只包含数字 1 和 0。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: a = &quot;11&quot;, b = &quot;1&quot;</div><div class="line">输出: &quot;100&quot;</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: a = &quot;1010&quot;, b = &quot;1011&quot;</div><div class="line">输出: &quot;10101&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">addBinary</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">int</span> len_a=a.size();</div><div class="line">        <span class="keyword">int</span> len_b=b.size();</div><div class="line">        <span class="keyword">int</span> n=max(len_a,len_b);</div><div class="line">        <span class="keyword">int</span> carry=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(len_a&gt;len_b)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len_a-len_b;i++)</div><div class="line">            &#123;</div><div class="line">                b.insert(b.begin(),<span class="string">'0'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len_b&gt;len_a)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len_b-len_a;i++)</div><div class="line">            &#123;</div><div class="line">                a.insert(a.begin(),<span class="string">'0'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> temp=<span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(carry)</div><div class="line">            &#123;</div><div class="line">                temp=(a[i]-<span class="string">'0'</span>)+(b[i]-<span class="string">'0'</span>)+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                temp=(a[i]-<span class="string">'0'</span>)+(b[i]-<span class="string">'0'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">switch</span>(temp)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    res.insert(res.begin(),<span class="string">'0'</span>);</div><div class="line">                    carry=<span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    res.insert(res.begin(),<span class="string">'1'</span>);</div><div class="line">                    carry=<span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                    res.insert(res.begin(),<span class="string">'0'</span>);</div><div class="line">                    carry=<span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                    res.insert(res.begin(),<span class="string">'1'</span>);</div><div class="line">                    carry=<span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(carry)</div><div class="line">        &#123;</div><div class="line">            res.insert(res.begin(),<span class="string">'1'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="69-x-的平方根（回到目录）"><a href="#69-x-的平方根（回到目录）" class="headerlink" title="69 x 的平方根（回到目录）"></a>69 x 的平方根（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>实现 int sqrt(int x) 函数。</p>
<p>计算并返回 x 的平方根，其中 x 是非负整数。</p>
<p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 4</div><div class="line">输出: 2</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 8</div><div class="line">输出: 2</div><div class="line">说明: 8 的平方根是 2.82842..., </div><div class="line">     由于返回类型是整数，小数部分将被舍去</div></pre></td></tr></table></figure></p>
<p><strong>解法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>,  high = x, mid;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">2</span>) <span class="keyword">return</span> x; <span class="comment">// to avoid mid = 0</span></div><div class="line">        <span class="keyword">while</span>(low&lt;high)</div><div class="line">        &#123;</div><div class="line">            mid = (low + high)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(x/mid &gt;= mid) low = mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> high<span class="number">-1</span>;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>解法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原来的i是int,不通过，改成long之后，就可以了</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n=x/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">2</span>) <span class="keyword">return</span> x; </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(x&gt;=i*i &amp;&amp; x&lt;(i+<span class="number">1</span>)*(i+<span class="number">1</span>))</div><div class="line">            &#123;</div><div class="line">                res=i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="70-爬楼梯答（回到目录）"><a href="#70-爬楼梯答（回到目录）" class="headerlink" title="70 爬楼梯答（回到目录）"></a>70 爬楼梯答（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>假设你正在爬楼梯。需要 n 步你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1：</div><div class="line">输入： 2</div><div class="line">输出： 2</div><div class="line">解释： 有两种方法可以爬到楼顶。</div><div class="line">1.  1 步 + 1 步</div><div class="line">2.  2 步</div><div class="line"></div><div class="line">示例 2：</div><div class="line">输入： 3</div><div class="line">输出： 3</div><div class="line">解释： 有三种方法可以爬到楼顶。</div><div class="line">1.  1 步 + 1 步 + 1 步</div><div class="line">2.  1 步 + 2 步</div><div class="line">3.  2 步 + 1 步</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n,<span class="number">0</span>);</div><div class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">        dp[<span class="number">2</span>]=<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76 最小覆盖子串"></a>76 最小覆盖子串</h1><p>给定一个字符串 S 和一个字符串 T，请在 S 中找出包含 T 所有字母的最小子串。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: S = &quot;ADOBECODEBANC&quot;, T = &quot;ABC&quot;</div><div class="line">输出: &quot;BANC&quot;</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<p>如果 S 中不存这样的子串，则返回空字符串 “”。<br>如果 S 中存在这样的子串，我们保证它是唯一的答案。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_window_ok</span><span class="params">(<span class="keyword">int</span> map_s[], <span class="keyword">int</span> <span class="keyword">map_t</span>[], <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="keyword">vec_t</span>)</span></span>&#123;</div><div class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">vec_t</span>.size(); i++)&#123;</div><div class="line">    		<span class="keyword">if</span> (map_s[<span class="keyword">vec_t</span>[i]] &lt; <span class="keyword">map_t</span>[<span class="keyword">vec_t</span>[i]])&#123;</div><div class="line">		    	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		    &#125;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">minWindow</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s, <span class="built_in">std</span>::<span class="built_in">string</span> t)</span> </span>&#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> MAX_ARRAY_LEN = <span class="number">128</span>;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">map_t</span>[MAX_ARRAY_LEN] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">int</span> map_s[MAX_ARRAY_LEN] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="keyword">vec_t</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++)&#123;</div><div class="line">        	<span class="keyword">map_t</span>[t[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_ARRAY_LEN; i++)&#123;</div><div class="line">        	<span class="keyword">if</span> (<span class="keyword">map_t</span>[i] &gt; <span class="number">0</span>)&#123;</div><div class="line">	        	<span class="keyword">vec_t</span>.push_back(i);</div><div class="line">	        &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> window_begin = <span class="number">0</span>;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</div><div class="line">        	map_s[s[i]]++;</div><div class="line">        	<span class="keyword">while</span>(window_begin &lt; i)&#123;</div><div class="line">        		<span class="keyword">char</span> begin_ch = s[window_begin];</div><div class="line">	        	<span class="keyword">if</span> (<span class="keyword">map_t</span>[begin_ch] == <span class="number">0</span>)&#123;</div><div class="line">	        		window_begin++;</div><div class="line">	        	&#125;</div><div class="line">	        	<span class="keyword">else</span> <span class="keyword">if</span>	(map_s[begin_ch] &gt; <span class="keyword">map_t</span>[begin_ch])&#123;</div><div class="line">	        		map_s[begin_ch]--;</div><div class="line">	        		window_begin++;</div><div class="line">	        	&#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    &#123;<span class="keyword">break</span>;&#125;</div><div class="line"></div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">if</span> (is_window_ok(map_s, <span class="keyword">map_t</span>, <span class="keyword">vec_t</span>))&#123;</div><div class="line">        		<span class="keyword">int</span> new_window_len = i - window_begin + <span class="number">1</span>;</div><div class="line">        		<span class="keyword">if</span> (result == <span class="string">""</span> || result.length() &gt; new_window_len)&#123;</div><div class="line">		        	result = s.substr(window_begin, new_window_len);</div><div class="line">				&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="77-组合（回到目录）"><a href="#77-组合（回到目录）" class="headerlink" title="77 组合（回到目录）"></a>77 组合（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>
<p><strong>示例</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">输入: n = 4, k = 2</div><div class="line"></div><div class="line">输出:</div><div class="line">[</div><div class="line">  [2,4],</div><div class="line">  [3,4],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  [1,3],</div><div class="line">  [1,4],</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>递归回溯</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item(<span class="number">0</span>,k);</div><div class="line">        <span class="keyword">if</span>(k&gt;n) <span class="keyword">return</span> res;</div><div class="line">        generate(n,k,<span class="number">0</span>,<span class="number">0</span>,item,res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> numOfDigit,<span class="keyword">int</span> begin,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(numOfDigit==k)</div><div class="line">        &#123;</div><div class="line">            res.push_back(item);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(i+<span class="number">1</span>);</div><div class="line">            generate(n,k,numOfDigit+<span class="number">1</span>,i+<span class="number">1</span>,item,res);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="78-子集（回到目录）"><a href="#78-子集（回到目录）" class="headerlink" title="78 子集（回到目录）"></a>78 子集（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">输入: nums = [1,2,3]</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [3],</div><div class="line">  [1],</div><div class="line">  [2],</div><div class="line">  [1,2,3],</div><div class="line">  [1,3],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>小象写法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,nums,item,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp;result)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size()) <span class="keyword">return</span>;</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        result.push_back(item);</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result);</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>for循环里递归</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//for循环</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        res.push_back(item);</div><div class="line">        sort(nums.begin(),nums.end());<span class="comment">//解答错误不是没有排序的问题</span></div><div class="line">        generate(res,item,nums,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(nums[i]);</div><div class="line">            res.push_back(item);</div><div class="line">            generate(res,item,nums,i+<span class="number">1</span>);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="90-子集-II（回到目录）"><a href="#90-子集-II（回到目录）" class="headerlink" title="90 子集 II（回到目录）"></a>90 子集 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,2]</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [2],</div><div class="line">  [1],</div><div class="line">  [1,2,2],</div><div class="line">  [2,2],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>小象解法</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsetsWithDup(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res_set;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,nums,item,result,res_set);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;result, <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res_set)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size())</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(res_set.find(item)==res_set.end())</div><div class="line">        &#123;</div><div class="line">            result.push_back(item);</div><div class="line">            res_set.insert(item);</div><div class="line">        &#125;</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>for循环里面递归</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsetsWithDup(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        res.push_back(item);</div><div class="line">        sort(nums.begin(),nums.end());<span class="comment">//解答错误不是没有排序的问题</span></div><div class="line">        generate(res,item,nums,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(nums[i]);</div><div class="line">            res.push_back(item);</div><div class="line">            generate(res,item,nums,i+<span class="number">1</span>);</div><div class="line">            item.pop_back();</div><div class="line">            <span class="keyword">while</span>(i+<span class="number">1</span>&lt;nums.size() &amp;&amp; nums[i]==nums[i+<span class="number">1</span>]) i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="82-删除排序链表中的重复元素II（回到目录）"><a href="#82-删除排序链表中的重复元素II（回到目录）" class="headerlink" title="82 删除排序链表中的重复元素II（回到目录）"></a>82 删除排序链表中的重复元素II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</div><div class="line"></div><div class="line">输出: 1-&gt;2-&gt;5</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;1-&gt;1-&gt;2-&gt;3</div><div class="line"></div><div class="line">输出: 2-&gt;3</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>新建链表头结点指针<code>pDel，pDel-&gt;next=head</code>，并设置指针<code>prev</code>指针指向<code>pDel</code>，<code>curr</code>指针指向<code>head-&gt;next</code>（代表遍历指针）;当<code>curr-&gt;next</code>不为<code>NULL</code>，如果<code>curr-&gt;next-&gt;val == curr-&gt;val，curr=curr-&gt;next</code>；如果<code>curr-&gt;next-&gt;val != curr-&gt;val</code>；则需判断<code>prev-&gt;next=curr</code>？如果是，则<code>prev=curr</code>；如果不是，则<code>prev-&gt;next=curr-&gt;next</code>.（这里是说，<code>prev</code>先假设一个<code>next</code>指针，即<code>curr=curr-&gt;next</code>；当进行下一步判断时，如果<code>curr-&gt;next-&gt;val != curr-&gt;val</code> 且 <code>prev-&gt;next==curr</code>，则说明假设正确，prev直接指向curr）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这题一定要借用头节点，来获取pre指针。</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;             </div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span> || head-&gt;next==<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        &#125;</div><div class="line">        ListNode* pre_head=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        pre_head-&gt;next=head;</div><div class="line">        ListNode* pre=pre_head;</div><div class="line">        ListNode* cur=head;</div><div class="line">        <span class="keyword">while</span>(cur-&gt;next)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur-&gt;val != cur-&gt;next-&gt;val)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(pre-&gt;next==cur)</div><div class="line">                &#123;</div><div class="line">                    pre=cur;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    pre-&gt;next=cur-&gt;next;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            cur=cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(pre-&gt;next !=cur)</div><div class="line">        &#123;</div><div class="line">            pre-&gt;next=cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre_head-&gt;next;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="83-删除排序链表中的重复元素（回到目录）"><a href="#83-删除排序链表中的重复元素（回到目录）" class="headerlink" title="83 删除排序链表中的重复元素（回到目录）"></a>83 删除排序链表中的重复元素（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p>
<p>示例1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;1-&gt;2</div><div class="line"></div><div class="line">输出: 1-&gt;2</div></pre></td></tr></table></figure>
<p>示例2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</div><div class="line"></div><div class="line">输出: 1-&gt;2-&gt;3</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        ListNode* pre=head;</div><div class="line">        ListNode* cur=head-&gt;next;</div><div class="line">        <span class="keyword">while</span>(cur)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur-&gt;val==pre-&gt;val)</div><div class="line">            &#123;</div><div class="line">                pre-&gt;next=cur-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                pre=pre-&gt;next;</div><div class="line">            &#125;</div><div class="line">            cur=cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="86-分割链表（回到目录）"><a href="#86-分割链表（回到目录）" class="headerlink" title="86 分割链表（回到目录）"></a>86 分割链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。</p>
<p>你应当保留两个分区中每个节点的初始相对位置。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3</div><div class="line">输出: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="keyword">int</span> x)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="function">ListNode <span class="title">less_head</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        <span class="function">ListNode <span class="title">more_head</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode* less_ptr= &amp;less_head;</div><div class="line">        ListNode* more_ptr= &amp;more_head;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head-&gt;val &lt;x)</div><div class="line">            &#123;</div><div class="line">                less_ptr-&gt;next=head;</div><div class="line">                less_ptr=head;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                more_ptr-&gt;next=head;</div><div class="line">                more_ptr=head;</div><div class="line">            &#125;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        less_ptr-&gt;next=more_head.next;</div><div class="line">        more_ptr-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> less_head.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="88-合并有序数组"><a href="#88-合并有序数组" class="headerlink" title="88 合并有序数组"></a>88 合并有序数组</h1><p>给定两个有序整数数组<code>nums1</code>和 <code>nums2</code>，将<code>nums2</code> 合并到<code>nums1</code> 中，使得<code>num1</code>成为一个有序数组。</p>
<p>说明:</p>
<p>初始化 <code>nums1</code>和 <code>nums2</code>的元素数量分别为<code>m</code> 和<code>n</code>。<br>你可以假设<code>nums1</code>有足够的空间（空间大小大于或等于 <code>m + n</code>）来保存<code>nums2</code>中的元素。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: </div><div class="line">nums1 = [1,2,3,0,0,0], m = 3</div><div class="line"></div><div class="line">nums2 = [2,5,6],       n = 3</div><div class="line"></div><div class="line">输出: [1,2,2,3,5,6]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i=m<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> j=n<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> k=m+n<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums2[j]&gt;=nums1[i])</div><div class="line">            &#123;</div><div class="line">                nums1[k]=nums2[j];</div><div class="line">                k--;</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                nums1[k]=nums1[i];</div><div class="line">                k--;</div><div class="line">                i--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            nums1[k]=nums2[j];</div><div class="line">            k--;</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="92-反转链表II（回到目录）"><a href="#92-反转链表II（回到目录）" class="headerlink" title="92 反转链表II（回到目录）"></a>92 反转链表II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p>
<p>说明:<br><code>1 ≤ m ≤ n ≤ 链表长度</code>。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</div><div class="line">输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> list_len=n-m+<span class="number">1</span>;</div><div class="line">        ListNode* pre_head=<span class="literal">NULL</span>;</div><div class="line">        ListNode* result=head;</div><div class="line">        <span class="keyword">while</span>(head &amp;&amp; --m)</div><div class="line">        &#123;</div><div class="line">            pre_head=head;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* modify_list_tail=head;</div><div class="line">        ListNode* new_head=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(head &amp;&amp; list_len)</div><div class="line">        &#123;</div><div class="line">            ListNode* next=head-&gt;next;</div><div class="line">            head-&gt;next=new_head;</div><div class="line">            new_head=head;</div><div class="line">            head=next;</div><div class="line">            list_len--;</div><div class="line">        &#125;</div><div class="line">        modify_list_tail-&gt;next=head;</div><div class="line">        <span class="keyword">if</span>(pre_head)</div><div class="line">        &#123;</div><div class="line">            pre_head-&gt;next=new_head;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            result=new_head;</div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="94-二叉树的中序遍历（144，145）（回到目录）"><a href="#94-二叉树的中序遍历（144，145）（回到目录）" class="headerlink" title="94 二叉树的中序遍历（144，145）（回到目录）"></a>94 二叉树的中序遍历（144，145）（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><strong>递归方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        if(root==NULL) return res;</div><div class="line">        vector&lt;int&gt; temp1=inorderTraversal(root-&gt;left);</div><div class="line">        for(int i=0;i&lt;temp1.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp1[i]);</div><div class="line">        &#125;</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        </div><div class="line">        vector&lt;int&gt; temp2=inorderTraversal(root-&gt;right);</div><div class="line">        for(int i=0;i&lt;temp2.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp2[i]);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    vector&lt;int&gt; res;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        if(root==NULL) return res;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        stack&lt;TreeNode*&gt; s;</div><div class="line">        s.push(root);</div><div class="line">        while(!s.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode* node=s.top();</div><div class="line">            if(node-&gt;left)</div><div class="line">            &#123;</div><div class="line">                s.push(node-&gt;left);</div><div class="line">                node-&gt;left=NULL;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                res.push_back(node-&gt;val);</div><div class="line">                s.pop();</div><div class="line">                if(node-&gt;right)</div><div class="line">                &#123;</div><div class="line">                    s.push(node-&gt;right);</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="101-对称二叉树（回到目录）"><a href="#101-对称二叉树（回到目录）" class="headerlink" title="101 对称二叉树（回到目录）"></a>101 对称二叉树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p>例如，二叉树<code>[1,2,2,3,4,4,3]</code> 是对称的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    1</div><div class="line">   / \</div><div class="line">  2   2</div><div class="line"> / \ / \</div><div class="line">3  4 4  3</div><div class="line">但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</div><div class="line"></div><div class="line">    1</div><div class="line">   / \</div><div class="line">  2   2</div><div class="line">   \   \</div><div class="line">   3    3</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* left,TreeNode* right)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(left==<span class="literal">NULL</span> &amp;&amp; right==<span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(left==<span class="literal">NULL</span> &amp;&amp; right!=<span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(left!=<span class="literal">NULL</span> &amp;&amp; right==<span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(left-&gt;val !=right-&gt;val)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">bool</span> res=(isSymmetric(left-&gt;left,right-&gt;right) &amp;&amp; isSymmetric(left-&gt;right,right-&gt;left));</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) </div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">bool</span> res=isSymmetric(root-&gt;left,root-&gt;right);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="102-二叉树的层次遍历"><a href="#102-二叉树的层次遍历" class="headerlink" title="102 二叉树的层次遍历"></a>102 二叉树的层次遍历</h1><p><strong>非递归</strong></p>
<p><strong>分析</strong>：先建立一个queue，然后先把根节点放进去，这时候找根节点的左右两个子节点，这时候去掉根节点，此时queue里的元素就是下一层的所有节点，用一个for循环遍历它们，然后存到一个一维向量里，遍历完之后再把这个一维向量存到二维向量里，以此类推，可以完成层序遍历。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; levelOrder(TreeNode *root) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; oneLevel;</div><div class="line">            <span class="keyword">int</span> size = q.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">                TreeNode *node = q.front();</div><div class="line">                q.pop();</div><div class="line">                oneLevel.push_back(node-&gt;val);</div><div class="line">                <span class="keyword">if</span> (node-&gt;left) q.push(node-&gt;left);</div><div class="line">                <span class="keyword">if</span> (node-&gt;right) q.push(node-&gt;right);</div><div class="line">            &#125;</div><div class="line">            res.push_back(oneLevel);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>递归做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//递归方法</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        preorder(root,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,<span class="keyword">int</span> depth)</span></span></div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(depth==res.size())</div><div class="line">        &#123;</div><div class="line">            res.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        res[depth].push_back(root-&gt;val);</div><div class="line">        preorder(root-&gt;left,res,depth+<span class="number">1</span>);</div><div class="line">        preorder(root-&gt;right,res,depth+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="107-二叉树的层次遍历-II"><a href="#107-二叉树的层次遍历-II" class="headerlink" title="107 二叉树的层次遍历 II"></a>107 二叉树的层次遍历 II</h1><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">例如：</div><div class="line">给定二叉树 [3,9,20,null,null,15,7],</div><div class="line"></div><div class="line">    3</div><div class="line">   / \</div><div class="line">  9  20</div><div class="line">    /  \</div><div class="line">   15   7</div><div class="line">返回其自底向上的层次遍历为：</div><div class="line"></div><div class="line">[</div><div class="line">  [15,7],</div><div class="line">  [9,20],</div><div class="line">  [3]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>递归方式</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrderBottom(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        recursive(<span class="number">0</span>,res,root);</div><div class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; (res.rbegin(),res.rend());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> level,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,TreeNode* root)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(level==res.size()) res.push_back(&#123;&#125;);</div><div class="line">        res[level].push_back(root-&gt;val);</div><div class="line">        recursive(level+<span class="number">1</span>,res,root-&gt;left);</div><div class="line">        recursive(level+<span class="number">1</span>,res,root-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代方式</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrderBottom(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        <span class="keyword">while</span>(!q.empty())</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; level;</div><div class="line">            TreeNode* node=<span class="literal">NULL</span>;</div><div class="line">            <span class="keyword">int</span> len=q.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">            &#123;</div><div class="line">                node=q.front();</div><div class="line">                level.push_back(node-&gt;val);</div><div class="line">                q.pop();</div><div class="line">                <span class="keyword">if</span>(node-&gt;left) q.push(node-&gt;left);</div><div class="line">                <span class="keyword">if</span>(node-&gt;right) q.push(node-&gt;right);</div><div class="line">            &#125;</div><div class="line">            res.insert(res.begin(),level);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="104-二叉树的最大深度（递归）"><a href="#104-二叉树的最大深度（递归）" class="headerlink" title="104 二叉树的最大深度（递归）"></a>104 二叉树的最大深度（递归）</h1><p><strong>深度优先</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> depth=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left=maxDepth(root-&gt;left);</div><div class="line">        <span class="keyword">int</span> right=maxDepth(root-&gt;right);</div><div class="line">        depth=<span class="number">1</span>+max(left,right);</div><div class="line">        <span class="keyword">return</span> depth;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>宽度优先</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode *root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;TreeNode *&gt; q;</div><div class="line">    q.push(root);</div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    &#123;</div><div class="line">        ++ res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, n = q.size(); i &lt; n; ++ i)</div><div class="line">        &#123;</div><div class="line">            TreeNode *p = q.front();</div><div class="line">            q.pop();</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(p -&gt; left != <span class="literal">NULL</span>)</div><div class="line">                q.push(p -&gt; left);</div><div class="line">            <span class="keyword">if</span>(p -&gt; right != <span class="literal">NULL</span>)</div><div class="line">                q.push(p -&gt; right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="111-二叉树的最小深度（回到目录）"><a href="#111-二叉树的最小深度（回到目录）" class="headerlink" title="111 二叉树的最小深度（回到目录）"></a>111 二叉树的最小深度（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树，找出其最小深度。</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">class</span> Solution &#123;<span class="comment">//递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> depth=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left=minDepth(root-&gt;left);</div><div class="line">        <span class="keyword">int</span> right=minDepth(root-&gt;right);</div><div class="line">        <span class="keyword">if</span>(left==<span class="number">0</span> || right==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            depth=left+right+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            depth=<span class="number">1</span>+min(left,right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> depth;       </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="108-将有序数组转换为二叉搜索树（回到目录）"><a href="#108-将有序数组转换为二叉搜索树（回到目录）" class="headerlink" title="108 将有序数组转换为二叉搜索树（回到目录）"></a>108 将有序数组转换为二叉搜索树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p>
<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>
<p>示例:</p>
<p><code>给定有序数组: [-10,-3,0,5,9],</code></p>
<p><code>一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     0</div><div class="line">    / \</div><div class="line">  -3   9</div><div class="line">  /   /</div><div class="line">-10  5</div></pre></td></tr></table></figure></p>
<p> 代码<br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(nums[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">int</span> mid=nums.size()/<span class="number">2</span>;</div><div class="line">        TreeNode* root=<span class="keyword">new</span> TreeNode(nums[mid]);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left(nums.begin(),nums.begin()+mid);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right(nums.begin()+mid+<span class="number">1</span>,nums.end());</div><div class="line">        root-&gt;left=sortedArrayToBST(left);</div><div class="line">        root-&gt;right=sortedArrayToBST(right);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="109-有序链表转换二叉搜索树"><a href="#109-有序链表转换二叉搜索树" class="headerlink" title="109 有序链表转换二叉搜索树"></a>109 有序链表转换二叉搜索树</h1><p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p>
<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>
<p><strong>使用了递归，和那个24题差不多,关键是如何找到链表的中间位置。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//使用了递归，和那个24题差不多</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">sortedListToBST</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(head-&gt;next==<span class="literal">NULL</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> TreeNode(head-&gt;val));</div><div class="line">        &#125;</div><div class="line">        ListNode* fast=head-&gt;next-&gt;next;</div><div class="line">        ListNode* slow=head;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)<span class="comment">//这段代码是在找链表中间位置的元素</span></div><div class="line">        &#123;</div><div class="line">            fast=fast-&gt;next-&gt;next;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        TreeNode* root=<span class="keyword">new</span> TreeNode(slow-&gt;next-&gt;val);<span class="comment">//这就是找到的中间位置</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,root-&gt;val);</div><div class="line">        root-&gt;right=sortedListToBST(slow-&gt;next-&gt;next);</div><div class="line">        slow-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        root-&gt;left=sortedListToBST(head);</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="110-平衡二叉树（回到目录）"><a href="#110-平衡二叉树（回到目录）" class="headerlink" title="110 平衡二叉树（回到目录）"></a>110 平衡二叉树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">给定二叉树 [3,9,20,null,null,15,7]</div><div class="line"></div><div class="line">    3</div><div class="line">   / \</div><div class="line">  9  20</div><div class="line">    /  \</div><div class="line">   15   7</div><div class="line">返回 true 。</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">给定二叉树 [1,2,2,3,3,null,null,4,4]</div><div class="line"></div><div class="line">       1</div><div class="line">      / \</div><div class="line">     2   2</div><div class="line">    / \</div><div class="line">   3   3</div><div class="line">  / \</div><div class="line"> 4   4</div><div class="line">返回 false 。</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(depth(root-&gt;left)-depth(root-&gt;right))&gt;<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> isBalanced(root-&gt;left)&amp;&amp;isBalanced(root-&gt;right);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode* root)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>+max(depth(root-&gt;left),depth(root-&gt;right));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="112-路径之和（二叉树）（回到目录）"><a href="#112-路径之和（二叉树）（回到目录）" class="headerlink" title="112 路径之和（二叉树）（回到目录）"></a>112 路径之和（二叉树）（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>
<p><strong>说明</strong>: 叶子节点是指没有子节点的节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">bool</span> result=<span class="literal">false</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">        <span class="keyword">int</span> path_sum=<span class="number">0</span>;</div><div class="line">        preorder(root,path_sum,sum,path,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* node, <span class="keyword">int</span> &amp;path_sum,<span class="keyword">int</span> sum,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path,<span class="keyword">bool</span> &amp;result)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!node)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        path_sum=path_sum+node-&gt;val;</div><div class="line">        path.push_back(node-&gt;val);</div><div class="line">        <span class="keyword">if</span>(sum==path_sum &amp;&amp; !node-&gt;left &amp;&amp; !node-&gt;right)</div><div class="line">        &#123;</div><div class="line">            result=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        preorder(node-&gt;left,path_sum,sum,path,result);</div><div class="line">        preorder(node-&gt;right,path_sum,sum,path,result);</div><div class="line">        path_sum=path_sum-node-&gt;val;</div><div class="line">        path.pop_back();</div><div class="line">            </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118 杨辉三角"></a>118 杨辉三角</h1><p>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。<br><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; generate(<span class="keyword">int</span> numRows) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res(numRows,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">        <span class="comment">//vector&lt;vector&lt;int&gt; &gt;res;</span></div><div class="line">        <span class="keyword">if</span>(numRows==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">        res[<span class="number">0</span>].push_back(<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;numRows;i++)</div><div class="line">        &#123;</div><div class="line">            res[i].push_back(<span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</div><div class="line">            &#123;</div><div class="line">                res[i].push_back(res[i<span class="number">-1</span>][j<span class="number">-1</span>]+res[i<span class="number">-1</span>][j]);</div><div class="line">            &#125;</div><div class="line">            res[i].push_back(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="119-杨辉三角II（回到目录）"><a href="#119-杨辉三角II（回到目录）" class="headerlink" title="119 杨辉三角II（回到目录）"></a>119 杨辉三角II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。</p>
<p><strong>示例</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 3</div><div class="line">输出: [1,3,3,1]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后面的覆盖前面的数据   节省空间</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getRow(<span class="keyword">int</span> rowIndex) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(rowIndex+<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=rowIndex;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;=<span class="number">1</span>;j--)</div><div class="line">            &#123;</div><div class="line">                res[j]=res[j]+res[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="125-验证回文串（回到目录）"><a href="#125-验证回文串（回到目录）" class="headerlink" title="125 验证回文串（回到目录）"></a>125 验证回文串（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p>说明：本题中，我们将空字符串定义为有效的回文串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: &quot;race a car&quot;</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> l=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> r=s.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(l&lt;r)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; !<span class="built_in">isalnum</span>(s[l])) l++;<span class="comment">//这两行的l&lt;r，一定要加上，不然“.,”就出错了</span></div><div class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; !<span class="built_in">isalnum</span>(s[r])) r--;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">toupper</span>(s[l]) !=<span class="built_in">toupper</span>(s[r]))</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">           &#125;</div><div class="line">            l++;r--;</div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="121-买卖股票的最佳时机（回到目录）"><a href="#121-买卖股票的最佳时机（回到目录）" class="headerlink" title="121 买卖股票的最佳时机（回到目录）"></a>121 买卖股票的最佳时机（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p><strong>注意你不能在买入股票前卖出股票</strong>。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 5</div></pre></td></tr></table></figure></p>
<p>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</p>
<p>注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div></pre></td></tr></table></figure></p>
<p>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(prices.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> max_pro=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp_min=prices[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> len=prices.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(temp_min&gt;prices[i])</div><div class="line">            &#123;</div><div class="line">                temp_min=prices[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> temp_max=prices[i]-temp_min;</div><div class="line">                max_pro=max(max_pro,temp_max);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_pro;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="134-加油站"><a href="#134-加油站" class="headerlink" title="134 加油站"></a>134 加油站</h1><p>在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。</p>
<p>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</p>
<p>说明: </p>
<p>如果题目有解，该答案即为唯一答案。<br>输入数组均为非空数组，且长度相同。<br>输入数组中的元素均为非负数。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">输入: </div><div class="line">gas  = [1,2,3,4,5]</div><div class="line">cost = [3,4,5,1,2]</div><div class="line"></div><div class="line">输出: 3</div><div class="line"></div><div class="line">解释:</div><div class="line">从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油</div><div class="line">开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油</div><div class="line">开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油</div><div class="line">开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油</div><div class="line">开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油</div><div class="line">开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。</div><div class="line">因此，3 可为起始索引。</div></pre></td></tr></table></figure></p>
<p><strong>贪心相关</strong>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; gas, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cost)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gas.size();i++)</div><div class="line">        &#123;</div><div class="line">            total=total+gas[i]-cost[i];</div><div class="line">            sum=sum+gas[i]-cost[i];</div><div class="line">            <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                start =i+<span class="number">1</span>;</div><div class="line">                sum=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(total&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> start;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="135-分发糖果（回到目录）"><a href="#135-分发糖果（回到目录）" class="headerlink" title="135 分发糖果（回到目录）"></a>135 分发糖果（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>老师想给孩子们分发糖果，有 N个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p>
<p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p>
<p>每个孩子至少分配到 1 个糖果。<br>相邻的孩子中，评分高的孩子必须获得更多的糖果。<br>那么这样下来，老师至少需要准备多少颗糖果呢？</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [1,0,2]</div><div class="line">输出: 5</div><div class="line">解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,2]</div><div class="line">输出: 4</div><div class="line">解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。 第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</div></pre></td></tr></table></figure></p>
<p><strong>思路</strong>：</p>
<p>假设每个孩子分到的糖果数组为<code>A[N]</code>，初始化为{1}，因为每个人至少分到一颗糖。</p>
<p>1、与前面的邻居比较，前向遍历权重数组ratings，如果<code>ratings[i]&gt;ratings[i-1]，则A[i]=A[i-1]+1</code>；</p>
<p>2、与后面的邻居比较，后向遍历权重数组ratings，如果<code>ratings[i]&gt;ratings[i+1]且A[i]&lt;A[i+1]+1</code>，则更新<code>A</code>，<code>A[i]=A[i+1]+1</code>；</p>
<p>3、对A求和即为最少需要的糖果。</p>
<p>时间复杂度：<code>O(n)</code></p>
<p>空间复杂度：<code>O(n)</code></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ratings)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len=ratings.size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums(len,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(ratings[i]&gt;ratings[i<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                nums[i]=nums[i<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sum=nums[len<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(ratings[i]&gt;ratings[i+<span class="number">1</span>] &amp;&amp; nums[i]&lt;nums[i+<span class="number">1</span>]+<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                nums[i]=nums[i+<span class="number">1</span>]+<span class="number">1</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            sum=sum+nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136 只出现一次的数字"></a>136 只出现一次的数字</h1><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>说明：</p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [2,2,1]</div><div class="line"></div><div class="line">输出: 1</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [4,1,2,1,2]</div><div class="line"></div><div class="line">输出: 4</div></pre></td></tr></table></figure></p>
<p><strong>我的做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash_map;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(hash_map[nums[i]]==<span class="number">1</span>)</div><div class="line">                res=nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>按位异或</strong><br>用到位运算之异或的特性：<code>n ^ n = 0, 0 ^ x = x。</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            res=res^nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="137-只出现一次的数字II（回到目录）"><a href="#137-只出现一次的数字II（回到目录）" class="headerlink" title="137 只出现一次的数字II（回到目录）"></a>137 只出现一次的数字II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现三次。找出那个只出现了一次的元素。</p>
<p>说明：</p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p><strong>我的做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash_map;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(hash_map[nums[i]]==<span class="number">1</span>)</div><div class="line">                res=nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>位运算</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> length = nums.size();</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">32</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>; </div><div class="line">            <span class="keyword">int</span> mask = <span class="number">1</span>&lt;&lt; i;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;length; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(nums[j] &amp; mask)</div><div class="line">                    count++;</div><div class="line">            &#125;</div><div class="line">          <span class="keyword">if</span>(count %<span class="number">3</span>)</div><div class="line">                result |= mask;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="141-环形链表（回到目录）"><a href="#141-环形链表（回到目录）" class="headerlink" title="141 环形链表（回到目录）"></a>141 环形链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个链表，判断链表中是否有环。</p>
<p><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>&lt;ListNode*&gt; node_set;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node_set.find(head)!=node_set.end())</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            node_set.insert(head);</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span> || head-&gt;next==<span class="literal">NULL</span> || head-&gt;next-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        ListNode* fast=head;</div><div class="line">        ListNode* slow=head;</div><div class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</div><div class="line">        &#123;</div><div class="line">            fast=fast-&gt;next;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">            fast=fast-&gt;next;</div><div class="line">            <span class="keyword">if</span>(fast==slow)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142 环形链表II"></a>142 环形链表II</h1><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<p>说明：不允许修改给定的链表。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span></div><div class="line">    &#123;</div><div class="line">        ListNode* fast=head;</div><div class="line">        ListNode* slow=head;</div><div class="line">        ListNode* meet=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</div><div class="line">        &#123;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">            fast=fast-&gt;next-&gt;next;</div><div class="line">            <span class="keyword">if</span>(fast==slow)</div><div class="line">            &#123;</div><div class="line">                meet=fast;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(meet==<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(head &amp;&amp; meet)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head==meet)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            &#125;</div><div class="line">            head=head-&gt;next;</div><div class="line">            meet=meet-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144 二叉树的前序遍历"></a>144 二叉树的前序遍历</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>给定一个二叉树，返回它的 前序 遍历。</p>
<p> 示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: [1,null,2,3]  </div><div class="line">   1</div><div class="line">    \</div><div class="line">     2</div><div class="line">    /</div><div class="line">   3 </div><div class="line">输出: [1,2,3]</div></pre></td></tr></table></figure></p>
<p><strong>进阶</strong>: 递归算法很简单，你可以通过迭代算法完成吗？</p>
<p><strong>递归方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp1=preorderTraversal(root-&gt;left);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp1.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp2=preorderTraversal(root-&gt;right);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp2.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp2[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        s.push(root);</div><div class="line">        <span class="keyword">while</span>(!s.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode* temp=s.top();</div><div class="line">            res.push_back(temp-&gt;val);</div><div class="line">            s.pop();</div><div class="line">            <span class="keyword">if</span>(temp-&gt;right)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;right);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp-&gt;left)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;left);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145 二叉树的后序遍历"></a>145 二叉树的后序遍历</h1><p>递归方法<br><strong>递归1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        postorder(root,res);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">private:</div><div class="line">    void postorder(TreeNode* root,vector&lt;int&gt; &amp;res)</div><div class="line">    &#123;</div><div class="line">        if(root==NULL)</div><div class="line">        &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        postorder(root-&gt;left,res);</div><div class="line">        postorder(root-&gt;right,res);</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>递归2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp1=postorderTraversal(root-&gt;left);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp1.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp2=postorderTraversal(root-&gt;right);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp2.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp2[i]);</div><div class="line">        &#125;</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        if(root==NULL) return res;</div><div class="line">        stack&lt;TreeNode*&gt; s;</div><div class="line">        s.push(root);</div><div class="line">        while(!s.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode* temp=s.top();</div><div class="line">            s.pop();</div><div class="line">            res.push_back(temp-&gt;val);</div><div class="line">            if(temp-&gt;left)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;left);</div><div class="line">            &#125;</div><div class="line">            if(temp-&gt;right)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;right);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //vector反转的两种方式</div><div class="line">        //return vector&lt;int&gt;(res.rbegin(),res.rend());//vector反转方式1</div><div class="line">        </div><div class="line">        reverse(res.begin(),res.end());//vector反转方式2</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="160-求两个链表的交点。-回到目录"><a href="#160-求两个链表的交点。-回到目录" class="headerlink" title="160 求两个链表的交点。(回到目录)"></a>160 求两个链表的交点。(<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>)</h1><p>已知链表A的头节点指针headA，链表B的头节点指针headB，两个链表相交，求两个链表交点对应的节点。</p>
<p><strong>方法一</strong>：使用std中的set函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">set</span>&lt;ListNode*&gt; node_set;</div><div class="line">        <span class="keyword">while</span>(headA)</div><div class="line">        &#123;</div><div class="line">            node_set.insert(headA);</div><div class="line">            headA=headA-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(headB)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node_set.find(headB)!=node_set.end())</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> headB;</div><div class="line">            &#125;</div><div class="line">            headB=headB-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法二</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> lenA=compute_len(headA);</div><div class="line">        <span class="keyword">int</span> lenB=compute_len(headB);</div><div class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(lenB&gt;lenA)</div><div class="line">        &#123;</div><div class="line">            t=lenB-lenA;</div><div class="line">            <span class="keyword">while</span>(headB &amp;&amp; t)</div><div class="line">            &#123;</div><div class="line">                headB=headB-&gt;next;</div><div class="line">                t--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(headA &amp;&amp; headB)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(headA==headB) <span class="keyword">return</span> headA;</div><div class="line">                headA=headA-&gt;next;</div><div class="line">                headB=headB-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            t=lenA-lenB;</div><div class="line">            <span class="keyword">while</span>(headA &amp;&amp; t)</div><div class="line">            &#123;</div><div class="line">                headA=headA-&gt;next;</div><div class="line">                t--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(headA &amp;&amp; headB)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(headA==headB) <span class="keyword">return</span> headB;</div><div class="line">                headA=headA-&gt;next;</div><div class="line">                headB=headB-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compute_len</span><span class="params">(ListNode* head)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            len++;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> len;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="169-求众数"><a href="#169-求众数" class="headerlink" title="169 求众数"></a>169 求众数</h1><p>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [3,2,3]</div><div class="line">输出: 3</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [2,2,1,1,1,2,2]</div><div class="line">输出: 2</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash_map;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> temp=hash_map[nums[<span class="number">0</span>]];</div><div class="line">        <span class="keyword">int</span> res=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(hash_map[nums[i]]&gt;temp)</div><div class="line">            &#123;</div><div class="line">                temp=hash_map[nums[i]];</div><div class="line">                res=nums[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189 旋转数组"></a>189 旋转数组</h1><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p>
<p><strong>示例 1</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3,4,5,6,7] 和 k = 3</div><div class="line"></div><div class="line">输出: [5,6,7,1,2,3,4]</div><div class="line"></div><div class="line">解释:</div><div class="line"></div><div class="line">向右旋转 1 步: [7,1,2,3,4,5,6]</div><div class="line"></div><div class="line">向右旋转 2 步: [6,7,1,2,3,4,5]</div><div class="line"></div><div class="line">向右旋转 3 步: [5,6,7,1,2,3,4]</div></pre></td></tr></table></figure></p>
<p><strong>示例 2</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">输入: [-1,-100,3,99] 和 k = 2</div><div class="line"></div><div class="line">输出: [3,99,-1,-100]</div><div class="line"></div><div class="line">解释: </div><div class="line"></div><div class="line">向右旋转 1 步: [99,-1,-100,3]</div><div class="line"></div><div class="line">向右旋转 2 步: [3,99,-1,-100]</div></pre></td></tr></table></figure></p>
<p><strong>我的做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> temp=nums[len<span class="number">-1</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=len<span class="number">-1</span>;j&gt;<span class="number">0</span>;j--)</div><div class="line">            &#123;</div><div class="line">                nums[j]=nums[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">            nums[<span class="number">0</span>]=temp;</div><div class="line">        &#125;     </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191 位1的个数"></a>191 位1的个数</h1><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p>
<p>示例 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 11</div><div class="line">输出: 3</div><div class="line">解释: 整数 11 的二进制表示为 00000000000000000000000000001011</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 128</div><div class="line">输出: 1</div><div class="line">解释: 整数 128 的二进制表示为 00000000000000000000000010000000</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>)</div><div class="line">            &#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">            n=n/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>法2</strong>:位运算<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(n&amp;(<span class="number">1</span>&lt;&lt;i)) res++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="199-二叉树的右视图（回到目录）"><a href="#199-二叉树的右视图（回到目录）" class="headerlink" title="199 二叉树的右视图（回到目录）"></a>199 二叉树的右视图（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><strong>递归做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//递归做法</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode *root, <span class="keyword">int</span> depth, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">if</span>(res.size()&lt;depth) res.push_back(root-&gt;val);</div><div class="line">        preorder(root-&gt;right, depth+<span class="number">1</span>, res);</div><div class="line">        preorder(root-&gt;left, depth+<span class="number">1</span>, res);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rightSideView(TreeNode *root) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        preorder(root, <span class="number">1</span>, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>普通方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rightSideView(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; view;</div><div class="line">        <span class="built_in">queue</span>&lt;pair&lt;TreeNode*,<span class="keyword">int</span>&gt; &gt;Q;</div><div class="line">        <span class="keyword">if</span>(root)</div><div class="line">        &#123;</div><div class="line">            Q.push(make_pair(root,<span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!Q.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode *node=Q.front().first;</div><div class="line">            <span class="keyword">int</span> depth=Q.front().second;</div><div class="line">            <span class="keyword">if</span>(view.size()==depth)</div><div class="line">            &#123;</div><div class="line">                view.push_back(node-&gt;val);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                view[depth]=node-&gt;val;</div><div class="line">            &#125;</div><div class="line">            Q.pop();</div><div class="line">            <span class="keyword">if</span>(node-&gt;left)</div><div class="line">            &#123;</div><div class="line">                Q.push(make_pair(node-&gt;left,depth+<span class="number">1</span>));</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(node-&gt;right)</div><div class="line">            &#123;</div><div class="line">                Q.push(make_pair(node-&gt;right,depth+<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="206-反转链表（回到目录）"><a href="#206-反转链表（回到目录）" class="headerlink" title="206 反转链表（回到目录）"></a>206 反转链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>反转一个单链表。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</div><div class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;</div><div class="line">        ListNode* new_head=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            ListNode* next=head-&gt;next;</div><div class="line">            head-&gt;next=new_head;</div><div class="line">            new_head=head;</div><div class="line">            head=next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> new_head;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="215-数组中的第k个最大元素"><a href="#215-数组中的第k个最大元素" class="headerlink" title="215 数组中的第k个最大元素"></a>215 数组中的第k个最大元素</h1><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [3,2,1,5,6,4] 和 k = 2</div><div class="line"></div><div class="line">输出: 5</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k = 4</div><div class="line"></div><div class="line">输出: 4</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>,greater&lt;<span class="keyword">int</span>&gt; &gt;nums_set;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            nums_set.insert(nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ::iterator it=nums_set.begin();</div><div class="line">        <span class="keyword">if</span>(nums_set.size()&gt;=k)</div><div class="line">        &#123;</div><div class="line">            k=k<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(k)</div><div class="line">            &#123;</div><div class="line">                k--;</div><div class="line">                it++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> *it;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225 用队列实现栈"></a>225 用队列实现栈</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MyStack &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    MyStack() &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Push element x onto stack. */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; temp_queue;</div><div class="line">        temp_queue.push(x);</div><div class="line">        <span class="keyword">while</span>(!data_queue.empty())</div><div class="line">        &#123;</div><div class="line">            temp_queue.push(data_queue.front());</div><div class="line">            data_queue.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!temp_queue.empty())</div><div class="line">        &#123;</div><div class="line">            data_queue.push(temp_queue.front());</div><div class="line">            temp_queue.pop();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> x=data_queue.front();</div><div class="line">        data_queue.pop();</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get the top element. */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data_queue.front();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data_queue.empty();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; data_queue;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="226-翻转二叉树（回到目录）"><a href="#226-翻转二叉树（回到目录）" class="headerlink" title="226 翻转二叉树（回到目录）"></a>226 翻转二叉树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><strong>使用递归方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        TreeNode* temp=root-&gt;left;</div><div class="line">        root-&gt;left=invertTree(root-&gt;right);</div><div class="line">        root-&gt;right=invertTree(temp);</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>非递归</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Non-Recursion</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">            TreeNode *node = q.front(); q.pop();</div><div class="line">            TreeNode *tmp = node-&gt;left;</div><div class="line">            node-&gt;left = node-&gt;right;</div><div class="line">            node-&gt;right = tmp;</div><div class="line">            <span class="keyword">if</span> (node-&gt;left) q.push(node-&gt;left);</div><div class="line">            <span class="keyword">if</span> (node-&gt;right) q.push(node-&gt;right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="258-各位相加（回到目录）"><a href="#258-各位相加（回到目录）" class="headerlink" title="258 各位相加（回到目录）"></a>258 各位相加（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入: 38</div><div class="line"></div><div class="line">输出: 2</div></pre></td></tr></table></figure></p>
<p>解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。</p>
<p>进阶:</p>
<p>你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p>
<p><strong>递归方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(num&lt;<span class="number">10</span>) <span class="keyword">return</span> num;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(num)  </div><div class="line">        &#123;</div><div class="line">            sum=num%<span class="number">10</span> +sum;</div><div class="line">            num=num/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> addDigits(sum);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>循环方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i,sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(num != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                sum += num%<span class="number">10</span>;</div><div class="line">                num /= <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(sum &gt;= <span class="number">10</span>)</div><div class="line">            &#123;</div><div class="line">                num = sum;</div><div class="line">                sum = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="295-数据流的中位数（回到目录）"><a href="#295-数据流的中位数（回到目录）" class="headerlink" title="295 数据流的中位数（回到目录）"></a>295 数据流的中位数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>
<p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[2,3,4] 的中位数是 3</div><div class="line"></div><div class="line">[2,3] 的中位数是 (2 + 3) / 2 = 2.5</div><div class="line"></div><div class="line">设计一个支持以下两种操作的数据结构：</div><div class="line"></div><div class="line">void addNum(int num) - 从数据流中添加一个整数到数据结构中。</div><div class="line"></div><div class="line">double findMedian() - 返回目前所有元素的中位数。</div></pre></td></tr></table></figure></p>
<p><strong>示例</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">addNum(1)</div><div class="line"></div><div class="line">addNum(2)</div><div class="line"></div><div class="line">findMedian() -&gt; 1.5</div><div class="line"></div><div class="line">addNum(3) </div><div class="line"></div><div class="line">findMedian() -&gt; 2</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MedianFinder &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    MedianFinder() &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    	<span class="keyword">if</span> (big_queue.empty())&#123;</div><div class="line">	    	big_queue.push(num);</div><div class="line">	    	<span class="keyword">return</span>;</div><div class="line">	    &#125;</div><div class="line">        <span class="keyword">if</span> (big_queue.size() == small_queue.size())&#123;</div><div class="line">        	<span class="keyword">if</span> (num &lt; big_queue.top())&#123;</div><div class="line">	        	big_queue.push(num);</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">else</span>&#123;</div><div class="line">        		small_queue.push(num);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(big_queue.size() &gt; small_queue.size())&#123;</div><div class="line">        	<span class="keyword">if</span> (num &gt; big_queue.top())&#123;</div><div class="line">	        	small_queue.push(num);</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">else</span>&#123;</div><div class="line">        		small_queue.push(big_queue.top());</div><div class="line">        		big_queue.pop();</div><div class="line">        		big_queue.push(num);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(big_queue.size() &lt; small_queue.size())&#123;</div><div class="line">        	<span class="keyword">if</span> (num &lt; small_queue.top())&#123;</div><div class="line">	        	big_queue.push(num);</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">else</span>&#123;</div><div class="line">        		big_queue.push(small_queue.top());</div><div class="line">        		small_queue.pop();</div><div class="line">        		small_queue.push(num);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="keyword">if</span> (big_queue.size() == small_queue.size())&#123;</div><div class="line">        	<span class="keyword">return</span> (big_queue.top() + small_queue.top()) / <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (big_queue.size() &gt; small_queue.size())&#123;</div><div class="line">        	<span class="keyword">return</span> big_queue.top();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> small_queue.top();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="comment">//priority_queue&lt;double&gt; big_queue;//最大堆的两种定义方式</span></div><div class="line">    priority_queue&lt;<span class="keyword">double</span>,<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;,less&lt;<span class="keyword">double</span>&gt; &gt; big_queue;<span class="comment">//最大堆</span></div><div class="line">	priority_queue&lt;<span class="keyword">double</span>, <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;, greater&lt;<span class="keyword">double</span>&gt; &gt; small_queue;<span class="comment">//最小堆</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="315-计算右侧小于当前元素的个数（回到目录）"><a href="#315-计算右侧小于当前元素的个数（回到目录）" class="headerlink" title="315 计算右侧小于当前元素的个数（回到目录）"></a>315 计算右侧小于当前元素的个数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个整数数组 nums，按要求返回一个新数组 counts。数组 counts 有该性质： counts[i] 的值是  nums[i] 右侧小于 nums[i] 的元素的数量。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: [5,2,6,1]</div><div class="line">输出: [2,1,1,0] </div><div class="line">解释:</div><div class="line">5 的右侧有 2 个更小的元素 (2 和 1).</div><div class="line">2 的右侧仅有 1 个更小的元素 (1).</div><div class="line">6 的右侧有 1 个更小的元素 (1).</div><div class="line">1 的右侧有 0 个更小的元素.</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">   &#123;</div><div class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count;</div><div class="line">       <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; vec;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">       &#123;</div><div class="line">           vec.push_back(make_pair(nums[i],i));</div><div class="line">           count.push_back(<span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">       merge_sort(vec,count);</div><div class="line">       <span class="keyword">return</span> count;</div><div class="line">   &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge_sort_two_vec</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;sub_vec1,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;sub_vec2,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;vec,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;count)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;sub_vec1.size() &amp;&amp; j&lt;sub_vec2.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sub_vec1[i].first&lt;=sub_vec2[j].first)</div><div class="line">            &#123;</div><div class="line">                count[sub_vec1[i].second] +=j;</div><div class="line">                vec.push_back(sub_vec1[i]);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                vec.push_back(sub_vec2[j]);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;i&lt;sub_vec1.size();i++)</div><div class="line">        &#123;   </div><div class="line">            count[sub_vec1[i].second] +=j;</div><div class="line">            vec.push_back(sub_vec1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;j&lt;sub_vec2.size();j++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec2[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;vec,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;count)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(vec.size()&lt;<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid=vec.size()/<span class="number">2</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; sub_vec1;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; sub_vec2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid;i++)</div><div class="line">        &#123;</div><div class="line">            sub_vec1.push_back(vec[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid;i&lt;vec.size();i++)</div><div class="line">        &#123;</div><div class="line">            sub_vec2.push_back(vec[i]);</div><div class="line">        &#125;</div><div class="line">        merge_sort(sub_vec1,count);</div><div class="line">        merge_sort(sub_vec2,count);</div><div class="line">        vec.clear();</div><div class="line">        merge_sort_two_vec(sub_vec1,sub_vec2,vec,count);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="389-找不同"><a href="#389-找不同" class="headerlink" title="389 找不同"></a>389 找不同</h1><p>给定两个字符串 s 和 t，它们只包含小写字母。</p>
<p>字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。</p>
<p>请找出在 t 中被添加的字母。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入：</div><div class="line">s = &quot;abcd&quot;</div><div class="line">t = &quot;abcde&quot;</div><div class="line">输出：</div><div class="line">e</div><div class="line">解释：</div><div class="line">&apos;e&apos; 是那个被添加的字母。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; hash_map;</div><div class="line">        <span class="keyword">char</span> res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[t[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[s[i]]--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(hash_map[t[i]]==<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                res=t[i];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="402-移掉k个数字（回到目录）"><a href="#402-移掉k个数字（回到目录）" class="headerlink" title="402 移掉k个数字（回到目录）"></a>402 移掉k个数字（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。</p>
<p>注意:</p>
<p>num 的长度小于 10002 且 ≥ k。<br>num 不会包含任何前导零。</p>
<p>示例 1 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: num = &quot;1432219&quot;, k = 3</div><div class="line">输出: &quot;1219&quot;</div><div class="line">解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。</div></pre></td></tr></table></figure></p>
<p>示例 2 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: num = &quot;10200&quot;, k = 1</div><div class="line">输出: &quot;200&quot;</div><div class="line">解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。</div></pre></td></tr></table></figure></p>
<p>示例 3 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: num = &quot;10&quot;, k = 2</div><div class="line">输出: &quot;0&quot;</div><div class="line">解释: 从原数字移除所有的数字，剩余为空就是0。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeKdigits</span><span class="params">(<span class="built_in">string</span> num, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line">        <span class="built_in">string</span> result=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> number=num[i]-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">while</span>(S.size()!=<span class="number">0</span> &amp;&amp; k&gt;<span class="number">0</span> &amp;&amp; S[S.size()<span class="number">-1</span>]&gt;number)</div><div class="line">            &#123;</div><div class="line">                S.pop_back();</div><div class="line">                k--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(number !=<span class="number">0</span> || S.size()!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                S.push_back(number);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">while</span>(k&gt;<span class="number">0</span> &amp;&amp; S.size()!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                S.pop_back();</div><div class="line">                k--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S.size();i++)</div><div class="line">            &#123;</div><div class="line">                result.append(<span class="number">1</span>,<span class="string">'0'</span>+S[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(result==<span class="string">""</span>)</div><div class="line">            &#123;</div><div class="line">                result=<span class="string">"0"</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="414-第三大的数"><a href="#414-第三大的数" class="headerlink" title="414 第三大的数"></a>414 第三大的数</h1><p>给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [3, 2, 1]</div><div class="line"></div><div class="line">输出: 1</div><div class="line"></div><div class="line">解释: 第三大的数是 1.</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1, 2]</div><div class="line"></div><div class="line">输出: 2</div><div class="line"></div><div class="line">解释: 第三大的数不存在, 所以返回最大的数 2 .</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: [2, 2, 3, 1]</div><div class="line"></div><div class="line">输出: 1</div><div class="line"></div><div class="line">解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。</div><div class="line">存在两个值为2的数，它们都排第二。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">thirdMax</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>,greater&lt;<span class="keyword">int</span>&gt; &gt;nums_set;<span class="comment">//从大到小排序</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            nums_set.insert(nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ::iterator it=nums_set.begin();</div><div class="line">        <span class="keyword">if</span>(nums_set.size()&gt;=<span class="number">3</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> k=<span class="number">2</span>;</div><div class="line">            <span class="keyword">while</span>(k)</div><div class="line">            &#123;</div><div class="line">                k--;</div><div class="line">                it++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> *it;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="520-检测大写字母（回到目录）"><a href="#520-检测大写字母（回到目录）" class="headerlink" title="520 检测大写字母（回到目录）"></a>520 检测大写字母（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个单词，你需要判断单词的大写使用是否正确。</p>
<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>
<p>全部字母都是大写，比如”USA”。<br>单词中所有字母都不是大写，比如”leetcode”。<br>如果单词不只含有一个字母，只有首字母大写， 比如 “Google”。<br>否则，我们定义这个单词没有正确使用大写字母。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: &quot;USA&quot;</div><div class="line">输出: True</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: &quot;FlaG&quot;</div><div class="line">输出: False</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>: 输入是由大写和小写拉丁字母组成的非空单词。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">detectCapitalUse</span><span class="params">(<span class="built_in">string</span> word)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=word.size();</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(word[i]&lt;=<span class="string">'Z'</span> &amp;&amp; word[i]&gt;=<span class="string">'A'</span>)</div><div class="line">            &#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>((cnt==<span class="number">1</span> &amp;&amp; word[<span class="number">0</span>]&lt;=<span class="string">'Z'</span> &amp;&amp; word[<span class="number">0</span>]&gt;=<span class="string">'A'</span>) || cnt==len || cnt==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="633-平方数之和"><a href="#633-平方数之和" class="headerlink" title="633 平方数之和"></a>633 平方数之和</h1><p>给定一个非负整数c,你要判断是否存在两个整数a和b，使得<code>$a^{2}+b^{2}=c$</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例1:</div><div class="line"></div><div class="line">输入: 5</div><div class="line"></div><div class="line">输出: True</div><div class="line"></div><div class="line">解释: 1 * 1 + 2 * 2 = 5</div><div class="line"> </div><div class="line"></div><div class="line">示例2:</div><div class="line"></div><div class="line">输入: 3</div><div class="line"></div><div class="line">输出: False</div></pre></td></tr></table></figure></p>
<p>我的做法如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="built_in">sqrt</span>(c);</div><div class="line">        <span class="keyword">while</span>(a&lt;=b)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a*a+b*b&gt;c)</div><div class="line">            &#123;</div><div class="line">                b--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a*a+b*b&lt;c)</div><div class="line">            &#123;</div><div class="line">                a++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>下面这种方法用到了集合set，从0遍历到c的平方根，对于每个<code>i*i</code>，都加入集合set中，然后计算<code>c-i*i</code>，如果这个差值也在集合set中，返回true，遍历结束返回false，参见代码如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">sqrt</span>(c); ++i) &#123;</div><div class="line">            s.insert(i * i);</div><div class="line">            <span class="keyword">if</span> (s.count(c - i * i)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="784-字母大小写全排列（回到目录）"><a href="#784-字母大小写全排列（回到目录）" class="headerlink" title="784 字母大小写全排列（回到目录）"></a>784 字母大小写全排列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串S，通过将字符串S中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line">输入: S = &quot;a1b2&quot;</div><div class="line">输出: [&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]</div><div class="line"></div><div class="line">输入: S = &quot;3z4&quot;</div><div class="line">输出: [&quot;3z4&quot;, &quot;3Z4&quot;]</div><div class="line"></div><div class="line">输入: S = &quot;12345&quot;</div><div class="line">输出: [&quot;12345&quot;]</div><div class="line"></div><div class="line">**注意**：</div><div class="line"></div><div class="line">S 的长度不超过12。</div><div class="line"></div><div class="line">S 仅由数字和字母组成。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">chang_upOrLow</span><span class="params">(<span class="keyword">char</span> s)</span><span class="comment">//递归</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> res;</div><div class="line">        <span class="keyword">if</span>(s&gt;=<span class="string">'A'</span> &amp;&amp; s&lt;=<span class="string">'Z'</span>)</div><div class="line">        &#123;</div><div class="line">            res=s+<span class="number">32</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(s&gt;=<span class="string">'a'</span> &amp;&amp; s&lt;=<span class="string">'z'</span>)</div><div class="line">        &#123;</div><div class="line">            res=s<span class="number">-32</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">string</span> &amp;S,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res,<span class="keyword">int</span> index)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(index&gt;=S.size())</div><div class="line">    &#123;</div><div class="line">        res.push_back(S);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((S[index]&gt;=<span class="string">'a'</span> &amp;&amp; S[index]&lt;=<span class="string">'z'</span>) ||(S[index]&gt;=<span class="string">'A'</span> &amp;&amp; S[index]&lt;=<span class="string">'Z'</span>)) </div><div class="line">    <span class="comment">//if(S[index]&gt;='A' &amp;&amp; S[index]&lt;='z')</span></div><div class="line">    &#123;</div><div class="line">        S[index]=chang_upOrLow(S[index]);</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">        S[index]=chang_upOrLow(S[index]);</div><div class="line">    &#125;</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCasePermutation(<span class="built_in">string</span> S) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        generate(S,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>或者</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">chang_upOrLow</span><span class="params">(<span class="keyword">char</span> s)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> res;</div><div class="line">        <span class="keyword">if</span>(s&gt;=<span class="string">'A'</span> &amp;&amp; s&lt;=<span class="string">'Z'</span>)</div><div class="line">        &#123;</div><div class="line">            res=s+<span class="number">32</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(s&gt;=<span class="string">'a'</span> &amp;&amp; s&lt;=<span class="string">'z'</span>)</div><div class="line">        &#123;</div><div class="line">            res=s<span class="number">-32</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">string</span> &amp;S,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res,<span class="keyword">int</span> index)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(index&gt;=S.size())</div><div class="line">    &#123;</div><div class="line">        res.push_back(S);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((S[index]&gt;=<span class="string">'a'</span> &amp;&amp; S[index]&lt;=<span class="string">'z'</span>) ||(S[index]&gt;=<span class="string">'A'</span> &amp;&amp; S[index]&lt;=<span class="string">'Z'</span>)) </div><div class="line">    <span class="comment">//if(S[index]&gt;='A' &amp;&amp; S[index]&lt;='z')</span></div><div class="line">    &#123;</div><div class="line">        S[index]=chang_upOrLow(S[index]);</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">        S[index]=chang_upOrLow(S[index]);</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCasePermutation(<span class="built_in">string</span> S) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        generate(S,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<font size="6" face="黑体">leetcode刷题B</font>

<h1 id="50-Pow-x-n-（回到目录）"><a href="#50-Pow-x-n-（回到目录）" class="headerlink" title="50. Pow(x, n)（回到目录）"></a>50. Pow(x, n)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 2.00000, 10</div><div class="line">输出: 1024.00000</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 2.10000, 3</div><div class="line">输出: 9.26100</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: 2.00000, -2</div><div class="line">输出: 0.25000</div><div class="line">解释: 2-2 = 1/22 = 1/4 = 0.</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>/powxn(x,-n);</div><div class="line">        <span class="keyword">return</span> powxn(x,n);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">powxn</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">double</span> half=powxn(x,n/<span class="number">2</span>);</div><div class="line">        <span class="keyword">if</span>(n % <span class="number">2</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> half*half;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> half*half*x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="54-螺旋矩阵-59-（回到目录）"><a href="#54-螺旋矩阵-59-（回到目录）" class="headerlink" title="54 螺旋矩阵(59)（回到目录）"></a>54 螺旋矩阵(59)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 4, 5, 6 ],</div><div class="line"> [ 7, 8, 9 ]</div><div class="line">]</div><div class="line">输出: [1,2,3,6,9,8,7,4,5]</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入:</div><div class="line">[</div><div class="line">  [1, 2, 3, 4],</div><div class="line">  [5, 6, 7, 8],</div><div class="line">  [9,10,11,12]</div><div class="line">]</div><div class="line">输出: [1,2,3,4,8,12,11,10,9,5,6,7]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; spiralOrder(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(matrix.empty()) <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> m=matrix.size();</div><div class="line">        <span class="keyword">int</span> n=matrix[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">int</span> count=min(m,n)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> yushu=min(m,n)%<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;m<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[j][n<span class="number">-1</span>-i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>-i;j&gt;=i+<span class="number">1</span>;j--)<span class="comment">//这里j&gt;=i+1,不能是j&gt;=i，不然在最左下角的那个元素会重复</span></div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[m<span class="number">-1</span>-i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=m<span class="number">-1</span>-i;j&gt;=i+<span class="number">1</span>;j--)<span class="comment">//这里j&gt;=i+1,不能是j&gt;=i，不然在左上角的那个元素会重复</span></div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[j][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(yushu==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(m==n)</div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[count][count]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(m&gt;n)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=count;i&lt;m-count;i++)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(matrix[i][count]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=count;i&lt;n-count;i++)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(matrix[count][i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="58-最后一个单词的长度（回到目录）"><a href="#58-最后一个单词的长度（回到目录）" class="headerlink" title="58 最后一个单词的长度（回到目录）"></a>58 最后一个单词的长度（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串，返回其最后一个单词的长度。</p>
<p>如果不存在最后一个单词，请返回 0 。</p>
<p>说明：一个单词是指由字母组成，但不包含任何空格的字符串。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;Hello World&quot;</div><div class="line">输出: 5</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n=s.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(s[n]==<span class="string">' '</span>) n--;<span class="comment">//</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i] !=<span class="string">' '</span>)</div><div class="line">            &#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="59-螺旋矩阵-II-54-（回到目录）"><a href="#59-螺旋矩阵-II-54-（回到目录）" class="headerlink" title="59 螺旋矩阵 II(54)（回到目录）"></a>59 螺旋矩阵 II(54)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: 3</div><div class="line">输出:</div><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 8, 9, 4 ],</div><div class="line"> [ 7, 6, 5 ]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; generateMatrix(<span class="keyword">int</span> n) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; matrix(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</div><div class="line">        <span class="keyword">int</span> count=n/<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> yushu=n%<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                matrix[i][j]=num++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                matrix[j][n<span class="number">-1</span>-i]=num++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>-i;j&gt;=i+<span class="number">1</span>;j--)</div><div class="line">            &#123;</div><div class="line">                matrix[n<span class="number">-1</span>-i][j]=num++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>-i;j&gt;=i+<span class="number">1</span>;j--)</div><div class="line">            &#123;</div><div class="line">                matrix[j][i]=num++;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(yushu)</div><div class="line">        &#123;</div><div class="line">            matrix[count][count]=num++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> matrix;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="62-不同路径（回到目录）"><a href="#62-不同路径（回到目录）" class="headerlink" title="62 不同路径（回到目录）"></a>62 不同路径（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>
<p>问总共有多少条不同的路径？</p>
<p><img src="https://leetcode-cn.com/static/images/problemset/robot_maze.png" alt=""></p>
<p>例如，上图是一个7 x 3 的网格。有多少可能的路径？</p>
<p>说明：m 和 n 的值均不超过 100。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: m = 3, n = 2</div><div class="line">输出: 3</div><div class="line">解释:</div><div class="line">从左上角开始，总共有 3 条路径可以到达右下角。</div><div class="line">1. 向右 -&gt; 向右 -&gt; 向下</div><div class="line">2. 向右 -&gt; 向下 -&gt; 向右</div><div class="line">3. 向下 -&gt; 向右 -&gt; 向右</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: m = 7, n = 3</div><div class="line">输出: 28</div></pre></td></tr></table></figure></p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//动态规划</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;dp(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">        &#123;</div><div class="line">            dp[<span class="number">0</span>][j]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=dp[i][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>这跟之前那道 <code>Climbing Stairs</code> 爬梯子问题 很类似，那道题是说可以每次能爬一格或两格，问到达顶部的所有不同爬法的个数。而这道题是每次可以向下走或者向右走，求到达最右下角的所有不同走法的个数。那么跟爬梯子问题一样，我们需要用动态规划<code>Dynamic Programming</code>来解，我们可以维护一个二维数组dp，其中dp[i][j]表示到当前位置不同的走法的个数，然后可以得到递推式为:<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]，</code>这里为了节省空间，我们使用一维数组dp，一行一行的刷新也可以，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                dp[j]=dp[j]+dp[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="63-不同路径-II（回到目录）"><a href="#63-不同路径-II（回到目录）" class="headerlink" title="63 不同路径 II（回到目录）"></a>63 不同路径 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>
<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>
<p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p>
<p>说明：m 和 n 的值均不超过 100。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">[</div><div class="line">  [0,0,0],</div><div class="line">  [0,1,0],</div><div class="line">  [0,0,0]</div><div class="line">]</div><div class="line">输出: 2</div><div class="line">解释:</div><div class="line">3x3 网格的正中间有一个障碍物。</div><div class="line">从左上角到右下角一共有 2 条不同的路径：</div><div class="line">1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</div><div class="line">2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(obstacleGrid.empty() || obstacleGrid[<span class="number">0</span>].empty() || obstacleGrid[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">1</span>)</div><div class="line">         &#123;</div><div class="line">             <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">         &#125;</div><div class="line">        <span class="keyword">int</span> m=obstacleGrid.size();</div><div class="line">        <span class="keyword">int</span> n=obstacleGrid[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(obstacleGrid[i][j]==<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=dp[i][j<span class="number">-1</span>];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=dp[i][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="98-验证二叉搜索树（回到目录）"><a href="#98-验证二叉搜索树（回到目录）" class="headerlink" title="98. 验证二叉搜索树（回到目录）"></a>98. 验证二叉搜索树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>
<p>假设一个二叉搜索树具有如下特征：</p>
<p>节点的左子树只包含小于当前节点的数。<br>节点的右子树只包含大于当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">    2</div><div class="line">   / \</div><div class="line">  1   3</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入:</div><div class="line">    5</div><div class="line">   / \</div><div class="line">  1   4</div><div class="line">     / \</div><div class="line">    3   6</div><div class="line">输出: false</div><div class="line">解释: 输入为: [5,1,4,null,null,3,6]。</div><div class="line">     根节点的值为 5 ，但是其右子节点值为 4 。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums;</div><div class="line">        inorder(root,nums);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i+<span class="number">1</span>]&lt;=nums[i])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</div><div class="line">        inorder(root-&gt;left,nums);</div><div class="line">        nums.push_back(root-&gt;val);</div><div class="line">        inorder(root-&gt;right,nums);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="120-三角形最小路径和（回到目录）"><a href="#120-三角形最小路径和（回到目录）" class="headerlink" title="120 三角形最小路径和（回到目录）"></a>120 三角形最小路径和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p>
<p>例如，给定三角形：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [2],</div><div class="line">    [3,4],</div><div class="line">   [6,5,7],</div><div class="line">  [4,1,8,3]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p>
<p>使用常规的动态规划解法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;triangle.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;triangle[i].size();j++)</div><div class="line">            &#123;</div><div class="line">                dp[i].push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dp[dp.size()<span class="number">-1</span>].size();j++)</div><div class="line">        &#123;</div><div class="line">            dp[dp.size()<span class="number">-1</span>][j]=triangle[dp.size()<span class="number">-1</span>][j];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=triangle.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=triangle[i].size();j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=min(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>])+triangle[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用原地覆盖<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=triangle.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</div><div class="line">            &#123;</div><div class="line">                triangle[i][j]=min(triangle[i+<span class="number">1</span>][j],triangle[i+<span class="number">1</span>][j+<span class="number">1</span>])+triangle[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="198-打家劫舍（回到目录）"><a href="#198-打家劫舍（回到目录）" class="headerlink" title="198 打家劫舍（回到目录）"></a>198 打家劫舍（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [1,2,3,1]</div><div class="line">输出: 4</div><div class="line">解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</div><div class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [2,7,9,3,1]</div><div class="line">输出: 12</div><div class="line">解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</div><div class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 动态规划</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (num.size() &lt;= <span class="number">1</span>) <span class="keyword">return</span> num.empty() ? <span class="number">0</span> : num[<span class="number">0</span>];</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp = &#123;num[<span class="number">0</span>], max(num[<span class="number">0</span>], num[<span class="number">1</span>])&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; num.size(); ++i) &#123;</div><div class="line">            dp.push_back(max(num[i] + dp[i - <span class="number">2</span>], dp[i - <span class="number">1</span>]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp.back();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="213-打家劫舍-II（回到目录）"><a href="#213-打家劫舍-II（回到目录）" class="headerlink" title="213 打家劫舍 II（回到目录）"></a>213 打家劫舍 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [2,3,2]</div><div class="line">输出: 3</div><div class="line">解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1,2,3,1]</div><div class="line">输出: 4</div><div class="line">解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。</div><div class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</div></pre></td></tr></table></figure></p>
<p>在打家劫舍（198）的基础上改动，先去掉第一个，计算一下最高金额，然后只去掉最后一个，计算最高金额。然后比较两种方式的结果，取较大值。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//动态规划</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> nums.empty()? <span class="number">0</span>: nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">return</span> max(rob(nums,<span class="number">0</span>,nums.size()<span class="number">-1</span>),rob(nums,<span class="number">1</span>,nums.size()));</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(end-start&lt;=<span class="number">1</span>) <span class="keyword">return</span> nums[start];</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(end,<span class="number">0</span>);</div><div class="line">        dp[start]=nums[start];</div><div class="line">        dp[start+<span class="number">1</span>]=max(nums[start+<span class="number">1</span>],nums[start]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start+<span class="number">2</span>;i&lt;end;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=max(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[dp.size()<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="287-寻找重复数（回到目录）"><a href="#287-寻找重复数（回到目录）" class="headerlink" title="287 寻找重复数（回到目录）"></a>287 寻找重复数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [1,3,4,2,2]</div><div class="line">输出: 2</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [3,1,3,4,2]</div><div class="line">输出: 3</div><div class="line">说明：</div></pre></td></tr></table></figure></p>
<p>不能更改原数组（假设数组是只读的）。<br>只能使用额外的 O(1) 的空间。<br>时间复杂度小于 O(n2) 。<br>数组中只有一个重复的数字，但它可能不止重复出现一次。</p>
<p><strong>分析</strong>：这道题和抽屉原理差不多，例如九个抽屉是个钥匙，一定会有一个抽屉是两个要是的。题目要求我们不能改变原数组，即不能给原数组排序，又不能用多余空间，那么哈希表神马的也就不用考虑了，又说时间小于O(n<sup>2</sup>)，也就不能用brute force的方法，那我们也就只能考虑用二分搜索法了，我们在区别[1, n]中搜索，首先求出中点数mid，然后遍历整个数组，统计所有小于等于mid的个数。如果count 小于等于mid， 说明 1 到 mid 这些数字没有重复项， 重复项在右半边 mid+1 到n， 所以缩小到右半边继续搜索；如果count 大于mid， 说明  1 到 mid 这些数字中有重复项，缩小到 左半边继续搜索。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> left=<span class="number">1</span>,right=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;right)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(num&lt;=mid)</div><div class="line">                &#123;</div><div class="line">                    cnt++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(cnt&lt;=mid) left=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right=mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="303-区域和检索-数组不可变（回到目录）"><a href="#303-区域和检索-数组不可变（回到目录）" class="headerlink" title="303 区域和检索 - 数组不可变（回到目录）"></a>303 区域和检索 - 数组不可变（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个整数数组  nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元素的总和，包含 i,  j 两点。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()</div><div class="line"></div><div class="line">sumRange(0, 2) -&gt; 1</div><div class="line">sumRange(2, 5) -&gt; -1</div><div class="line">sumRange(0, 5) -&gt; -3</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<p>你可以假设数组不可变。<br>会多次调用 sumRange 方法。<br><strong>动态规划</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> NumArray &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    NumArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums) </div><div class="line">    &#123;</div><div class="line">        dp=nums;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=dp[i]+dp[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> dp[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> dp[j]-dp[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your NumArray object will be instantiated and called as such:</div><div class="line"> * NumArray obj = new NumArray(nums);</div><div class="line"> * int param_1 = obj.sumRange(i,j);</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<h1 id="441-排列硬币（回到目录）"><a href="#441-排列硬币（回到目录）" class="headerlink" title="441 排列硬币（回到目录）"></a>441 排列硬币（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。</p>
<p>给定一个数字 n，找出可形成完整阶梯行的总行数。</p>
<p>n 是一个非负整数，并且在32位有符号整型的范围内。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">n = 5</div><div class="line"></div><div class="line">硬币可排列成以下几行:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line">因为第三行不完整，所以返回2.</div><div class="line">示例 2:</div><div class="line"></div><div class="line">n = 8</div><div class="line"></div><div class="line">硬币可排列成以下几行:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line">因为第四行不完整，所以返回3.</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">arrangeCoins</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</div><div class="line">        <span class="keyword">long</span> low = <span class="number">1</span>, high = n;</div><div class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</div><div class="line">            <span class="keyword">long</span> mid = low + (high - low) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (mid * (mid + <span class="number">1</span>) / <span class="number">2</span> &lt;= n) low = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> low<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="442-数组中重复的数据（回到目录）"><a href="#442-数组中重复的数据（回到目录）" class="headerlink" title="442 数组中重复的数据（回到目录）"></a>442 数组中重复的数据（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个整数数组 a，其中1 ≤ a[i] ≤ n （n为数组长度）, 其中有些元素出现两次而其他元素出现一次。找到所有出现两次的元素。</p>
<p>你可以不用到任何额外空间并在O(n)时间复杂度内解决这个问题吗？</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入:</div><div class="line">[4,3,2,7,8,2,3,1]</div><div class="line"></div><div class="line">输出:</div><div class="line">[2,3]</div></pre></td></tr></table></figure></p>
<p>使用正负替换法，由于数组中的数字都是在[1，n]区间内，所以，可以数组的元素可以转化成index,将访问过的元素取相反数。如果再次遇到这个数（此时必然是负数了），则将它加入result数组。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findDuplicates(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> index=<span class="built_in">abs</span>(nums[i])<span class="number">-1</span>;</div><div class="line">            <span class="keyword">if</span>(nums[index]&lt;<span class="number">0</span>) res.push_back(<span class="built_in">abs</span>(nums[i]));</div><div class="line">            nums[index]=-nums[index];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="461-汉明距离（回到目录）"><a href="#461-汉明距离（回到目录）" class="headerlink" title="461 汉明距离（回到目录）"></a>461 汉明距离（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。给出两个整数 x 和 y，计算它们之间的汉明距离。</p>
<p>注意：<br>0 ≤ x, y &lt; 231.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入: x = 1, y = 4</div><div class="line"></div><div class="line">输出: 2</div><div class="line"></div><div class="line">解释:</div><div class="line">1   (0 0 0 1)</div><div class="line">4   (0 1 0 0)</div><div class="line">       ↑   ↑</div><div class="line"></div><div class="line">上面的箭头指出了对应二进制位不同的位置。</div></pre></td></tr></table></figure></p>
<p><strong>分析</strong>：只要将x和y的二进制形式的每一位取出来按位异或，若为1，则res++,最后的res就是汉明距离。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(x&amp;(<span class="number">1</span>&lt;&lt;i)^(y&amp;(<span class="number">1</span>&lt;&lt;i)))</div><div class="line">            &#123;</div><div class="line">                res++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="526-优美的排列（回到目录）"><a href="#526-优美的排列（回到目录）" class="headerlink" title="526 优美的排列（回到目录）"></a>526 优美的排列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>假设有从 1 到 N 的 N 个整数，如果从这N个数字中成功构造出一个数组，使得数组的第 i 位 (1 &lt;= i &lt;= N) 满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。</p>
<p>条件：<br>第 i 位的数字能被 i 整除<br>i 能被第 i 位上的数字整除<br>现在给定一个整数 N，请问可以构造多少个优美的排列？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例1:</div><div class="line"></div><div class="line">输入: 2</div><div class="line">输出: 2</div><div class="line">解释: </div><div class="line"></div><div class="line">第 1 个优美的排列是 [1, 2]:</div><div class="line">  第 1 个位置（i=1）上的数字是1，1能被 i（i=1）整除</div><div class="line">  第 2 个位置（i=2）上的数字是2，2能被 i（i=2）整除</div><div class="line"></div><div class="line">第 2 个优美的排列是 [2, 1]:</div><div class="line">  第 1 个位置（i=1）上的数字是2，2能被 i（i=1）整除</div><div class="line">  第 2 个位置（i=2）上的数字是1，i（i=2）能被 1 整除</div></pre></td></tr></table></figure></p>
<p>说明:<br>N 是一个正整数，并且不会超过15。</p>
<p>分析：<br>这道题给了我们1到N，总共N个正数，然后定义了一种优美排列方式，对于该排列中的所有数，如果数字可以整除下标，或者下标可以整除数字，那么我们就是优美排列，让我们求出所有优美排列的个数。那么对于求种类个数，或者是求所有情况，这种问题通常要用递归来做。而递归方法等难点在于写递归函数，如何确定终止条件，还有for循环中变量的起始位置如何确定。那么这里我们需要一个visited数组来记录数字是否已经访问过，因为优美排列中不能有重复数字。我们用变量pos来标记已经生成的数字的个数，如果大于N了，说明已经找到了一组排列，结果res自增1。在for循环中，i应该从1开始，因为我们遍历1到N中的所有数字，如果该数字未被使用过，且满足和坐标之间的整除关系，那么我们标记该数字已被访问过，再调用下一个位置的递归函数，之后不要忘记了恢复初始状态。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//递归方法</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countArrangement</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visited(N + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        dfs(N, visited, <span class="number">1</span>, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; visited, <span class="keyword">int</span> pos, <span class="keyword">int</span>&amp; res)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (pos &gt; N) &#123;</div><div class="line">            ++res; </div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//for里面的代码是指某个数字都放在每个位置一次</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">0</span> &amp;&amp; (i % pos == <span class="number">0</span> || pos % i == <span class="number">0</span>)) &#123;</div><div class="line">                visited[i] = <span class="number">1</span>;</div><div class="line">                dfs(N, visited, pos + <span class="number">1</span>, res);</div><div class="line">                visited[i] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="667-优美的排列-II（回到目录）"><a href="#667-优美的排列-II（回到目录）" class="headerlink" title="667 优美的排列 II（回到目录）"></a>667 优美的排列 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>定两个整数 n 和 k，你需要实现一个数组，这个数组包含从 1 到 n 的 n 个不同整数，同时满足以下条件：</p>
<p>① 如果这个数组是 [a1, a2, a3, … , an] ，那么数组 [|a1 - a2|, |a2 - a3|, |a3 - a4|, … , |an-1 - an|] 中应该有且仅有 k 个不同整数；.</p>
<p>② 如果存在多种答案，你只需实现并返回其中任意一种.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: n = 3, k = 1</div><div class="line">输出: [1, 2, 3]</div><div class="line">解释: [1, 2, 3] 包含 3 个范围在 1-3 的不同整数， 并且 [1, 1] 中有且仅有 1 个不同整数 : 1</div><div class="line"> </div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: n = 3, k = 2</div><div class="line">输出: [1, 3, 2]</div><div class="line">解释: [1, 3, 2] 包含 3 个范围在 1-3 的不同整数， 并且 [2, 1] 中有且仅有 2 个不同整数: 1 和 2</div></pre></td></tr></table></figure></p>
<p>提示:<br> n 和 k 满足条件 1 &lt;= k &lt; n &lt;= 104.</p>
<p> 分析：这题的意思是给出1到n的不同整数，求k种不同相邻数的绝对值差值情况下的排列（任意一种即可）。<br>其实，k的最大值是n-1，使用最小最大相邻就可以了。</p>
<ul>
<li>如果给出n=4,k=2,则ans=[4,1,2,3]，也就是说，把最大数放在最小数之前，k自动减1，当k减到1时，之后的数按升序排列，就是两种排法了。</li>
<li><p>如果给出n=4,k=3,则ans=[1,4,2,3],把最大数依次插入在最小的数之后，当k减到1时，之后的数依次按升序排列。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; constructArray(<span class="keyword">int</span> n, <span class="keyword">int</span> k) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">1</span>,j=n;</div><div class="line">        <span class="keyword">while</span>(i&lt;=j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(k&gt;<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(k%<span class="number">2</span>)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(i);</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    res.push_back(j);</div><div class="line">                    j--;</div><div class="line">                &#125;</div><div class="line">                k--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                res.push_back(i);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>简化版的代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; constructArray(int n, int k) &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        int i = 1, j = n;</div><div class="line">        while (i &lt;= j) &#123;</div><div class="line">            if (k &gt; 1) res.push_back(k-- % 2 ? i++ : j--);</div><div class="line">            else res.push_back(i++);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="283-移动零（回到目录）"><a href="#283-移动零（回到目录）" class="headerlink" title="283 移动零（回到目录）"></a>283 移动零（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [0,1,0,3,12]</div><div class="line">输出: [1,3,12,0,0]</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>必须在原数组上操作，不能拷贝额外的数组。</li>
<li>尽量减少操作次数。</li>
</ul>
<p><strong>分析</strong>：这道题很简单，使用双指针i和j，同时指向0。其中i用于扫描nums数组的每一个元素，遇到非零的元素，就和nums[j]交换，然后j++。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//双指针</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                swap(nums[i],nums[j]);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="605-种花问题（回到目录）"><a href="#605-种花问题（回到目录）" class="headerlink" title="605 种花问题（回到目录）"></a>605 种花问题（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p>
<p>给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: flowerbed = [1,0,0,0,1], n = 1</div><div class="line">输出: True</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: flowerbed = [1,0,0,0,1], n = 2</div><div class="line">输出: False</div></pre></td></tr></table></figure></p>
<p>注意:数组内已种好的花不会违反种植规则。<br>输入的数组长度范围为 [1, 20000]。<br>n 是非负整数，且不会超过输入数组的大小。</p>
<p><strong>分析</strong>：对于连续的0来说，主要是考虑边界问题。例如000，如果是放在边界，则101，即种2盆花；如果两边是1，就只能放1盆(010)。所以这里有个技巧是，若两边是0，则直接插入一个0，这样，原来的边界处就可以放心的种花了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; flowerbed, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(flowerbed[<span class="number">0</span>]==<span class="number">0</span>) flowerbed.insert(flowerbed.begin(),<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(flowerbed.back()==<span class="number">0</span>) flowerbed.push_back(<span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> len=flowerbed.size();</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>,sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i&lt;len &amp;&amp; flowerbed[i]==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                sum +=(cnt<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line">                cnt=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum&gt;=n;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="643-子数组最大平均数-I（回到目录）"><a href="#643-子数组最大平均数-I（回到目录）" class="headerlink" title="643 子数组最大平均数 I（回到目录）"></a>643 子数组最大平均数 I（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定 n 个整数，找出平均数最大且长度为 k 的连续子数组，并输出该最大平均数。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [1,12,-5,-6,50,3], k = 4</div><div class="line">输出: 12.75</div><div class="line">解释: 最大平均数 (12-5-6+50)/4 = 51/4 = 12.75</div></pre></td></tr></table></figure></p>
<p>注意:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 &lt;= k &lt;= n &lt;= 30,000。</div><div class="line">所给数据范围 [-10,000，10,000]。</div></pre></td></tr></table></figure></p>
<p><strong>分析</strong>：这道题，我的思路比较暴力，直接计算每个k元组元素的和，计算出最大的那个。然后得到平均数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMaxAverage</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(len,<span class="number">0</span>);</div><div class="line">        sum[<span class="number">0</span>]=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            sum[i]=sum[i<span class="number">-1</span>]+nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> max_sum=sum[k<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">double</span> temp=sum[i]-sum[i-k];</div><div class="line">            max_sum=max(temp,max_sum);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_sum/k;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="665-非递减数列（回到目录）"><a href="#665-非递减数列（回到目录）" class="headerlink" title="665 非递减数列（回到目录）"></a>665 非递减数列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个长度为 n 的整数数组，你的任务是判断在最多改变 1 个元素的情况下，该数组能否变成一个非递减数列。</p>
<p>我们是这样定义一个非递减数列的： 对于数组中所有的 i (1 &lt;= i &lt; n)，满足 array[i] &lt;= array[i + 1]。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [4,2,3]</div><div class="line">输出: True</div><div class="line">解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [4,2,1]</div><div class="line">输出: False</div><div class="line">解释: 你不能在只改变一个元素的情况下将其变为非递减数列。</div></pre></td></tr></table></figure></p>
<p>说明:  n 的范围为 [1, 10,000]。<br><strong>分析</strong>：这道题给了我们一个数组，说我们最多有1次修改某个数字的机会，问能不能将数组变为非递减数组。题目中给的例子太少，不能覆盖所有情况，我们再来看下面三个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">4，2，3</div><div class="line"></div><div class="line">-1，4，2，3</div><div class="line"></div><div class="line">2，3，3，2，4</div></pre></td></tr></table></figure></p>
<p>我们通过分析上面三个例子可以发现，当我们发现后面的数字小于前面的数字产生冲突后，有时候需要修改前面较大的数字(比如前两个例子需要修改4)，有时候却要修改后面较小的那个数字(比如前第三个例子需要修改2)，那么有什么内在规律吗？是有的，判断修改那个数字其实跟再前面一个数的大小有关系，首先如果再前面的数不存在，比如例子1，4前面没有数字了，我们直接修改前面的数字为当前的数字2即可。而当再前面的数字存在，并且小于当前数时，比如例子2，-1小于2，我们还是需要修改前面的数字4为当前数字2；如果再前面的数大于当前数，比如例子3，3大于2，我们需要修改当前数2为前面的数3。这是修改的情况，由于我们只有一次修改的机会，所以用一个变量cnt，初始化为1，修改数字后cnt自减1，当下次再需要修改时，如果cnt已经为0了，直接返回false。遍历结束后返回true。</p>
<p><strong>修改的原则</strong>：尽量使把数字往小的改。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkPossibility</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[i<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(cnt==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                <span class="keyword">if</span>(i==<span class="number">1</span> || nums[i]&gt;=nums[i<span class="number">-2</span>]) nums[i<span class="number">-1</span>]=nums[i];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    nums[i]=nums[i<span class="number">-1</span>];</div><div class="line">                &#125;</div><div class="line">                cnt--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="131-分割回文串（回到目录）"><a href="#131-分割回文串（回到目录）" class="headerlink" title="131 分割回文串（回到目录）"></a>131 分割回文串（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</p>
<p>返回 s 所有可能的分割方案。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: &quot;aab&quot;</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [&quot;aa&quot;,&quot;b&quot;],</div><div class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>这是一道需要用DFS来解的题目，既然题目要求找到所有可能拆分成回文数的情况，那么肯定是所有的情况都要遍历到，对于每一个子字符串都要分别判断一次是不是回文数，那么肯定有一个判断回文数的子函数，还需要一个DFS函数用来递归，再加上原本的这个函数，总共需要三个函数来求解。代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//循环里有递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; partition(<span class="built_in">string</span> s) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; out;</div><div class="line">        partitionDFS(s, <span class="number">0</span>, out, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">partitionDFS</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> start, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;out, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; &amp;res)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start == s.size()) &#123;</div><div class="line">            res.push_back(out);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.size(); ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (isPalindrome(s, start, i)) &#123;</div><div class="line">                out.push_back(s.substr(start, i - start + <span class="number">1</span>));</div><div class="line">                partitionDFS(s, i + <span class="number">1</span>, out, res);</div><div class="line">                out.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (s[start] != s[end]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            ++start;</div><div class="line">            --end;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>注</strong>：那么，对原字符串的所有子字符串的访问顺序是什么呢，如果原字符串是 abcd, 那么访问顺序为:<code>a -&gt; b -&gt; c -&gt; d -&gt; cd -&gt; bc -&gt; bcd-&gt; ab -&gt; abc -&gt; abcd</code>, 这是对于没有两个或两个以上子回文串的情况。那么假如原字符串是<code>aabc</code>，那么访问顺序为：<code>a -&gt; a -&gt; b -&gt; c -&gt; bc -&gt; ab -&gt; abc -&gt; aa -&gt; b -&gt; c -&gt; bc -&gt; aab -&gt; aabc</code>，中间当检测到aa时候，发现是回文串，那么对于剩下的bc当做一个新串来检测，于是有<code>b -&gt; c -&gt; bc</code>，这样扫描了所有情况，即可得出最终答案。</p>
<h1 id="股票问题"><a href="#股票问题" class="headerlink" title="股票问题"></a>股票问题</h1><h2 id="121-买卖股票的最佳时机（回到目录）-1"><a href="#121-买卖股票的最佳时机（回到目录）-1" class="headerlink" title="121 买卖股票的最佳时机（回到目录）"></a>121 买卖股票的最佳时机（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 5</div><div class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</div><div class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div><div class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</div></pre></td></tr></table></figure></p>
<p>引入两个变量，最小买入价格和最大利润，遍历数组，判断最大和最小值来得到最后的结果。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">        vector&lt;pair&lt;int&gt; &gt; stock;</div><div class="line">        for(int i=1;i&lt;=prices.size();i++)</div><div class="line">        &#123;</div><div class="line">            stock.push_back(make_pair(i,prices[i]));</div><div class="line">        &#125;</div><div class="line">        */</div><div class="line">        <span class="keyword">if</span>(prices.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> max_pro=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp_min=prices[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> len=prices.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            temp_min=min(temp_min,prices[i]);</div><div class="line">            max_pro=max(max_pro,prices[i]-temp_min);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_pro;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="122-买卖股票的最佳时机-II（回到目录）"><a href="#122-买卖股票的最佳时机-II（回到目录）" class="headerlink" title="122 买卖股票的最佳时机 II（回到目录）"></a>122 买卖股票的最佳时机 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 7</div><div class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</div><div class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1,2,3,4,5]</div><div class="line">输出: 4</div><div class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</div><div class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</div><div class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div><div class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</div></pre></td></tr></table></figure></p>
<p><strong>分析</strong>：炒股想挣钱当然是低价买入高价抛出，那么这里我们只需要从第二天开始，如果当前价格比之前价格高，则把差值加入利润中，因为我们可以昨天买入，今日卖出，若明日价更高的话，还可以今日买入，明日再抛出。以此类推，遍历完整个数组后即可求得最大利润。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=prices.size();</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(prices[i]&lt;prices[i+<span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                res +=prices[i+<span class="number">1</span>]-prices[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>说明</strong>：其他几个股票问题有点难，现在不想做了</p>
<h1 id="516-最长回文子序列（回到目录）"><a href="#516-最长回文子序列（回到目录）" class="headerlink" title="516 最长回文子序列（回到目录）"></a>516 最长回文子序列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串s，找到其中最长的回文子序列。可以假设s的最大长度为1000。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入:&quot;bbbab&quot;</div><div class="line">输出:4</div><div class="line">一个可能的最长回文子序列为 &quot;bbbb&quot;。</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入:&quot;cbbd&quot;</div><div class="line">输出:2</div><div class="line">一个可能的最长回文子序列为 &quot;bb&quot;。</div></pre></td></tr></table></figure></p>
<p>这道题给了我们一个字符串，让我们求最大的回文子序列，子序列和子字符串不同，不需要连续。而关于回文串的题之前也做了不少，处理方法上就是老老实实的两两比较吧。像这种有关极值的问题，最应该优先考虑的就是贪婪算法和动态规划，这道题显然使用DP更加合适。我们建立一个二维的DP数组，其中dp[i][j]表示[i,j]区间内的字符串的最长回文子序列，那么对于递推公式我们分析一下，如果s[i]==s[j]，那么i和j就可以增加2个回文串的长度，我们知道中间dp[i + 1][j - 1]的值，那么其加上2就是dp[i][j]的值。如果s[i] != s[j]，那么我们可以去掉i或j其中的一个字符，然后比较两种情况下所剩的字符串谁dp值大，就赋给dp[i][j]，那么递推公式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">              /  dp[i + 1][j - 1] + 2                       if (s[i] == s[j])</div><div class="line"></div><div class="line">dp[i][j] =</div><div class="line"></div><div class="line">              \  max(dp[i + 1][j], dp[i][j - 1])        if (s[i] != s[j])</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//动态规划</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            dp[i][i] = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)             <span class="comment">// 子串结束位置</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j<span class="number">-1</span>; i &gt;=<span class="number">0</span>; i--) &#123;     <span class="comment">// 子串开始位置</span></div><div class="line">                <span class="keyword">if</span> (s[i] == s[j])</div><div class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="74-搜索二维矩阵"><a href="#74-搜索二维矩阵" class="headerlink" title="74 搜索二维矩阵"></a>74 搜索二维矩阵</h1><p>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p>
<p>每行中的整数从左到右按升序排列。<br>每行的第一个整数大于前一行的最后一个整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入:</div><div class="line">matrix = [</div><div class="line">  [1,   3,  5,  7],</div><div class="line">  [10, 11, 16, 20],</div><div class="line">  [23, 30, 34, 50]</div><div class="line">]</div><div class="line">target = 3</div><div class="line">输出: true</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入:</div><div class="line">matrix = [</div><div class="line">  [1,   3,  5,  7],</div><div class="line">  [10, 11, 16, 20],</div><div class="line">  [23, 30, 34, 50]</div><div class="line">]</div><div class="line">target = 13</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>这段代码里用到了两次二分查找，两次查找的代码模板不一样。</strong><br>这道题要求搜索一个二维矩阵，由于给的矩阵是有序的，所以很自然的想到要用二分查找法，我们可以在第一列上先用一次二分查找法找到目标值所在的行的位置，然后在该行上再用一次二分查找法来找是否存在目标值，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 二分查找法</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;matrix, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (matrix.empty() || matrix[<span class="number">0</span>].empty()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (target &lt; matrix[<span class="number">0</span>][<span class="number">0</span>] || target &gt; matrix.back().back()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = matrix.size();</div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] == target) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tmp = right<span class="number">-1</span>;</div><div class="line">        </div><div class="line">        left = <span class="number">0</span>;</div><div class="line">        right = matrix[tmp].size() - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (matrix[tmp][mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (matrix[tmp][mid] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="240-搜索二维矩阵-II"><a href="#240-搜索二维矩阵-II" class="headerlink" title="240 搜索二维矩阵 II"></a>240 搜索二维矩阵 II</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p>
<p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">现有矩阵 matrix 如下：</div><div class="line"></div><div class="line">[</div><div class="line">  [1,   4,  7, 11, 15],</div><div class="line">  [2,   5,  8, 12, 19],</div><div class="line">  [3,   6,  9, 16, 22],</div><div class="line">  [10, 13, 14, 17, 24],</div><div class="line">  [18, 21, 23, 26, 30]</div><div class="line">]</div><div class="line">给定 target = 5，返回 true。</div><div class="line"></div><div class="line">给定 target = 20，返回 false。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(matrix.size()==<span class="number">0</span> || matrix[<span class="number">0</span>].size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> m=matrix.size()<span class="number">-1</span>,n=matrix[<span class="number">0</span>].size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span>(target&lt;matrix[<span class="number">0</span>][<span class="number">0</span>] || target&gt;matrix[m][n]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> x=m,y=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(target&gt;matrix[x][y]) y++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;matrix[x][y]) x--;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&gt;n) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="107-二叉树的层次遍历-II-1"><a href="#107-二叉树的层次遍历-II-1" class="headerlink" title="107 二叉树的层次遍历 II"></a>107 二叉树的层次遍历 II</h1><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">例如：</div><div class="line">给定二叉树 [3,9,20,null,null,15,7],</div><div class="line"></div><div class="line">    3</div><div class="line">   / \</div><div class="line">  9  20</div><div class="line">    /  \</div><div class="line">   15   7</div><div class="line">返回其自底向上的层次遍历为：</div><div class="line"></div><div class="line">[</div><div class="line">  [15,7],</div><div class="line">  [9,20],</div><div class="line">  [3]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>递归方式</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrderBottom(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        recursive(<span class="number">0</span>,res,root);</div><div class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; (res.rbegin(),res.rend());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> level,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,TreeNode* root)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(level==res.size()) res.push_back(&#123;&#125;);</div><div class="line">        res[level].push_back(root-&gt;val);</div><div class="line">        recursive(level+<span class="number">1</span>,res,root-&gt;left);</div><div class="line">        recursive(level+<span class="number">1</span>,res,root-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代方式</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrderBottom(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        <span class="keyword">while</span>(!q.empty())</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; level;</div><div class="line">            TreeNode* node=<span class="literal">NULL</span>;</div><div class="line">            <span class="keyword">int</span> len=q.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">            &#123;</div><div class="line">                node=q.front();</div><div class="line">                level.push_back(node-&gt;val);</div><div class="line">                q.pop();</div><div class="line">                <span class="keyword">if</span>(node-&gt;left) q.push(node-&gt;left);</div><div class="line">                <span class="keyword">if</span>(node-&gt;right) q.push(node-&gt;right);</div><div class="line">            &#125;</div><div class="line">            res.insert(res.begin(),level);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344 反转字符串"></a>344 反转字符串</h1><p>编写一个函数，其作用是将输入的字符串反转过来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: &quot;hello&quot;</div><div class="line">输出: &quot;olleh&quot;</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</div><div class="line">输出: &quot;amanaP :lanac a ,nalp a ,nam A&quot;</div></pre></td></tr></table></figure></p>
<p><strong>我的解法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    string reverseString(string s) </div><div class="line">    &#123;</div><div class="line">        string res;</div><div class="line">        for(int i=s.size()-1;i&gt;=0;i--)</div><div class="line">        &#123;</div><div class="line">            res.push_back(s[i]);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>参考解法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    string reverseString(string s) </div><div class="line">    &#123;</div><div class="line">        int i=0,j=s.size()-1;</div><div class="line">        while(i&lt;j)</div><div class="line">        &#123;</div><div class="line">            swap(s[i++],s[j--]);</div><div class="line">        &#125;</div><div class="line">        return s;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349 两个数组的交集"></a>349 两个数组的交集</h1><p>给定两个数组，编写一个函数来计算它们的交集。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: nums1 = [1,2,2,1], nums2 = [2,2]</div><div class="line">输出: [2]</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</div><div class="line">输出: [9,4]</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>输出结果中的每个元素一定是唯一的。</li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<p><strong>使用set容器</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersection(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums1.empty() || nums2.empty()) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ();</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s(nums1.begin(),nums1.end()),res;</div><div class="line">        <span class="comment">//printf set</span></div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator iter=s.begin();</div><div class="line">        <span class="keyword">while</span>(iter!=s.end())</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"the value of s:"</span>&lt;&lt;*iter;</div><div class="line">            ++iter;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s.count(num))</div><div class="line">            &#123;</div><div class="line">                res.insert(num);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(res.begin(),res.end());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="788-旋转数字"><a href="#788-旋转数字" class="headerlink" title="788 旋转数字"></a>788 旋转数字</h1><p>我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。</p>
<p>如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。</p>
<p>现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line">输入: 10</div><div class="line">输出: 4</div><div class="line">解释: </div><div class="line">在[1, 10]中有四个好数： 2, 5, 6, 9。</div><div class="line">注意 1 和 10 不是好数, 因为他们在旋转之后不变。</div><div class="line">注意:</div></pre></td></tr></table></figure></p>
<p>N 的取值范围是 [1, 10000]。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rotatedDigits</span><span class="params">(<span class="keyword">int</span> N)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(check(i))</div><div class="line">            &#123;</div><div class="line">                res++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> str=to_string(n);</div><div class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c:str)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(c==<span class="string">'3'</span> || c==<span class="string">'4'</span> || c==<span class="string">'7'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">if</span>(c==<span class="string">'2'</span> || c==<span class="string">'5'</span> || c==<span class="string">'6'</span> || c==<span class="string">'9'</span>) flag=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="796-旋转字符串"><a href="#796-旋转字符串" class="headerlink" title="796 旋转字符串"></a>796 旋转字符串</h1><p>给定两个字符串, A 和 B。</p>
<p>A 的旋转操作就是将 A 最左边的字符移动到最右边。 例如, 若 A = ‘abcde’，在移动一次之后结果就是’bcdea’ 。如果在若干次旋转操作之后，A 能变成B，那么返回True。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: A = &apos;abcde&apos;, B = &apos;cdeab&apos;</div><div class="line">输出: true</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: A = &apos;abcde&apos;, B = &apos;abced&apos;</div><div class="line">输出: false</div><div class="line">注意：</div></pre></td></tr></table></figure></p>
<p>A 和 B 长度不超过 100。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">rotateString</span><span class="params">(<span class="built_in">string</span> A, <span class="built_in">string</span> B)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(A.size()==<span class="number">0</span> &amp;&amp; B.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(A.size()!=B.size()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(A.substr(i,A.size()-i)+A.substr(<span class="number">0</span>,i) == B) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="804-唯一摩尔斯密码词"><a href="#804-唯一摩尔斯密码词" class="headerlink" title="804 唯一摩尔斯密码词"></a>804 唯一摩尔斯密码词</h1><p>国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: “a” 对应 “.-“, “b” 对应 “-…”, “c” 对应 “-.-.”, 等等。</p>
<p>为了方便，所有26个英文字母对应摩尔斯密码表如下：</p>
<p><code>[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</code></p>
<p>给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，”cab” 可以写成 “-.-.-….-“，(即 “-.-.” + “-…” + “.-“字符串的结合)。我们将这样一个连接过程称作单词翻译。</p>
<p>返回我们可以获得所有词不同单词翻译的数量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">例如:</div><div class="line">输入: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</div><div class="line">输出: 2</div><div class="line">解释: </div><div class="line">各单词翻译如下:</div><div class="line">&quot;gin&quot; -&gt; &quot;--...-.&quot;</div><div class="line">&quot;zen&quot; -&gt; &quot;--...-.&quot;</div><div class="line">&quot;gig&quot; -&gt; &quot;--...--.&quot;</div><div class="line">&quot;msg&quot; -&gt; &quot;--...--.&quot;</div><div class="line"></div><div class="line">共有 2 种不同翻译, &quot;--...-.&quot; 和 &quot;--...--.&quot;.</div></pre></td></tr></table></figure></p>
<p>注意:</p>
<ul>
<li>单词列表words 的长度不会超过 100。</li>
<li>每个单词 words[i]的长度范围为 [1, 12]。</li>
<li>每个单词 words[i]只包含小写字母。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniqueMorseRepresentations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; morse&#123;<span class="string">".-"</span>,<span class="string">"-..."</span>,<span class="string">"-.-."</span>,<span class="string">"-.."</span>,<span class="string">"."</span>,<span class="string">"..-."</span>,<span class="string">"--."</span>,<span class="string">"...."</span>,<span class="string">".."</span>,<span class="string">".---"</span>,<span class="string">"-.-"</span>,<span class="string">".-.."</span>,<span class="string">"--"</span>,<span class="string">"-."</span>,<span class="string">"---"</span>,<span class="string">".--."</span>,<span class="string">"--.-"</span>,<span class="string">".-."</span>,<span class="string">"..."</span>,<span class="string">"-"</span>,<span class="string">"..-"</span>,<span class="string">"...-"</span>,<span class="string">".--"</span>,<span class="string">"-..-"</span>,<span class="string">"-.--"</span>,<span class="string">"--.."</span>&#125;;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> word:words)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">string</span> temp=<span class="string">""</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c:word)</div><div class="line">            &#123;</div><div class="line">                temp=temp+morse[c-<span class="string">'a'</span>];</div><div class="line">            &#125;</div><div class="line">            res.insert(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.size();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="371-两整数之和"><a href="#371-两整数之和" class="headerlink" title="371 两整数之和"></a>371 两整数之和</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>不使用运算符 + 和-，计算两整数a 、b之和。</p>
<p>示例：<br>若 a = 1 ，b = 2，返回 3。</p>
<p><strong>使用位运算的方法</strong>：我们在做加法运算的时候，每位相加之后可能会有进位Carry产生，然后在下一位计算时需要加上进位一起运算，那么我们能不能将两部分拆开呢，我们来看一个例子759+674</p>
<ol>
<li><p>如果我们不考虑进位，可以得到323</p>
</li>
<li><p>如果我们只考虑进位，可以得到1110</p>
</li>
<li><p>我们把上面两个数字假期323+1110=1433就是最终结果了</p>
</li>
</ol>
<p>然后我们进一步分析，如果得到上面的第一第二种情况，我们在二进制下来看，不考虑进位的加，<code>0+0=0， 0+1=1, 1+0=1， 1+1=0</code>，这就是异或的运算规则，如果只考虑进位的加<code>0+0=0, 0+1=0, 1+0=0, 1+1=1</code>，而这其实这就是与的运算，而第三步在将两者相加时，我们再递归调用这个算法，终止条件是当进位为0时，我们直接返回第一步的结果，参见代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</div><div class="line">        <span class="keyword">int</span> sum=a^b;</div><div class="line">        <span class="keyword">int</span> carry=(a&amp;b)&lt;&lt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> getSum(sum,carry);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代法</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (b) &#123;</div><div class="line">            <span class="keyword">int</span> carry = (a &amp; b) &lt;&lt; <span class="number">1</span>;</div><div class="line">            a = a ^ b;</div><div class="line">            b = carry;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="172-阶乘后的零"><a href="#172-阶乘后的零" class="headerlink" title="172 阶乘后的零"></a>172 阶乘后的零</h1><p>给定一个整数 n，返回 n! 结果尾数中零的数量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 3</div><div class="line">输出: 0</div><div class="line">解释: 3! = 6, 尾数中没有零。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 5</div><div class="line">输出: 1</div><div class="line">解释: 5! = 120, 尾数中有 1 个零.</div></pre></td></tr></table></figure></p>
<p>说明: 你算法的时间复杂度应为 O(log n) 。<br><strong>分析</strong>：这道题是求一个数的阶乘末尾0的个数，也就是要找乘数中10的个数，而10可分解为2和5，而我们可知2的数量又远大于5的数量，那么此题只需要找出5的个数。仍需注意的一点就是，像25,125，这样的不只含有一个5的数字需要考虑进去。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n)</div><div class="line">        &#123;</div><div class="line">            res +=n/<span class="number">5</span>;</div><div class="line">            n=n/<span class="number">5</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235 二叉搜索树的最近公共祖先"></a>235 二叉搜索树的最近公共祖先</h1><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</div><div class="line"></div><div class="line">        _______6______</div><div class="line">       /              \</div><div class="line">    ___2__          ___8__</div><div class="line">   /      \        /      \</div><div class="line">   0      _4       7       9</div><div class="line">         /  \</div><div class="line">         3   5</div><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</div><div class="line">输出: 6 </div><div class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4</div><div class="line">输出: 2</div><div class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>所有节点的值都是唯一的。</li>
<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span></div><div class="line">    &#123;</div><div class="line">        TreeNode* res=<span class="literal">NULL</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; path;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; path_p;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; path_q;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</div><div class="line">        preorder(root,p,path,path_p,flag);</div><div class="line">        path.clear();</div><div class="line">        flag=<span class="number">0</span>;</div><div class="line">        preorder(root,q,path,path_q,flag);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> min_length=min(path_p.size(),path_q.size());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;min_length;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(path_p[i]==path_q[i])<span class="comment">//妈的，一开始这行代码多了一个;不报语法错！！！</span></div><div class="line">            &#123;</div><div class="line">                res=path_p[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root,TreeNode* node,<span class="built_in">vector</span>&lt;TreeNode*&gt; &amp;path,<span class="built_in">vector</span>&lt;TreeNode*&gt; &amp;res,<span class="keyword">int</span> flag)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//vector&lt;TreeNode*&gt; path;//不能把path放在这里，要从外面传进来</span></div><div class="line">        <span class="comment">//int flag=0;//这个变量也是，要从外面进来</span></div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span> || flag) <span class="keyword">return</span>;</div><div class="line">        path.push_back(root);</div><div class="line">        <span class="keyword">if</span>(root==node) </div><div class="line">        &#123;</div><div class="line">            res=path;</div><div class="line">            flag=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        preorder(root-&gt;left,node,path,res,flag);</div><div class="line">        preorder(root-&gt;right,node,path,res,flag);</div><div class="line">        path.pop_back();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236 二叉树的最近公共祖先"></a>236 二叉树的最近公共祖先</h1><p><strong>代码同235</strong></p>
<h1 id="661-图片平滑器"><a href="#661-图片平滑器" class="headerlink" title="661 图片平滑器"></a>661 图片平滑器</h1><p>包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均灰度 (向下舍入) ，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八个，则尽可能多的利用它们。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">[[1,1,1],</div><div class="line"> [1,0,1],</div><div class="line"> [1,1,1]]</div><div class="line">输出:</div><div class="line">[[0, 0, 0],</div><div class="line"> [0, 0, 0],</div><div class="line"> [0, 0, 0]]</div><div class="line">解释:</div><div class="line">对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0</div><div class="line">对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0</div><div class="line">对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0</div></pre></td></tr></table></figure></p>
<p>注意:</p>
<ul>
<li>给定矩阵中的整数范围为 [0, 255]。</li>
<li>矩阵的长和宽的范围均为 [1, 150]。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; imageSmoother(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; M) </div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">if</span>(M.size()==<span class="number">0</span> || M[<span class="number">0</span>].size()==<span class="number">0</span>) <span class="keyword">return</span> M;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dirs=&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</div><div class="line">        <span class="keyword">int</span> m=M.size();</div><div class="line">        <span class="keyword">int</span> n=M[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sum=M[i][j];</div><div class="line">                <span class="keyword">int</span> cnt=<span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> dir:dirs)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> x=i+dir[<span class="number">0</span>];</div><div class="line">                    <span class="keyword">int</span> y=j+dir[<span class="number">1</span>];</div><div class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=m || y&lt;<span class="number">0</span> || y&gt;=n) <span class="keyword">continue</span>;</div><div class="line">                    cnt++;</div><div class="line">                    sum=sum+M[x][y];</div><div class="line">                &#125;</div><div class="line">                res[i][j]=sum/cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217 存在重复元素"></a>217 存在重复元素</h1><p>给定一个整数数组，判断是否存在重复元素。</p>
<p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [1,2,3,1]</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1,2,3,4]</div><div class="line">输出: false</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: [1,1,1,3,3,4,3,2,4,2]</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>代码</strong>：一看到题目（和 <a href="https://winper001.github.io/2018/08/27/leetcode%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/#389-%E6%89%BE%E4%B8%8D%E5%90%8C">389 找不同</a> 类似的思路）就写出来了代码，我的思路非常简单。使用map记录每个元素出现的次数，然后每个元素的次数都-1，再判断该元素的次数是否&gt;0，若是，则返回true。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            m[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(--m[nums[i]] &gt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="219-存在重复元素-II"><a href="#219-存在重复元素-II" class="headerlink" title="219 存在重复元素 II"></a>219 存在重复元素 II</h1><p>给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: nums = [1,2,3,1], k = 3</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: nums = [1,0,1,1], k = 1</div><div class="line">输出: true</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: nums = [1,2,3,1,2,3], k = 2</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p>首先定义一个pair的vector,目的是绑定元素和它对应的index,r然后进行元素大小排列，先判断两个元素相等时候，index之差是否&lt;=k，如果是，就返回true.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;a,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;b)</span><span class="comment">//cmp函数应该定义在类外面</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a.first&lt;b.first;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;t;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            t.push_back(make_pair(nums[i],i));</div><div class="line">        &#125;</div><div class="line">        sort(t.begin(),t.end(),cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(t[i].first==t[j].first &amp;&amp; j&lt;len)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(t[i].second-t[j].second)&lt;=k)</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="220-存在重复元素-III"><a href="#220-存在重复元素-III" class="headerlink" title="220 存在重复元素 III"></a>220 存在重复元素 III</h1><p>给定一个整数数组，判断数组中是否有两个不同的索引 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值最大为 t，并且 i 和 j 之间的差的绝对值最大为 ķ。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: nums = [1,2,3,1], k = 3, t = 0</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: nums = [1,0,1,1], k = 1, t = 2</div><div class="line">输出: true</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: nums = [1,5,9,1,5,9], k = 2, t = 3</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p>和上一题的代码基本类似<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">long</span>,<span class="keyword">long</span>&gt; &amp;a,pair&lt;<span class="keyword">long</span>,<span class="keyword">long</span>&gt; &amp;b)</span><span class="comment">//cmp函数应该定义在类外面</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a.first&lt;b.first;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k,<span class="keyword">int</span> t)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span>,<span class="keyword">long</span>&gt; &gt;tmp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            tmp.push_back(make_pair(nums[i],i));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"temp: "</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> tt:tmp)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;tt.first;</div><div class="line">        &#125;</div><div class="line">        sort(tmp.begin(),tmp.end(),cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">abs</span>(tmp[i].first-tmp[j].first)&lt;=t &amp;&amp; j&lt;len)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(tmp[i].second-tmp[j].second)&lt;=k)</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="231-2的幂"><a href="#231-2的幂" class="headerlink" title="231 2的幂"></a>231 2的幂</h1><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 1</div><div class="line">输出: true</div><div class="line">解释: 20 = 1</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 16</div><div class="line">输出: true</div><div class="line">解释: 24 = 16</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: 218</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n)</div><div class="line">        &#123;</div><div class="line">            cnt=cnt+(n&amp;<span class="number">1</span>);</div><div class="line">            n=n&gt;&gt;<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt==<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>万能法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(n &amp;&amp; n%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            n=n/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="326-3的幂"><a href="#326-3的幂" class="headerlink" title="326 3的幂"></a>326 3的幂</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(n &amp;&amp; n%<span class="number">3</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            n=n/<span class="number">3</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="342-4的幂"><a href="#342-4的幂" class="headerlink" title="342 4的幂"></a>342 4的幂</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(n &amp;&amp; n%<span class="number">4</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            n=n/<span class="number">4</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="237-删除链表中的节点"><a href="#237-删除链表中的节点" class="headerlink" title="237 删除链表中的节点"></a>237 删除链表中的节点</h1><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p>
<p>现有一个链表 – head = [4,5,1,9]，它可以表示为:<br>    <code>4 -&gt; 5 -&gt; 1 -&gt; 9</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: head = [4,5,1,9], node = 5</div><div class="line">输出: [4,1,9]</div><div class="line">解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: head = [4,5,1,9], node = 1</div><div class="line">输出: [4,5,9]</div><div class="line">解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>链表至少包含两个节点。</li>
<li>链表中所有节点的值都是唯一的。</li>
<li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li>
<li>不要从你的函数中返回任何结果。</li>
</ul>
<p>因为题目给的是删除节点，那说明这个节点可以舍弃了，我们把下一个节点的值拷贝给当前要删除的节点，再删除下一个节点。<br>大致过程如下（删除3）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1-&gt;2-&gt;3-&gt;4-&gt;5 </div><div class="line">1-&gt;2-&gt;4-&gt;4-&gt;5 </div><div class="line">1-&gt;2-&gt;4-&gt;5</div></pre></td></tr></table></figure></p>
<p><strong>这题太骚了</strong>：用覆盖的方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span></div><div class="line">    &#123;</div><div class="line">        node-&gt;val=node-&gt;next-&gt;val;</div><div class="line">        ListNode* temp=node-&gt;next;</div><div class="line">        node-&gt;next=temp-&gt;next;</div><div class="line">        <span class="keyword">delete</span> temp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="203-删除链表中的节点"><a href="#203-删除链表中的节点" class="headerlink" title="203 删除链表中的节点"></a>203 删除链表中的节点</h1><p>删除链表中等于给定值 val 的所有节点。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6</div><div class="line">输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</div></pre></td></tr></table></figure></p>
<p>方法1：和上面那题（237）类似的思路，删除目标节点<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        ListNode *dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), *pre = dummy;</div><div class="line">        dummy-&gt;next = head;</div><div class="line">        <span class="keyword">while</span> (pre-&gt;next) &#123;</div><div class="line">            <span class="keyword">if</span> (pre-&gt;next-&gt;val == val) &#123;</div><div class="line">                ListNode *t = pre-&gt;next;</div><div class="line">                pre-&gt;next = t-&gt;next;</div><div class="line">                t-&gt;next = <span class="literal">NULL</span>;</div><div class="line">                <span class="keyword">delete</span> t;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                pre = pre-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dummy-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>经典方法</strong>：跳过目标节点<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span></div><div class="line">    &#123;</div><div class="line">        ListNode* dummy=<span class="keyword">new</span> ListNode(<span class="number">-1</span>);</div><div class="line">        dummy-&gt;next=head;</div><div class="line">        ListNode* pre=dummy;</div><div class="line">        ListNode* cur=pre-&gt;next;</div><div class="line">        <span class="keyword">while</span>(cur)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur-&gt;val!=val)</div><div class="line">            &#123;</div><div class="line">                pre=cur;</div><div class="line">                cur=cur-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                pre-&gt;next=cur-&gt;next;</div><div class="line">                cur=pre-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dummy-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876 链表的中间结点"></a>876 链表的中间结点</h1><p>给定一个带有头结点 head 的非空单链表，返回链表的中间结点。</p>
<p>如果有两个中间结点，则返回第二个中间结点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1：</div><div class="line"></div><div class="line">输入：[1,2,3,4,5]</div><div class="line">输出：此列表中的结点 3 (序列化形式：[3,4,5])</div><div class="line">返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。</div><div class="line">注意，我们返回了一个 ListNode 类型的对象 ans，这样：</div><div class="line">ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.</div><div class="line">示例 2：</div><div class="line"></div><div class="line">输入：[1,2,3,4,5,6]</div><div class="line">输出：此列表中的结点 4 (序列化形式：[4,5,6])</div><div class="line">由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。</div></pre></td></tr></table></figure></p>
<p><strong>代码</strong>:和 <a href="https://winper001.github.io/2018/08/27/leetcode%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/#109-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">109</a>类似的套路<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span> || head-&gt;next==<span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        ListNode* fast=head-&gt;next-&gt;next;</div><div class="line">        ListNode* slow=head;</div><div class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</div><div class="line">        &#123;</div><div class="line">            fast=fast-&gt;next-&gt;next;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> slow-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="205-同构字符串"><a href="#205-同构字符串" class="headerlink" title="205 同构字符串"></a>205 同构字符串</h1><p>给定两个字符串 s 和 t，判断它们是否是同构的。</p>
<p>如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。</p>
<p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: s = &quot;egg&quot;, t = &quot;add&quot;</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: s = &quot;foo&quot;, t = &quot;bar&quot;</div><div class="line">输出: false</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: s = &quot;paper&quot;, t = &quot;title&quot;</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>你可以假设 s 和 t 具有相同的长度。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIsomorphic</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; char_m1;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; char_m2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(char_m1[s[i]]!=char_m2[t[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            char_m1[s[i]]=i+<span class="number">1</span>;<span class="comment">//原来我是char_m1[s[i]]++;这样只能会把“aba”和“aab”认为是同构，实际上这里丢失了位置对应的信息</span></div><div class="line">            char_m2[t[i]]=i+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739. 每日温度"></a>739. 每日温度</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高的天数。如果之后都不会升高，请输入 0 来代替。</p>
<p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p>
<p><strong>提示</strong>：气温 列表长度的范围是 [1, 30000]。每个气温的值的都是 [30, 100] 范围内的整数。</p>
<p><strong>分析</strong>：我的思路很简单，遍历每一个元素，对某一个元素来说，找到第一个大于它的数，此时：如果此时的是小于数组的size的，直接push_back(j-i),否则push 0.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dailyTemperatures(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; temperatures) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temperatures.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(temperatures[j]&lt;=temperatures[i])</div><div class="line">            &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j&lt;temperatures.size())</div><div class="line">            &#123;</div><div class="line">                res.push_back(j-i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                res.push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496 下一个更大元素 I"></a>496 下一个更大元素 I</h1><p>给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。</p>
<p>nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: nums1 = [4,1,2], nums2 = [1,3,4,2].</div><div class="line">输出: [-1,3,-1]</div><div class="line">解释:</div><div class="line">    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。</div><div class="line">    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。</div><div class="line">    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: nums1 = [2,4], nums2 = [1,2,3,4].</div><div class="line">输出: [3,-1]</div><div class="line">解释:</div><div class="line">    对于num1中的数字2，第二个数组中的下一个较大数字是3。</div><div class="line">    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。</div></pre></td></tr></table></figure></p>
<p>注意:</p>
<ul>
<li>nums1和nums2中所有元素是唯一的。</li>
<li>nums1和nums2 的数组大小都不超过1000。</li>
</ul>
<p><strong>和上一题的套路有点像</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nextGreaterElement(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; findNums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(findNums.size(),<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;findNums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(findNums[i]!=nums[j] &amp;&amp; j&lt;nums.size())</div><div class="line">            &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> z=j+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(nums[z]&lt;=nums[j])</div><div class="line">            &#123;</div><div class="line">                z++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(z&lt;nums.size())</div><div class="line">            &#123;</div><div class="line">                res[i]=nums[z];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503 下一个更大元素 II"></a>503 下一个更大元素 II</h1><p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,1]</div><div class="line">输出: [2,-1,2]</div><div class="line">解释: 第一个 1 的下一个更大的数是 2；</div><div class="line">数字 2 找不到下一个更大的数； </div><div class="line">第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</div></pre></td></tr></table></figure></p>
<p>注意: 输入数组的长度不会超过 10000。</p>
<p><strong>分析</strong>：依次遍历每一个元素。由于数组是循环的，所以先从前面往后面找第一个比它大的数字，如果找不到，就要那么就要从头开始找，第一个比它大的数字。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nextGreaterElements(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(nums.size(),<span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(nums[j]&lt;=nums[nums.size()<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j&lt;nums.size()) res[nums.size()<span class="number">-1</span>]=nums[j];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(nums[i]&gt;=nums[j])</div><div class="line">            &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j&lt;nums.size()) res[i]=nums[j];</div><div class="line">            <span class="keyword">else</span><span class="comment">//说明顺着没找到，那么就要从头开始找，第一个比它大的数字</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span>(nums[j]&lt;=nums[i]) j++;</div><div class="line">                <span class="keyword">if</span>(j&lt;nums.size()) res[i]=nums[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="556-下一个更大元素-III"><a href="#556-下一个更大元素-III" class="headerlink" title="556 下一个更大元素 III"></a>556 下一个更大元素 III</h1><p>给定一个32位正整数 n，你需要找到最小的32位整数，其与 n 中存在的位数完全相同，并且其值大于n。如果不存在这样的32位整数，则返回-1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 12</div><div class="line">输出: 21</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 21</div><div class="line">输出: -1</div></pre></td></tr></table></figure></p>
<p>这道题给了我们一个数字，让我们对各个位数重新排序，求出刚好比给定数字大的一种排序，如果不存在就返回-1。这道题给的例子的数字都比较简单，我们来看一个复杂的，比如12443322，这个数字的重排序结果应该为13222344，如果我们仔细观察的话会发现数字变大的原因是左数第二位的2变成了3，细心的童鞋会更进一步的发现后面的数字由降序变为了升序，这也不难理解，因为我们要求刚好比给定数字大的排序方式。那么我们再观察下原数字，看看2是怎么确定的，我们发现，如果从后往前看的话，2是第一个小于其右边位数的数字，因为如果是个纯降序排列的数字，做任何改变都不会使数字变大，直接返回-1。知道了找出转折点的方法，再来看如何确定2和谁交换，这里2并没有跟4换位，而是跟3换了，那么如何确定的3？其实也是从后往前遍历，找到第一个大于2的数字交换，然后把转折点之后的数字按升序排列就是最终的结果了。最后记得为防止越界要转为长整数型，然后根据结果判断是否要返回-1即可.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nextGreaterElement</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> s=to_string(n);</div><div class="line">        <span class="keyword">int</span> len=s.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> i=len;</div><div class="line">        <span class="keyword">for</span>(;i&gt;<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i<span class="number">-1</span>]&lt;s[i]) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=len;j&gt;=i;j--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[j]&gt;s[i<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                swap(s[j],s[i<span class="number">-1</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(s.begin()+i,s.end());</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res=stoll(s);</div><div class="line">        <span class="keyword">return</span> res&gt;INT_MAX? <span class="number">-1</span>:res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="268-缺失数字"><a href="#268-缺失数字" class="headerlink" title="268 缺失数字"></a>268 缺失数字</h1><p>给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [3,0,1]</div><div class="line">输出: 2</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [9,6,4,2,3,5,7,0,1]</div><div class="line">输出: 8</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)   </div><div class="line">        &#123;</div><div class="line">            m[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(--m[i]&lt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">              res=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="113-路径总和-II"><a href="#113-路径总和-II" class="headerlink" title="113 路径总和 II"></a>113 路径总和 II</h1><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p>
<p>说明: 叶子节点是指没有子节点的节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line">给定如下二叉树，以及目标和 sum = 22，</div><div class="line"></div><div class="line">              5</div><div class="line">             / \</div><div class="line">            4   8</div><div class="line">           /   / \</div><div class="line">          11  13  4</div><div class="line">         /  \    / \</div><div class="line">        7    2  5   1</div><div class="line">返回:</div><div class="line"></div><div class="line">[</div><div class="line">   [5,4,11,2],</div><div class="line">   [5,8,4,5]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pathSum(TreeNode* root, <span class="keyword">int</span> sum) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">        <span class="keyword">int</span> path_sum=<span class="number">0</span>;</div><div class="line">        preorder(root,path_sum,sum,path,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* node, <span class="keyword">int</span> &amp;path_sum,<span class="keyword">int</span> sum,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;result)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!node)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        path_sum=path_sum+node-&gt;val;</div><div class="line">        path.push_back(node-&gt;val);</div><div class="line">        <span class="keyword">if</span>(sum==path_sum &amp;&amp; !node-&gt;left &amp;&amp; !node-&gt;right)</div><div class="line">        &#123;</div><div class="line">            result.push_back(path);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node-&gt;left) preorder(node-&gt;left,path_sum,sum,path,result);</div><div class="line">        <span class="keyword">if</span>(node-&gt;right) preorder(node-&gt;right,path_sum,sum,path,result);</div><div class="line">        path_sum=path_sum-node-&gt;val;</div><div class="line">        path.pop_back();        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257 二叉树的所有路径"></a>257 二叉树的所有路径</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>
<p>说明: </p>
<ul>
<li>叶子节点是指没有子节点的节点。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入:</div><div class="line"></div><div class="line">   1</div><div class="line"> /   \</div><div class="line">2     3</div><div class="line"> \</div><div class="line">  5</div><div class="line"></div><div class="line">输出: [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</div><div class="line"></div><div class="line">解释: 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; binaryTreePaths(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> res;</div><div class="line">        preorder(root,to_string(root-&gt;val),res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root,<span class="built_in">string</span> path,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right)<span class="comment">//说明是叶子节点</span></div><div class="line">        &#123;</div><div class="line">            res.push_back(path);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(root-&gt;left) preorder(root-&gt;left,path+<span class="string">"-&gt;"</span>+to_string(root-&gt;left-&gt;val),res);</div><div class="line">        <span class="keyword">if</span>(root-&gt;right) preorder(root-&gt;right,path+<span class="string">"-&gt;"</span>+to_string(root-&gt;right-&gt;val),res);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="437 路径总和 III"></a>437 路径总和 III</h1><p>给定一个二叉树，它的每个结点都存放着一个整数值。</p>
<p>找出路径和等于给定数值的路径总数。</p>
<p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p>
<p>二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</div><div class="line"></div><div class="line">      10</div><div class="line">     /  \</div><div class="line">    5   -3</div><div class="line">   / \    \</div><div class="line">  3   2   11</div><div class="line"> / \   \</div><div class="line">3  -2   1</div><div class="line"></div><div class="line">返回 3。和等于 8 的路径有:</div><div class="line"></div><div class="line">1.  5 -&gt; 3</div><div class="line">2.  5 -&gt; 2 -&gt; 1</div><div class="line">3.  -3 -&gt; 11</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; out;</div><div class="line">        helper(root, sum, <span class="number">0</span>, out, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* node, <span class="keyword">int</span> sum, <span class="keyword">int</span> curSum, <span class="built_in">vector</span>&lt;TreeNode*&gt;&amp; out, <span class="keyword">int</span>&amp; res)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</div><div class="line">        curSum += node-&gt;val;</div><div class="line">        out.push_back(node);</div><div class="line">        <span class="keyword">if</span> (curSum == sum) ++res;</div><div class="line">        <span class="keyword">int</span> t = curSum;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; out.size() - <span class="number">1</span>; ++i) &#123;</div><div class="line">            t -= out[i]-&gt;val;</div><div class="line">            <span class="keyword">if</span> (t == sum) ++res;</div><div class="line">        &#125;</div><div class="line">        helper(node-&gt;left, sum, curSum, out, res);</div><div class="line">        helper(node-&gt;right, sum, curSum, out, res);</div><div class="line">        out.pop_back();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[for循环里的递归]]></title>
      <url>https://winper001.github.io/2018/08/27/for%E5%BE%AA%E7%8E%AF%E9%87%8C%E7%9A%84%E9%80%92%E5%BD%92/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[toc]</p>
<h1 id="17-电话号码的字母组合（回到目录）"><a href="#17-电话号码的字母组合（回到目录）" class="headerlink" title="17 电话号码的字母组合（回到目录）"></a>17 电话号码的字母组合（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1:</p>
<p>不对应任何字母。</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""></p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入：&quot;23&quot;</div><div class="line"></div><div class="line">输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//使用递归回溯做法。非常妙！</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(digits.size()==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">string</span> local;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; table&#123;&#123;<span class="string">'w'</span>&#125;, &#123;<span class="string">'w'</span>&#125;, &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;, &#123;<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;, &#123;<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>&#125;, &#123;<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>&#125;, </div><div class="line">        &#123;<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>&#125;, &#123;<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>&#125;, &#123;<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>&#125;, &#123;<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>&#125;&#125;;<span class="comment">//前两个，随便定义。。。。</span></div><div class="line">        generate(table,res,local,<span class="number">0</span>,digits);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;table,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res,<span class="built_in">string</span> &amp;local,<span class="keyword">int</span> index,<span class="built_in">string</span> digits)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> digit=digits[index]-<span class="string">'0'</span>;</div><div class="line">        <span class="keyword">if</span>(index==digits.size())</div><div class="line">        &#123;</div><div class="line">            res.push_back(local);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;table[digit].size();i++)</div><div class="line">        &#123;</div><div class="line">            local.push_back(table[digit][i]);</div><div class="line">            generate(table,res,local,index+<span class="number">1</span>,digits);</div><div class="line">            local.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>==大坑==</strong>：<br>实际上这行代码是省略了的，因为对于一个字符串来说，结束符是‘\0’,index加到最后面递归函数自然会return，所以可以不用return。我一开始，是直接在<code>res.push_back(local);</code>的下一行加return，那肯定是错的。因为index还没大于digits.size，就不能return.</p>
<h1 id="39-组合总和-I（回到目录）"><a href="#39-组合总和-I（回到目录）" class="headerlink" title="39 组合总和 I（回到目录）"></a>39 组合总和 I（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的数字可以无限制重复被选取。</p>
<p>说明：</p>
<p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。 </p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [2,3,6,7], target = 7,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [7],</div><div class="line">  [2,2,3]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [2,3,5], target = 8,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [2,2,2,2],</div><div class="line">  [2,3,3],</div><div class="line">  [3,5]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combinationSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        sort(candidates.begin(),candidates.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        generate(candidates,res,item,target,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;candidates,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item,<span class="keyword">int</span> target,<span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=candidates.size();</div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.push_back(item);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(candidates[i]);</div><div class="line">            generate(candidates,res,item,target-candidates[i],i);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="40-组合总和-II（回到目录）"><a href="#40-组合总和-II（回到目录）" class="headerlink" title="40 组合总和 II（回到目录）"></a>40 组合总和 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的每个数字在每个组合中只能使用一次。</p>
<p>说明：</p>
<p>所有数字（包括目标数）都是正整数。<br>解集不能包含重复的组合。<br>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [10,1,2,7,6,1,5], target = 8,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [1, 7],</div><div class="line">  [1, 2, 5],</div><div class="line">  [2, 6],</div><div class="line">  [1, 1, 6]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [2,5,2,1,2], target = 5,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [1,2,2],</div><div class="line">  [5]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combinationSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        sort(num.begin(),num.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; local;</div><div class="line">        findCombination(res, <span class="number">0</span>, target, local, num);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findCombination</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res, <span class="keyword">const</span> <span class="keyword">int</span> start, <span class="keyword">const</span> <span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; local, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; num)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.push_back(local);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i&lt;num.size();i++) <span class="comment">// iterative component</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">if</span>(num[i]==num[i<span class="number">-1</span>] &amp;&amp; i&gt;start) <span class="keyword">continue</span>; <span class="comment">// check duplicate combination</span></div><div class="line">                local.push_back(num[i]),</div><div class="line">                findCombination(res,i+<span class="number">1</span>,target-num[i],local,num); <span class="comment">// recursive componenet</span></div><div class="line">                local.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>另一种做法</strong>:使用set容器，代码和上面那题一样的<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combinationSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        sort(num.begin(),num.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; local;</div><div class="line">        findCombination(res, <span class="number">0</span>, target, local, num);</div><div class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; (res.begin(),res.end());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findCombination</span><span class="params">(<span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res, <span class="keyword">const</span> <span class="keyword">int</span> order, <span class="keyword">const</span> <span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; local, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; num)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.insert(local);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = order;i&lt;num.size();i++) <span class="comment">// iterative component</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">                <span class="comment">//if(num[i]==num[i-1]&amp;&amp;i&gt;order) continue; // check duplicate combination</span></div><div class="line">                local.push_back(num[i]),</div><div class="line">                findCombination(res,i+<span class="number">1</span>,target-num[i],local,num); <span class="comment">// recursive componenet</span></div><div class="line">                local.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46 全排列"></a>46 全排列</h1><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p>
<p><strong>示例</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3]</div><div class="line"></div><div class="line">输出:</div><div class="line">[</div><div class="line">  [1,2,3],</div><div class="line">  [1,3,2],</div><div class="line">  [2,1,3],</div><div class="line">  [2,3,1],</div><div class="line">  [3,1,2],</div><div class="line">  [3,2,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        generate(nums,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp;res,<span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            res.push_back(nums);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)<span class="comment">//循环实现和begin+1之后的全排列</span></div><div class="line">        &#123;</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">            generate(nums,res,begin+<span class="number">1</span>);</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>注</strong>：我们来仔细推敲一下循环体里的代码，当我们对序列进行交换之后，就将交换后的序列除去第一个元素放入到下一次递归中去了，递归完成了再进行下一次循环。这是某一次循环程序所做的工作，这里有一个问题，那就是在进入到下一次循环时，序列是被改变了。可是，如果我们要假定第一位的所有可能性的话，那么，就必须是在建立在这些序列的初始状态一致的情况下,所以每次交换后，要还原，确保初始状态一致。 </p>
<h1 id="47-全排列II（回到目录）"><a href="#47-全排列II（回到目录）" class="headerlink" title="47 全排列II（回到目录）"></a>47 全排列II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入: [1,1,2]</div><div class="line"></div><div class="line">输出:</div><div class="line">[</div><div class="line">  [1,1,2],</div><div class="line">  [1,2,1],</div><div class="line">  [2,1,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permuteUnique(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res_set;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        generate(res,res_set,nums,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,<span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res_set,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size() &amp;&amp; res_set.find(nums) ==res_set.end())</div><div class="line">        &#123;</div><div class="line">            res.push_back(nums);</div><div class="line">            res_set.insert(nums);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">            generate(res,res_set,nums,begin+<span class="number">1</span>);</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="77-组合（回到目录）"><a href="#77-组合（回到目录）" class="headerlink" title="77 组合（回到目录）"></a>77 组合（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>
<p><strong>示例</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">输入: n = 4, k = 2</div><div class="line"></div><div class="line">输出:</div><div class="line">[</div><div class="line">  [2,4],</div><div class="line">  [3,4],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  [1,3],</div><div class="line">  [1,4],</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>递归回溯</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item(<span class="number">0</span>,k);</div><div class="line">        <span class="keyword">if</span>(k&gt;n) <span class="keyword">return</span> res;</div><div class="line">        generate(n,k,<span class="number">0</span>,<span class="number">0</span>,item,res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> numOfDigit,<span class="keyword">int</span> begin,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(numOfDigit==k)</div><div class="line">        &#123;</div><div class="line">            res.push_back(item);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(i+<span class="number">1</span>);</div><div class="line">            generate(n,k,numOfDigit+<span class="number">1</span>,i+<span class="number">1</span>,item,res);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="78-子集（回到目录）"><a href="#78-子集（回到目录）" class="headerlink" title="78 子集（回到目录）"></a>78 子集（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">输入: nums = [1,2,3]</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [3],</div><div class="line">  [1],</div><div class="line">  [2],</div><div class="line">  [1,2,3],</div><div class="line">  [1,3],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>小象写法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,nums,item,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp;result)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size()) <span class="keyword">return</span>;</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        result.push_back(item);</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result);</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>for循环里递归</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//for循环</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        res.push_back(item);</div><div class="line">        sort(nums.begin(),nums.end());<span class="comment">//解答错误不是没有排序的问题</span></div><div class="line">        generate(res,item,nums,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(nums[i]);</div><div class="line">            res.push_back(item);</div><div class="line">            generate(res,item,nums,i+<span class="number">1</span>);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="90-子集-II（回到目录）"><a href="#90-子集-II（回到目录）" class="headerlink" title="90 子集 II（回到目录）"></a>90 子集 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,2]</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [2],</div><div class="line">  [1],</div><div class="line">  [1,2,2],</div><div class="line">  [2,2],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>小象解法</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsetsWithDup(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res_set;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,nums,item,result,res_set);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;result, <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res_set)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size())</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(res_set.find(item)==res_set.end())</div><div class="line">        &#123;</div><div class="line">            result.push_back(item);</div><div class="line">            res_set.insert(item);</div><div class="line">        &#125;</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>for循环里面递归</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsetsWithDup(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        res.push_back(item);</div><div class="line">        sort(nums.begin(),nums.end());<span class="comment">//解答错误不是没有排序的问题</span></div><div class="line">        generate(res,item,nums,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(nums[i]);</div><div class="line">            res.push_back(item);</div><div class="line">            generate(res,item,nums,i+<span class="number">1</span>);</div><div class="line">            item.pop_back();</div><div class="line">            <span class="keyword">while</span>(i+<span class="number">1</span>&lt;nums.size() &amp;&amp; nums[i]==nums[i+<span class="number">1</span>]) i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="131-分割回文串（回到目录）"><a href="#131-分割回文串（回到目录）" class="headerlink" title="131 分割回文串（回到目录）"></a>131 分割回文串（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</p>
<p>返回 s 所有可能的分割方案。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: &quot;aab&quot;</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [&quot;aa&quot;,&quot;b&quot;],</div><div class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>这是一道需要用DFS来解的题目，既然题目要求找到所有可能拆分成回文数的情况，那么肯定是所有的情况都要遍历到，对于每一个子字符串都要分别判断一次是不是回文数，那么肯定有一个判断回文数的子函数，还需要一个DFS函数用来递归，再加上原本的这个函数，总共需要三个函数来求解。代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//循环里有递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; partition(<span class="built_in">string</span> s) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; out;</div><div class="line">        partitionDFS(s, <span class="number">0</span>, out, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">partitionDFS</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> start, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;out, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; &amp;res)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start == s.size()) &#123;</div><div class="line">            res.push_back(out);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.size(); ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (isPalindrome(s, start, i)) &#123;</div><div class="line">                out.push_back(s.substr(start, i - start + <span class="number">1</span>));</div><div class="line">                partitionDFS(s, i + <span class="number">1</span>, out, res);</div><div class="line">                out.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (s[start] != s[end]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            ++start;</div><div class="line">            --end;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>注</strong>：那么，对原字符串的所有子字符串的访问顺序是什么呢，如果原字符串是 abcd, 那么访问顺序为:<code>a -&gt; b -&gt; c -&gt; d -&gt; cd -&gt; bc -&gt; bcd-&gt; ab -&gt; abc -&gt; abcd</code>, 这是对于没有两个或两个以上子回文串的情况。那么假如原字符串是<code>aabc</code>，那么访问顺序为：<code>a -&gt; a -&gt; b -&gt; c -&gt; bc -&gt; ab -&gt; abc -&gt; aa -&gt; b -&gt; c -&gt; bc -&gt; aab -&gt; aabc</code>，中间当检测到aa时候，发现是回文串，那么对于剩下的bc当做一个新串来检测，于是有<code>b -&gt; c -&gt; bc</code>，这样扫描了所有情况，即可得出最终答案。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[inception v1-v4]]></title>
      <url>https://winper001.github.io/2018/08/25/inception%20v1%20v2%20v3%20v4/</url>
      <content type="html"><![CDATA[<h1 id="inception-v1-v4"><a href="#inception-v1-v4" class="headerlink" title="inception v1-v4"></a>inception v1-v4</h1><h2 id="v1模型"><a href="#v1模型" class="headerlink" title="v1模型"></a>v1模型</h2><p>inception v1的模型是将1X1,3X3,5X5的卷积层和3X3的pooling层堆在一起。主要考虑到两个方面，一是增加了网络的宽度，另一方面是增加了网络对尺度的适应性。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/92E25A28BFFB430DB774F99B369DC9B0?method=download&amp;shareKey=98b6bd0a92bbc0d28c49680628d141b7" alt=""></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/5ACD4A2AA47C4CBF8376518010617746?method=download&amp;shareKey=eded03c77fb67af3ab53d71aa853b9d0" alt=""></p>
<p>第一张图是论文中提出的最原始的版本，所有的卷积核都在上一层的所有输出上来做，那5×5的卷积核所需的计算量就太大了，造成了特征图厚度很大。为了避免这一现象提出的inception具有如下结构，在3x3前，5x5前，max pooling后分别加上了1x1的卷积核起到了降低特征图厚度的作用，也就是Inception v1的网络结构。 </p>
<h2 id="v2模型"><a href="#v2模型" class="headerlink" title="v2模型"></a>v2模型</h2><p>一方面了加入了BN层，减少了Internal Covariate Shift（内部neuron的数据分布发生变化），使每一层的输出都规范化到一个N(0, 1)的高斯;另外一方面学习VGG用2个3x3的conv替代inception模块中的5x5，既降低了参数数量，也加速计算。</p>
<h2 id="v3模型"><a href="#v3模型" class="headerlink" title="v3模型"></a>v3模型</h2><p>v3一个最重要的改进是分解（Factorization），将7x7分解成两个一维的卷积（1x7,7x1），3x3也是一样（1x3,3x1），这样的好处，既可以加速计算（多余的计算能力可以用来加深网络），又可以将1个conv拆成2个conv，使得网络深度进一步增加，增加了网络的非线性，还有值得注意的地方是网络输入从224x224变为了299x299，更加精细设计了35x35/17x17/8x8的模块。</p>
<h1 id="v4模型"><a href="#v4模型" class="headerlink" title="v4模型"></a>v4模型</h1><p>inception模块结合residual connection,resnet的结构可以加速训练。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[两种人]]></title>
      <url>https://winper001.github.io/2018/08/24/%E4%B8%A4%E7%A7%8D%E4%BA%BA/</url>
      <content type="html"><![CDATA[<p>通过观察和经验，我发现那些稍微准备就去干的人和非要准备充分才去行动的人最大的区别就在于对人生的认知不同。前者认为人生是各种体验的集合，后者认为人生是各种成功的档案。因此前者往往充满活力和冒险精神，充满勇气和自信。注重过程，乐于接受变化和挑战，不惧怕失败，情绪乐观，面对失败也较轻松和正面，觉得至少能收获一份经验。这样的人常常大胆尝试，敢于打破规则，愿意去做许多未知的事情；后者则畏首畏尾，缺乏勇气和自信，全然以目标为导向。害怕变化和挑战，也非常害怕失败，只要一失败简直会要了他的命，压力沉重，甚至陷入无法自拔的沮丧和毁灭之中，这样的人因为很多的不敢为，所以经历的事情也比较少，囿于自身思维中的各种限制，躲在自己认为的安全区中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[1*1卷积]]></title>
      <url>https://winper001.github.io/2018/08/24/1x1%E5%8D%B7%E7%A7%AF%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="主要有两点作用："><a href="#主要有两点作用：" class="headerlink" title="主要有两点作用："></a>主要有两点作用：</h4><ul>
<li>1x1 卷积可以压缩信道数。池化可以压缩宽和高。  </li>
<li>1x1卷积给神经网络增加非线性，从而减少或保持信道数不变，也可以增加信道数。  </li>
</ul>
<p><strong>如下图可以形象表示</strong>：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1496926-8a2f31f55ed4ebaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="what"></p>
<h3 id="实现跨通道的交互和信息整合"><a href="#实现跨通道的交互和信息整合" class="headerlink" title="实现跨通道的交互和信息整合"></a>实现跨通道的交互和信息整合</h3><p><code>1×1</code>的卷积层（可能）引起人们的重视是在NIN的结构中，论文中林敏师兄的想法是利用MLP代替传统的线性卷积核，从而提高网络的表达能力。文中同时利用了跨通道pooling的角度解释，认为文中提出的MLP其实等价于在传统卷积核后面接cccp层，从而实现多个feature map的线性组合，实现跨通道的信息整合。而cccp层是等价于1×1卷积的，因此细看NIN的caffe实现，就是在每个传统卷积层后面接了两个cccp层（其实就是接了两个1×1的卷积层）</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1496926-0c124b0efc8f16d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>
<h3 id="进行卷积核通道数的降维和升维"><a href="#进行卷积核通道数的降维和升维" class="headerlink" title="进行卷积核通道数的降维和升维"></a>进行卷积核通道数的降维和升维</h3><p>由于<code>3X3</code>卷积或者<code>5X5</code>卷积在几百个filter的卷积层上做卷积操作时相当耗时，所以1X1卷积在3X3卷积或者5X5卷积计算之前先降低维度。那么，1X1卷积的主要作用有以下几点：  </p>
<p>1、降维<code>（dimension reductionality）</code>。比如，一张<code>500 X 500</code>且厚度depth为100 的图片在20个filter上做1X1的卷积，那么结果的大小为<code>500X500X20</code>。  </p>
<p>2、加入非线性。卷积层之后经过激励层，1X1的卷积在前一层的学习表示上添加了非线性激励<code>（ non-linear activation ）</code>，提升网络的表达能力。</p>
<p>如果卷积的输出输入都是一个平面，那么１X1卷积核并没有什么意义，它是完全不考虑像素与周边其他像素关系。但卷积的输出输入是长方体，所以１X1卷积实际上对每个像素点，在不同的channels上进行线性组合（信息整合），且保留原有平面结构，调控depth,从而完成升维或降维的功能。<br>下图所示，如果选择２个filters的１X1卷积层，那么数据就从原来的depth3降到了２。若用４个filters,则起到了升维的作用。<br><img src="https://upload-images.jianshu.io/upload_images/1496926-e4edc99affc4e90f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 动态规划]]></title>
      <url>https://winper001.github.io/2018/08/19/leetcode%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[toc]</p>
<h1 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53 最大子序和"></a>53 最大子序和</h1><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</div><div class="line">输出: 6</div><div class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</div></pre></td></tr></table></figure></p>
<p>进阶:</p>
<p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(nums.size()+<span class="number">6</span>,<span class="number">0</span>);</div><div class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> max_res=dp[<span class="number">0</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=max(dp[i<span class="number">-1</span>]+nums[i],nums[i]);</div><div class="line">            <span class="keyword">if</span>(max_res&lt;dp[i])</div><div class="line">            &#123;</div><div class="line">                max_res=dp[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_res;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="62-不同路径（回到目录）"><a href="#62-不同路径（回到目录）" class="headerlink" title="62 不同路径（回到目录）"></a>62 不同路径（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>
<p>问总共有多少条不同的路径？</p>
<p><img src="https://leetcode-cn.com/static/images/problemset/robot_maze.png" alt=""></p>
<p>例如，上图是一个7 x 3 的网格。有多少可能的路径？</p>
<p>说明：m 和 n 的值均不超过 100。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: m = 3, n = 2</div><div class="line">输出: 3</div><div class="line">解释:</div><div class="line">从左上角开始，总共有 3 条路径可以到达右下角。</div><div class="line">1. 向右 -&gt; 向右 -&gt; 向下</div><div class="line">2. 向右 -&gt; 向下 -&gt; 向右</div><div class="line">3. 向下 -&gt; 向右 -&gt; 向右</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: m = 7, n = 3</div><div class="line">输出: 28</div></pre></td></tr></table></figure></p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//动态规划</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;dp(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">        &#123;</div><div class="line">            dp[<span class="number">0</span>][j]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=dp[i][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>这跟之前那道 <code>Climbing Stairs</code> 爬梯子问题 很类似，那道题是说可以每次能爬一格或两格，问到达顶部的所有不同爬法的个数。而这道题是每次可以向下走或者向右走，求到达最右下角的所有不同走法的个数。那么跟爬梯子问题一样，我们需要用动态规划<code>Dynamic Programming</code>来解，我们可以维护一个二维数组dp，其中dp[i][j]表示到当前位置不同的走法的个数，然后可以得到递推式为:<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]，</code>这里为了节省空间，我们使用一维数组dp，一行一行的刷新也可以，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                dp[j]=dp[j]+dp[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="63-不同路径-II（回到目录）"><a href="#63-不同路径-II（回到目录）" class="headerlink" title="63 不同路径 II（回到目录）"></a>63 不同路径 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>
<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>
<p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p>
<p>说明：m 和 n 的值均不超过 100。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">[</div><div class="line">  [0,0,0],</div><div class="line">  [0,1,0],</div><div class="line">  [0,0,0]</div><div class="line">]</div><div class="line">输出: 2</div><div class="line">解释:</div><div class="line">3x3 网格的正中间有一个障碍物。</div><div class="line">从左上角到右下角一共有 2 条不同的路径：</div><div class="line">1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</div><div class="line">2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(obstacleGrid.empty() || obstacleGrid[<span class="number">0</span>].empty() || obstacleGrid[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">1</span>)</div><div class="line">         &#123;</div><div class="line">             <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">         &#125;</div><div class="line">        <span class="keyword">int</span> m=obstacleGrid.size();</div><div class="line">        <span class="keyword">int</span> n=obstacleGrid[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(obstacleGrid[i][j]==<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=dp[i][j<span class="number">-1</span>];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=dp[i][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="64-最小路径和（回到目录）"><a href="#64-最小路径和（回到目录）" class="headerlink" title="64 最小路径和（回到目录）"></a>64 最小路径和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>
<p>说明：每次只能向下或者向右移动一步。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入:</div><div class="line">[</div><div class="line">  [1,3,1],</div><div class="line">  [1,5,1],</div><div class="line">  [4,2,1]</div><div class="line">]</div><div class="line">输出: 7</div><div class="line">解释: 因为路径 1→3→1→1→1 的总和最小。</div></pre></td></tr></table></figure></p>
<p>代码1：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(grid.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> row=grid.size();</div><div class="line">        <span class="keyword">int</span> col=grid[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;dp(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,<span class="number">0</span>));</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=grid[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;col;j++)</div><div class="line">        &#123;</div><div class="line">            dp[<span class="number">0</span>][j]=grid[<span class="number">0</span>][j]+dp[<span class="number">0</span>][j<span class="number">-1</span>];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;row;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i][<span class="number">0</span>]=grid[i][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;col;j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])+grid[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[row<span class="number">-1</span>][col<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>代码2：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = grid.size();</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">if</span>(m == <span class="number">0</span> || n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) </div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = grid[i][j];</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">0</span>) </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i][j<span class="number">-1</span>] + grid[i][j];</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>) </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] + grid[i][j];</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]) + grid[i][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="70-爬楼梯答（回到目录）"><a href="#70-爬楼梯答（回到目录）" class="headerlink" title="70 爬楼梯答（回到目录）"></a>70 爬楼梯答（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>假设你正在爬楼梯。需要 n 步你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1：</div><div class="line">输入： 2</div><div class="line">输出： 2</div><div class="line">解释： 有两种方法可以爬到楼顶。</div><div class="line">1.  1 步 + 1 步</div><div class="line">2.  2 步</div><div class="line"></div><div class="line">示例 2：</div><div class="line">输入： 3</div><div class="line">输出： 3</div><div class="line">解释： 有三种方法可以爬到楼顶。</div><div class="line">1.  1 步 + 1 步 + 1 步</div><div class="line">2.  1 步 + 2 步</div><div class="line">3.  2 步 + 1 步</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n,<span class="number">0</span>);</div><div class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">        dp[<span class="number">2</span>]=<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91 解码方法"></a>91 解码方法</h1><p>一条包含字母 A-Z 的消息通过以下方式进行了编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&apos;A&apos; -&gt; 1</div><div class="line">&apos;B&apos; -&gt; 2</div><div class="line">...</div><div class="line">&apos;Z&apos; -&gt; 26</div><div class="line">给定一个只包含数字的非空字符串，请计算解码方法的总数。</div><div class="line"></div><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: &quot;12&quot;</div><div class="line">输出: 2</div><div class="line">解释: 它可以解码为 &quot;AB&quot;（1 2）或者 &quot;L&quot;（12）。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: &quot;226&quot;</div><div class="line">输出: 3</div><div class="line">解释: 它可以解码为 &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), 或者 &quot;BBF&quot; (2 2 6) 。</div></pre></td></tr></table></figure></p>
<p>这道题要求解码方法，跟之前那道 Climbing Stairs 爬梯子问题 非常的相似，但是还有一些其他的限制条件，比如说一位数时不能为0，两位数不能大于26，其十位上的数也不能为0，出去这些限制条件，根爬梯子基本没啥区别，也勉强算特殊的斐波那契数列，当然需要用动态规划Dynamci Programming来解。建立一位dp数组，长度比输入数组长多多2，全部初始化为1，因为斐波那契数列的前两项也为1，然后从第三个数开始更新，对应数组的第一个数。对每个数组首先判断其是否为0，若是将改为dp赋0，若不是，赋上一个dp值，此时相当如加上了dp[i - 1], 然后看数组前一位是否存在，如果存在且满足前一位不是0，且和当前为一起组成的两位数不大于26，则当前dp值加上dp[i - 2], 至此可以看出来跟斐波那契数组的递推式一样，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (s.empty() || (s.size() &gt; <span class="number">1</span> &amp;&amp; s[<span class="number">0</span>] == <span class="string">'0'</span>)) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(s.size(), <span class="number">0</span>);</div><div class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.size(); ++i) &#123;</div><div class="line">            dp[i] = (s[i - <span class="number">1</span>] == <span class="string">'0'</span>) ? <span class="number">0</span> : dp[i - <span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; (s[i - <span class="number">2</span>] == <span class="string">'1'</span> || (s[i - <span class="number">2</span>] == <span class="string">'2'</span> &amp;&amp; s[i - <span class="number">1</span>] &lt;= <span class="string">'6'</span>))) &#123;</div><div class="line">                dp[i] += dp[i - <span class="number">2</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp.back();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="96-不同的二叉搜索树（回到目录）"><a href="#96-不同的二叉搜索树（回到目录）" class="headerlink" title="96 不同的二叉搜索树（回到目录）"></a>96 不同的二叉搜索树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">输入: 3</div><div class="line">输出: 5</div><div class="line">解释:</div><div class="line">给定 n = 3, 一共有 5 种不同结构的二叉搜索树:</div><div class="line"></div><div class="line">   1         3     3      2      1</div><div class="line">    \       /     /      / \      \</div><div class="line">     3     2     1      1   3      2</div><div class="line">    /     /       \                 \</div><div class="line">   2     1         2                 3</div></pre></td></tr></table></figure></p>
<p>二分查找树的定义是，左子树节点均小于root，右子树节点均大于root,所以可以用递推的方法，把dp[i]表示i个数能够构成的二叉搜索树的个数.初始化边界值是 dp[0]=1,dp[1]=1,dp[2]=2。<br>当i&gt;=3的时候，若以j为root结点，dp[j-1]等于root结点左边的j-1个结点能构成的BST个数.<br>dp[i-j]等于root结点右边i-j个结点能构成的BST个数。因为j+1~i的种数和0~i-j的种数一样，所以就是dp[i-j]所以dp[j-1] * dp[i-j]等于以j为root结点能构成的BST种数<br>j可以取1~i中的任意一个值，把这些所有计算出来的总数相加就是v[i]的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">                 1                        n = 1</div><div class="line"></div><div class="line">             2        1                   n = 2</div><div class="line">            /          \</div><div class="line">           1            2</div><div class="line">  </div><div class="line">1         3     3      2      1           n = 3</div><div class="line"> \       /     /      / \      \</div><div class="line">  3     2     1      1   3      2</div><div class="line"> /     /       \                 \</div><div class="line">2     1         2                 3</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n+<span class="number">1</span>);</div><div class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">        dp[<span class="number">2</span>]=<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</div><div class="line">            &#123;</div><div class="line">                dp[i] +=dp[i<span class="number">-1</span>]*dp[i-j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="120-三角形最小路径和（回到目录）"><a href="#120-三角形最小路径和（回到目录）" class="headerlink" title="120 三角形最小路径和（回到目录）"></a>120 三角形最小路径和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p>
<p>例如，给定三角形：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [2],</div><div class="line">    [3,4],</div><div class="line">   [6,5,7],</div><div class="line">  [4,1,8,3]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p>
<p>使用常规的动态规划解法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;triangle.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;triangle[i].size();j++)</div><div class="line">            &#123;</div><div class="line">                dp[i].push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dp[dp.size()<span class="number">-1</span>].size();j++)</div><div class="line">        &#123;</div><div class="line">            dp[dp.size()<span class="number">-1</span>][j]=triangle[dp.size()<span class="number">-1</span>][j];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=triangle.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=triangle[i].size();j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=min(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>])+triangle[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用原地覆盖<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=triangle.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</div><div class="line">            &#123;</div><div class="line">                triangle[i][j]=min(triangle[i+<span class="number">1</span>][j],triangle[i+<span class="number">1</span>][j+<span class="number">1</span>])+triangle[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="121-买卖股票的最佳时机（回到目录）"><a href="#121-买卖股票的最佳时机（回到目录）" class="headerlink" title="121 买卖股票的最佳时机（回到目录）"></a>121 买卖股票的最佳时机（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p><strong>注意你不能在买入股票前卖出股票</strong>。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 5</div></pre></td></tr></table></figure></p>
<p>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</p>
<p>注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div></pre></td></tr></table></figure></p>
<p>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p>
<p><strong>分析</strong>：prices数组是每只股票的当天的价格<br>遍历整个prices数组<br>minvalue 中保存从0到当前所有股价中最低的价格<br>ans 中保存minvalue到当前所有股价中能卖掉的最高的价格<br>最后 return ans;</p>
<p>代码1：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> minvalue = <span class="number">99999999</span>, ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.size(); i++) &#123;</div><div class="line">            minvalue = min(minvalue, prices[i]);</div><div class="line">            ans = max(ans, prices[i] - minvalue);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>代码2：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(prices.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> max_pro=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp_min=prices[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> len=prices.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(temp_min&gt;prices[i])</div><div class="line">            &#123;</div><div class="line">                temp_min=prices[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> temp_max=prices[i]-temp_min;</div><div class="line">                max_pro=max(max_pro,temp_max);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_pro;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198 打家劫舍"></a>198 打家劫舍</h1><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [1,2,3,1]</div><div class="line">输出: 4</div><div class="line">解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</div><div class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [2,7,9,3,1]</div><div class="line">输出: 12</div><div class="line">解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</div><div class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 动态规划</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (num.size() &lt;= <span class="number">1</span>) <span class="keyword">return</span> num.empty() ? <span class="number">0</span> : num[<span class="number">0</span>];</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp = &#123;num[<span class="number">0</span>], max(num[<span class="number">0</span>], num[<span class="number">1</span>])&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; num.size(); ++i) &#123;</div><div class="line">            dp.push_back(max(num[i] + dp[i - <span class="number">2</span>], dp[i - <span class="number">1</span>]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp.back();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="213-打家劫舍-II（回到目录）"><a href="#213-打家劫舍-II（回到目录）" class="headerlink" title="213 打家劫舍 II（回到目录）"></a>213 打家劫舍 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [2,3,2]</div><div class="line">输出: 3</div><div class="line">解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1,2,3,1]</div><div class="line">输出: 4</div><div class="line">解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。</div><div class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</div></pre></td></tr></table></figure></p>
<p><strong>在打家劫舍（198）的基础上改动，先去掉第一个，计算一下最高金额，然后只去掉最后一个，计算最高金额。然后比较两种方式的结果，取较大值。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//动态规划</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> nums.empty()? <span class="number">0</span>: nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">return</span> max(rob(nums,<span class="number">0</span>,nums.size()<span class="number">-1</span>),rob(nums,<span class="number">1</span>,nums.size()));</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(end-start&lt;=<span class="number">1</span>) <span class="keyword">return</span> nums[start];</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(end,<span class="number">0</span>);</div><div class="line">        dp[start]=nums[start];</div><div class="line">        dp[start+<span class="number">1</span>]=max(nums[start+<span class="number">1</span>],nums[start]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start+<span class="number">2</span>;i&lt;end;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=max(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[dp.size()<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="279-完全平方数（回到目录）"><a href="#279-完全平方数（回到目录）" class="headerlink" title="279 完全平方数（回到目录）"></a>279 完全平方数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: n = 12</div><div class="line">输出: 3 </div><div class="line">解释: 12 = 4 + 4 + 4.</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: n = 13</div><div class="line">输出: 2</div><div class="line">解释: 13 = 4 + 9.</div></pre></td></tr></table></figure></p>
<p>分析：建立一个n+1长度的数组dp，dp[i]表示i这个数构成平方和需要数字的最小个数。<br>当j<em>j&lt;i的时候，temp中保存j从1开始每加1得到的dp[i-j</em>j] + 1的最小值<br>当j*j=i的时候，dp[i]的值就直接为1<br>从2一直到n可以计算出dp[i]的所有值。。<br>最后return dp[n]的值。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n+<span class="number">1</span>);</div><div class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> temp = <span class="number">99999999</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j * j &lt;= i; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(j * j == i) &#123;</div><div class="line">                    temp = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                temp = min(temp, dp[i-j*j] + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            dp[i] = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="303-区域和检索-数组不可变（回到目录）"><a href="#303-区域和检索-数组不可变（回到目录）" class="headerlink" title="303 区域和检索 - 数组不可变（回到目录）"></a>303 区域和检索 - 数组不可变（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个整数数组  nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元素的总和，包含 i,  j 两点。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()</div><div class="line"></div><div class="line">sumRange(0, 2) -&gt; 1</div><div class="line">sumRange(2, 5) -&gt; -1</div><div class="line">sumRange(0, 5) -&gt; -3</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<p>你可以假设数组不可变。<br>会多次调用 sumRange 方法。<br><strong>动态规划</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> NumArray &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    NumArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums) </div><div class="line">    &#123;</div><div class="line">        dp=nums;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=dp[i]+dp[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> dp[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> dp[j]-dp[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your NumArray object will be instantiated and called as such:</div><div class="line"> * NumArray obj = new NumArray(nums);</div><div class="line"> * int param_1 = obj.sumRange(i,j);</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<h1 id="304-二维区域和检索-矩阵不可变（回到目录）"><a href="#304-二维区域和检索-矩阵不可变（回到目录）" class="headerlink" title="304 二维区域和检索 - 矩阵不可变（回到目录）"></a>304 二维区域和检索 - 矩阵不可变（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2)。</p>
<p><img src="https://leetcode-cn.com/static/images/courses/range_sum_query_2d.png" alt=""></p>
<p>上图子矩阵左上角 (row1, col1) = (2, 1) ，右下角(row2, col2) = (4, 3)，该子矩形内元素的总和为 8。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">给定 matrix = [</div><div class="line">  [3, 0, 1, 4, 2],</div><div class="line">  [5, 6, 3, 2, 1],</div><div class="line">  [1, 2, 0, 1, 5],</div><div class="line">  [4, 1, 0, 1, 7],</div><div class="line">  [1, 0, 3, 0, 5]</div><div class="line">]</div><div class="line"></div><div class="line">sumRegion(2, 1, 4, 3) -&gt; 8</div><div class="line">sumRegion(1, 1, 2, 2) -&gt; 11</div><div class="line">sumRegion(1, 2, 2, 4) -&gt; 12</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> NumMatrix &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; v;</div><div class="line">    NumMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; matrix) &#123;</div><div class="line">        <span class="keyword">int</span> m = matrix.size();</div><div class="line">        <span class="keyword">if</span>(matrix.empty())</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].size();</div><div class="line">        v= <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; (m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;</div><div class="line">                    v[i][j] = matrix[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</div><div class="line">                    v[i][j] = v[i][j<span class="number">-1</span>] + matrix[i][j];</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>) &#123;</div><div class="line">                    v[i][j] = v[i<span class="number">-1</span>][j] + matrix[i][j];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    v[i][j] = v[i<span class="number">-1</span>][j] + v[i][j<span class="number">-1</span>] + matrix[i][j] - v[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> row1, <span class="keyword">int</span> col1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(row1 == <span class="number">0</span> &amp;&amp; col1 == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> v[row2][col2];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(row1 == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> v[row2][col2] - v[row2][col1<span class="number">-1</span>];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(col1 == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> v[row2][col2] - v[row1<span class="number">-1</span>][col2];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> v[row2][col2] - v[row1<span class="number">-1</span>][col2] - v[row2][col1<span class="number">-1</span>] + v[row1<span class="number">-1</span>][col1<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="300-最长上升子序列（回到目录）"><a href="#300-最长上升子序列（回到目录）" class="headerlink" title="300 最长上升子序列（回到目录）"></a>300 最长上升子序列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [10,9,2,5,3,7,101,18]</div><div class="line">输出: 4 </div><div class="line">解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(nums.size(),<span class="number">0</span>);</div><div class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;dp.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                dp[i]=dp[i<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(res&lt;dp[i])</div><div class="line">            &#123;</div><div class="line">                res=dp[i];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="338-比特位计数（回到目录）"><a href="#338-比特位计数（回到目录）" class="headerlink" title="338 比特位计数（回到目录）"></a>338 比特位计数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 2</div><div class="line">输出: [0,1,1]</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 5</div><div class="line">输出: [0,1,1,2,1,2]</div></pre></td></tr></table></figure></p>
<p>方法：假设构造一颗二叉树，根节点为1，从左到右从上到下分别是1，2，3，4…的二进制，可以发现如下规律：左子树是给根节点在末尾加0，右结点是给根节点在末尾加1，可得10和11；后来，10成为根节点，它左子树是100，右子树是101；11为根节点的树，左子树是110，右子树是111，同样是左边加0，右边加1…也就是当前数为偶数就在左子树，加0；如果当前数是奇数就在右子树，加1。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countBits(<span class="keyword">int</span> num) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(num+<span class="number">1</span>);</div><div class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=dp[i&gt;&gt;<span class="number">1</span>]+i%<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode刷题B部分]]></title>
      <url>https://winper001.github.io/2018/08/14/leetcode%E5%88%B7%E9%A2%98B/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[toc]</p>
<h1 id="50-Pow-x-n-（回到目录）"><a href="#50-Pow-x-n-（回到目录）" class="headerlink" title="50. Pow(x, n)（回到目录）"></a>50. Pow(x, n)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 2.00000, 10</div><div class="line">输出: 1024.00000</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 2.10000, 3</div><div class="line">输出: 9.26100</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: 2.00000, -2</div><div class="line">输出: 0.25000</div><div class="line">解释: 2-2 = 1/22 = 1/4 = 0.</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>/powxn(x,-n);</div><div class="line">        <span class="keyword">return</span> powxn(x,n);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">powxn</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">double</span> half=powxn(x,n/<span class="number">2</span>);</div><div class="line">        <span class="keyword">if</span>(n % <span class="number">2</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> half*half;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> half*half*x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="54-螺旋矩阵-59-（回到目录）"><a href="#54-螺旋矩阵-59-（回到目录）" class="headerlink" title="54 螺旋矩阵(59)（回到目录）"></a>54 螺旋矩阵(59)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 4, 5, 6 ],</div><div class="line"> [ 7, 8, 9 ]</div><div class="line">]</div><div class="line">输出: [1,2,3,6,9,8,7,4,5]</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入:</div><div class="line">[</div><div class="line">  [1, 2, 3, 4],</div><div class="line">  [5, 6, 7, 8],</div><div class="line">  [9,10,11,12]</div><div class="line">]</div><div class="line">输出: [1,2,3,4,8,12,11,10,9,5,6,7]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; spiralOrder(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(matrix.empty()) <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> m=matrix.size();</div><div class="line">        <span class="keyword">int</span> n=matrix[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">int</span> count=min(m,n)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> yushu=min(m,n)%<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;m<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[j][n<span class="number">-1</span>-i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>-i;j&gt;=i+<span class="number">1</span>;j--)<span class="comment">//这里j&gt;=i+1,不能是j&gt;=i，不然在最左下角的那个元素会重复</span></div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[m<span class="number">-1</span>-i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=m<span class="number">-1</span>-i;j&gt;=i+<span class="number">1</span>;j--)<span class="comment">//这里j&gt;=i+1,不能是j&gt;=i，不然在左上角的那个元素会重复</span></div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[j][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(yushu==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(m==n)</div><div class="line">            &#123;</div><div class="line">                res.push_back(matrix[count][count]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(m&gt;n)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=count;i&lt;m-count;i++)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(matrix[i][count]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=count;i&lt;n-count;i++)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(matrix[count][i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="58-最后一个单词的长度（回到目录）"><a href="#58-最后一个单词的长度（回到目录）" class="headerlink" title="58 最后一个单词的长度（回到目录）"></a>58 最后一个单词的长度（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串，返回其最后一个单词的长度。</p>
<p>如果不存在最后一个单词，请返回 0 。</p>
<p>说明：一个单词是指由字母组成，但不包含任何空格的字符串。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;Hello World&quot;</div><div class="line">输出: 5</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n=s.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(s[n]==<span class="string">' '</span>) n--;<span class="comment">//</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i] !=<span class="string">' '</span>)</div><div class="line">            &#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="59-螺旋矩阵-II-54-（回到目录）"><a href="#59-螺旋矩阵-II-54-（回到目录）" class="headerlink" title="59 螺旋矩阵 II(54)（回到目录）"></a>59 螺旋矩阵 II(54)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: 3</div><div class="line">输出:</div><div class="line">[</div><div class="line"> [ 1, 2, 3 ],</div><div class="line"> [ 8, 9, 4 ],</div><div class="line"> [ 7, 6, 5 ]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; generateMatrix(<span class="keyword">int</span> n) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; matrix(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</div><div class="line">        <span class="keyword">int</span> count=n/<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> yushu=n%<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                matrix[i][j]=num++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                matrix[j][n<span class="number">-1</span>-i]=num++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>-i;j&gt;=i+<span class="number">1</span>;j--)</div><div class="line">            &#123;</div><div class="line">                matrix[n<span class="number">-1</span>-i][j]=num++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>-i;j&gt;=i+<span class="number">1</span>;j--)</div><div class="line">            &#123;</div><div class="line">                matrix[j][i]=num++;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(yushu)</div><div class="line">        &#123;</div><div class="line">            matrix[count][count]=num++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> matrix;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="62-不同路径（回到目录）"><a href="#62-不同路径（回到目录）" class="headerlink" title="62 不同路径（回到目录）"></a>62 不同路径（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>
<p>问总共有多少条不同的路径？</p>
<p><img src="https://leetcode-cn.com/static/images/problemset/robot_maze.png" alt=""></p>
<p>例如，上图是一个7 x 3 的网格。有多少可能的路径？</p>
<p>说明：m 和 n 的值均不超过 100。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: m = 3, n = 2</div><div class="line">输出: 3</div><div class="line">解释:</div><div class="line">从左上角开始，总共有 3 条路径可以到达右下角。</div><div class="line">1. 向右 -&gt; 向右 -&gt; 向下</div><div class="line">2. 向右 -&gt; 向下 -&gt; 向右</div><div class="line">3. 向下 -&gt; 向右 -&gt; 向右</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: m = 7, n = 3</div><div class="line">输出: 28</div></pre></td></tr></table></figure></p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//动态规划</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;dp(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">        &#123;</div><div class="line">            dp[<span class="number">0</span>][j]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=dp[i][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>这跟之前那道 <code>Climbing Stairs</code> 爬梯子问题 很类似，那道题是说可以每次能爬一格或两格，问到达顶部的所有不同爬法的个数。而这道题是每次可以向下走或者向右走，求到达最右下角的所有不同走法的个数。那么跟爬梯子问题一样，我们需要用动态规划<code>Dynamic Programming</code>来解，我们可以维护一个二维数组dp，其中dp[i][j]表示到当前位置不同的走法的个数，然后可以得到递推式为:<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]，</code>这里为了节省空间，我们使用一维数组dp，一行一行的刷新也可以，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                dp[j]=dp[j]+dp[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="63-不同路径-II（回到目录）"><a href="#63-不同路径-II（回到目录）" class="headerlink" title="63 不同路径 II（回到目录）"></a>63 不同路径 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>
<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>
<p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p>
<p>说明：m 和 n 的值均不超过 100。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">[</div><div class="line">  [0,0,0],</div><div class="line">  [0,1,0],</div><div class="line">  [0,0,0]</div><div class="line">]</div><div class="line">输出: 2</div><div class="line">解释:</div><div class="line">3x3 网格的正中间有一个障碍物。</div><div class="line">从左上角到右下角一共有 2 条不同的路径：</div><div class="line">1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</div><div class="line">2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(obstacleGrid.empty() || obstacleGrid[<span class="number">0</span>].empty() || obstacleGrid[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">1</span>)</div><div class="line">         &#123;</div><div class="line">             <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">         &#125;</div><div class="line">        <span class="keyword">int</span> m=obstacleGrid.size();</div><div class="line">        <span class="keyword">int</span> n=obstacleGrid[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(obstacleGrid[i][j]==<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=dp[i][j<span class="number">-1</span>];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=dp[i][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="98-验证二叉搜索树（回到目录）"><a href="#98-验证二叉搜索树（回到目录）" class="headerlink" title="98. 验证二叉搜索树（回到目录）"></a>98. 验证二叉搜索树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>
<p>假设一个二叉搜索树具有如下特征：</p>
<p>节点的左子树只包含小于当前节点的数。<br>节点的右子树只包含大于当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">    2</div><div class="line">   / \</div><div class="line">  1   3</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入:</div><div class="line">    5</div><div class="line">   / \</div><div class="line">  1   4</div><div class="line">     / \</div><div class="line">    3   6</div><div class="line">输出: false</div><div class="line">解释: 输入为: [5,1,4,null,null,3,6]。</div><div class="line">     根节点的值为 5 ，但是其右子节点值为 4 。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums;</div><div class="line">        inorder(root,nums);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i+<span class="number">1</span>]&lt;=nums[i])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</div><div class="line">        inorder(root-&gt;left,nums);</div><div class="line">        nums.push_back(root-&gt;val);</div><div class="line">        inorder(root-&gt;right,nums);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="120-三角形最小路径和（回到目录）"><a href="#120-三角形最小路径和（回到目录）" class="headerlink" title="120 三角形最小路径和（回到目录）"></a>120 三角形最小路径和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p>
<p>例如，给定三角形：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [2],</div><div class="line">    [3,4],</div><div class="line">   [6,5,7],</div><div class="line">  [4,1,8,3]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p>
<p>使用常规的动态规划解法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;triangle.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;triangle[i].size();j++)</div><div class="line">            &#123;</div><div class="line">                dp[i].push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dp[dp.size()<span class="number">-1</span>].size();j++)</div><div class="line">        &#123;</div><div class="line">            dp[dp.size()<span class="number">-1</span>][j]=triangle[dp.size()<span class="number">-1</span>][j];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=triangle.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=triangle[i].size();j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=min(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>])+triangle[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用原地覆盖<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=triangle.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</div><div class="line">            &#123;</div><div class="line">                triangle[i][j]=min(triangle[i+<span class="number">1</span>][j],triangle[i+<span class="number">1</span>][j+<span class="number">1</span>])+triangle[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="198-打家劫舍（回到目录）"><a href="#198-打家劫舍（回到目录）" class="headerlink" title="198 打家劫舍（回到目录）"></a>198 打家劫舍（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [1,2,3,1]</div><div class="line">输出: 4</div><div class="line">解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</div><div class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [2,7,9,3,1]</div><div class="line">输出: 12</div><div class="line">解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</div><div class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 动态规划</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (num.size() &lt;= <span class="number">1</span>) <span class="keyword">return</span> num.empty() ? <span class="number">0</span> : num[<span class="number">0</span>];</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp = &#123;num[<span class="number">0</span>], max(num[<span class="number">0</span>], num[<span class="number">1</span>])&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; num.size(); ++i) &#123;</div><div class="line">            dp.push_back(max(num[i] + dp[i - <span class="number">2</span>], dp[i - <span class="number">1</span>]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp.back();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="213-打家劫舍-II（回到目录）"><a href="#213-打家劫舍-II（回到目录）" class="headerlink" title="213 打家劫舍 II（回到目录）"></a>213 打家劫舍 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [2,3,2]</div><div class="line">输出: 3</div><div class="line">解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1,2,3,1]</div><div class="line">输出: 4</div><div class="line">解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。</div><div class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</div></pre></td></tr></table></figure></p>
<p>在打家劫舍（198）的基础上改动，先去掉第一个，计算一下最高金额，然后只去掉最后一个，计算最高金额。然后比较两种方式的结果，取较大值。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//动态规划</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> nums.empty()? <span class="number">0</span>: nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">return</span> max(rob(nums,<span class="number">0</span>,nums.size()<span class="number">-1</span>),rob(nums,<span class="number">1</span>,nums.size()));</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(end-start&lt;=<span class="number">1</span>) <span class="keyword">return</span> nums[start];</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(end,<span class="number">0</span>);</div><div class="line">        dp[start]=nums[start];</div><div class="line">        dp[start+<span class="number">1</span>]=max(nums[start+<span class="number">1</span>],nums[start]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start+<span class="number">2</span>;i&lt;end;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=max(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[dp.size()<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="287-寻找重复数（回到目录）"><a href="#287-寻找重复数（回到目录）" class="headerlink" title="287 寻找重复数（回到目录）"></a>287 寻找重复数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [1,3,4,2,2]</div><div class="line">输出: 2</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [3,1,3,4,2]</div><div class="line">输出: 3</div><div class="line">说明：</div></pre></td></tr></table></figure></p>
<p>不能更改原数组（假设数组是只读的）。<br>只能使用额外的 O(1) 的空间。<br>时间复杂度小于 O(n2) 。<br>数组中只有一个重复的数字，但它可能不止重复出现一次。</p>
<p><strong>分析</strong>：这道题和抽屉原理差不多，例如九个抽屉是个钥匙，一定会有一个抽屉是两个要是的。题目要求我们不能改变原数组，即不能给原数组排序，又不能用多余空间，那么哈希表神马的也就不用考虑了，又说时间小于O(n<sup>2</sup>)，也就不能用brute force的方法，那我们也就只能考虑用二分搜索法了，我们在区别[1, n]中搜索，首先求出中点数mid，然后遍历整个数组，统计所有小于等于mid的个数。如果count 小于等于mid， 说明 1 到 mid 这些数字没有重复项， 重复项在右半边 mid+1 到n， 所以缩小到右半边继续搜索；如果count 大于mid， 说明  1 到 mid 这些数字中有重复项，缩小到 左半边继续搜索。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> left=<span class="number">1</span>,right=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;right)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(num&lt;=mid)</div><div class="line">                &#123;</div><div class="line">                    cnt++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(cnt&lt;=mid) left=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right=mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="303-区域和检索-数组不可变（回到目录）"><a href="#303-区域和检索-数组不可变（回到目录）" class="headerlink" title="303 区域和检索 - 数组不可变（回到目录）"></a>303 区域和检索 - 数组不可变（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个整数数组  nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元素的总和，包含 i,  j 两点。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()</div><div class="line"></div><div class="line">sumRange(0, 2) -&gt; 1</div><div class="line">sumRange(2, 5) -&gt; -1</div><div class="line">sumRange(0, 5) -&gt; -3</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<p>你可以假设数组不可变。<br>会多次调用 sumRange 方法。<br><strong>动态规划</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> NumArray &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    NumArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums) </div><div class="line">    &#123;</div><div class="line">        dp=nums;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=dp[i]+dp[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> dp[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> dp[j]-dp[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your NumArray object will be instantiated and called as such:</div><div class="line"> * NumArray obj = new NumArray(nums);</div><div class="line"> * int param_1 = obj.sumRange(i,j);</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<h1 id="441-排列硬币（回到目录）"><a href="#441-排列硬币（回到目录）" class="headerlink" title="441 排列硬币（回到目录）"></a>441 排列硬币（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。</p>
<p>给定一个数字 n，找出可形成完整阶梯行的总行数。</p>
<p>n 是一个非负整数，并且在32位有符号整型的范围内。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">n = 5</div><div class="line"></div><div class="line">硬币可排列成以下几行:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line">因为第三行不完整，所以返回2.</div><div class="line">示例 2:</div><div class="line"></div><div class="line">n = 8</div><div class="line"></div><div class="line">硬币可排列成以下几行:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line">因为第四行不完整，所以返回3.</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">arrangeCoins</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</div><div class="line">        <span class="keyword">long</span> low = <span class="number">1</span>, high = n;</div><div class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</div><div class="line">            <span class="keyword">long</span> mid = low + (high - low) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (mid * (mid + <span class="number">1</span>) / <span class="number">2</span> &lt;= n) low = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> low<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="442-数组中重复的数据（回到目录）"><a href="#442-数组中重复的数据（回到目录）" class="headerlink" title="442 数组中重复的数据（回到目录）"></a>442 数组中重复的数据（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个整数数组 a，其中1 ≤ a[i] ≤ n （n为数组长度）, 其中有些元素出现两次而其他元素出现一次。找到所有出现两次的元素。</p>
<p>你可以不用到任何额外空间并在O(n)时间复杂度内解决这个问题吗？</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入:</div><div class="line">[4,3,2,7,8,2,3,1]</div><div class="line"></div><div class="line">输出:</div><div class="line">[2,3]</div></pre></td></tr></table></figure></p>
<p>使用正负替换法，由于数组中的数字都是在[1，n]区间内，所以，可以数组的元素可以转化成index,将访问过的元素取相反数。如果再次遇到这个数（此时必然是负数了），则将它加入result数组。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findDuplicates(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> index=<span class="built_in">abs</span>(nums[i])<span class="number">-1</span>;</div><div class="line">            <span class="keyword">if</span>(nums[index]&lt;<span class="number">0</span>) res.push_back(<span class="built_in">abs</span>(nums[i]));</div><div class="line">            nums[index]=-nums[index];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="461-汉明距离（回到目录）"><a href="#461-汉明距离（回到目录）" class="headerlink" title="461 汉明距离（回到目录）"></a>461 汉明距离（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。给出两个整数 x 和 y，计算它们之间的汉明距离。</p>
<p>注意：<br>0 ≤ x, y &lt; 231.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入: x = 1, y = 4</div><div class="line"></div><div class="line">输出: 2</div><div class="line"></div><div class="line">解释:</div><div class="line">1   (0 0 0 1)</div><div class="line">4   (0 1 0 0)</div><div class="line">       ↑   ↑</div><div class="line"></div><div class="line">上面的箭头指出了对应二进制位不同的位置。</div></pre></td></tr></table></figure></p>
<p><strong>分析</strong>：只要将x和y的二进制形式的每一位取出来按位异或，若为1，则res++,最后的res就是汉明距离。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(x&amp;(<span class="number">1</span>&lt;&lt;i)^(y&amp;(<span class="number">1</span>&lt;&lt;i)))</div><div class="line">            &#123;</div><div class="line">                res++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="526-优美的排列（回到目录）"><a href="#526-优美的排列（回到目录）" class="headerlink" title="526 优美的排列（回到目录）"></a>526 优美的排列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>假设有从 1 到 N 的 N 个整数，如果从这N个数字中成功构造出一个数组，使得数组的第 i 位 (1 &lt;= i &lt;= N) 满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。</p>
<p>条件：<br>第 i 位的数字能被 i 整除<br>i 能被第 i 位上的数字整除<br>现在给定一个整数 N，请问可以构造多少个优美的排列？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例1:</div><div class="line"></div><div class="line">输入: 2</div><div class="line">输出: 2</div><div class="line">解释: </div><div class="line"></div><div class="line">第 1 个优美的排列是 [1, 2]:</div><div class="line">  第 1 个位置（i=1）上的数字是1，1能被 i（i=1）整除</div><div class="line">  第 2 个位置（i=2）上的数字是2，2能被 i（i=2）整除</div><div class="line"></div><div class="line">第 2 个优美的排列是 [2, 1]:</div><div class="line">  第 1 个位置（i=1）上的数字是2，2能被 i（i=1）整除</div><div class="line">  第 2 个位置（i=2）上的数字是1，i（i=2）能被 1 整除</div></pre></td></tr></table></figure></p>
<p>说明:<br>N 是一个正整数，并且不会超过15。</p>
<p>分析：<br>这道题给了我们1到N，总共N个正数，然后定义了一种优美排列方式，对于该排列中的所有数，如果数字可以整除下标，或者下标可以整除数字，那么我们就是优美排列，让我们求出所有优美排列的个数。那么对于求种类个数，或者是求所有情况，这种问题通常要用递归来做。而递归方法等难点在于写递归函数，如何确定终止条件，还有for循环中变量的起始位置如何确定。那么这里我们需要一个visited数组来记录数字是否已经访问过，因为优美排列中不能有重复数字。我们用变量pos来标记已经生成的数字的个数，如果大于N了，说明已经找到了一组排列，结果res自增1。在for循环中，i应该从1开始，因为我们遍历1到N中的所有数字，如果该数字未被使用过，且满足和坐标之间的整除关系，那么我们标记该数字已被访问过，再调用下一个位置的递归函数，之后不要忘记了恢复初始状态。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//递归方法</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countArrangement</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visited(N + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        dfs(N, visited, <span class="number">1</span>, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; visited, <span class="keyword">int</span> pos, <span class="keyword">int</span>&amp; res)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (pos &gt; N) &#123;</div><div class="line">            ++res; </div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//for里面的代码是指某个数字都放在每个位置一次</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">0</span> &amp;&amp; (i % pos == <span class="number">0</span> || pos % i == <span class="number">0</span>)) &#123;</div><div class="line">                visited[i] = <span class="number">1</span>;</div><div class="line">                dfs(N, visited, pos + <span class="number">1</span>, res);</div><div class="line">                visited[i] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="667-优美的排列-II（回到目录）"><a href="#667-优美的排列-II（回到目录）" class="headerlink" title="667 优美的排列 II（回到目录）"></a>667 优美的排列 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>定两个整数 n 和 k，你需要实现一个数组，这个数组包含从 1 到 n 的 n 个不同整数，同时满足以下条件：</p>
<p>① 如果这个数组是 [a1, a2, a3, … , an] ，那么数组 [|a1 - a2|, |a2 - a3|, |a3 - a4|, … , |an-1 - an|] 中应该有且仅有 k 个不同整数；.</p>
<p>② 如果存在多种答案，你只需实现并返回其中任意一种.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: n = 3, k = 1</div><div class="line">输出: [1, 2, 3]</div><div class="line">解释: [1, 2, 3] 包含 3 个范围在 1-3 的不同整数， 并且 [1, 1] 中有且仅有 1 个不同整数 : 1</div><div class="line"> </div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: n = 3, k = 2</div><div class="line">输出: [1, 3, 2]</div><div class="line">解释: [1, 3, 2] 包含 3 个范围在 1-3 的不同整数， 并且 [2, 1] 中有且仅有 2 个不同整数: 1 和 2</div></pre></td></tr></table></figure></p>
<p>提示:<br> n 和 k 满足条件 1 &lt;= k &lt; n &lt;= 104.</p>
<p> 分析：这题的意思是给出1到n的不同整数，求k种不同相邻数的绝对值差值情况下的排列（任意一种即可）。<br>其实，k的最大值是n-1，使用最小最大相邻就可以了。</p>
<ul>
<li>如果给出n=4,k=2,则ans=[4,1,2,3]，也就是说，把最大数放在最小数之前，k自动减1，当k减到1时，之后的数按升序排列，就是两种排法了。</li>
<li><p>如果给出n=4,k=3,则ans=[1,4,2,3],把最大数依次插入在最小的数之后，当k减到1时，之后的数依次按升序排列。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; constructArray(<span class="keyword">int</span> n, <span class="keyword">int</span> k) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">1</span>,j=n;</div><div class="line">        <span class="keyword">while</span>(i&lt;=j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(k&gt;<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(k%<span class="number">2</span>)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(i);</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    res.push_back(j);</div><div class="line">                    j--;</div><div class="line">                &#125;</div><div class="line">                k--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                res.push_back(i);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>简化版的代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; constructArray(int n, int k) &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        int i = 1, j = n;</div><div class="line">        while (i &lt;= j) &#123;</div><div class="line">            if (k &gt; 1) res.push_back(k-- % 2 ? i++ : j--);</div><div class="line">            else res.push_back(i++);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="283-移动零（回到目录）"><a href="#283-移动零（回到目录）" class="headerlink" title="283 移动零（回到目录）"></a>283 移动零（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [0,1,0,3,12]</div><div class="line">输出: [1,3,12,0,0]</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>必须在原数组上操作，不能拷贝额外的数组。</li>
<li>尽量减少操作次数。</li>
</ul>
<p><strong>分析</strong>：这道题很简单，使用双指针i和j，同时指向0。其中i用于扫描nums数组的每一个元素，遇到非零的元素，就和nums[j]交换，然后j++。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//双指针</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                swap(nums[i],nums[j]);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="605-种花问题（回到目录）"><a href="#605-种花问题（回到目录）" class="headerlink" title="605 种花问题（回到目录）"></a>605 种花问题（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p>
<p>给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: flowerbed = [1,0,0,0,1], n = 1</div><div class="line">输出: True</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: flowerbed = [1,0,0,0,1], n = 2</div><div class="line">输出: False</div></pre></td></tr></table></figure></p>
<p>注意:数组内已种好的花不会违反种植规则。<br>输入的数组长度范围为 [1, 20000]。<br>n 是非负整数，且不会超过输入数组的大小。</p>
<p><strong>分析</strong>：对于连续的0来说，主要是考虑边界问题。例如000，如果是放在边界，则101，即种2盆花；如果两边是1，就只能放1盆(010)。所以这里有个技巧是，若两边是0，则直接插入一个0，这样，原来的边界处就可以放心的种花了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; flowerbed, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(flowerbed[<span class="number">0</span>]==<span class="number">0</span>) flowerbed.insert(flowerbed.begin(),<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(flowerbed.back()==<span class="number">0</span>) flowerbed.push_back(<span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> len=flowerbed.size();</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>,sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i&lt;len &amp;&amp; flowerbed[i]==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                sum +=(cnt<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line">                cnt=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum&gt;=n;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="643-子数组最大平均数-I（回到目录）"><a href="#643-子数组最大平均数-I（回到目录）" class="headerlink" title="643 子数组最大平均数 I（回到目录）"></a>643 子数组最大平均数 I（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定 n 个整数，找出平均数最大且长度为 k 的连续子数组，并输出该最大平均数。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [1,12,-5,-6,50,3], k = 4</div><div class="line">输出: 12.75</div><div class="line">解释: 最大平均数 (12-5-6+50)/4 = 51/4 = 12.75</div></pre></td></tr></table></figure></p>
<p>注意:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 &lt;= k &lt;= n &lt;= 30,000。</div><div class="line">所给数据范围 [-10,000，10,000]。</div></pre></td></tr></table></figure></p>
<p><strong>分析</strong>：这道题，我的思路比较暴力，直接计算每个k元组元素的和，计算出最大的那个。然后得到平均数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMaxAverage</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(len,<span class="number">0</span>);</div><div class="line">        sum[<span class="number">0</span>]=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            sum[i]=sum[i<span class="number">-1</span>]+nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> max_sum=sum[k<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">double</span> temp=sum[i]-sum[i-k];</div><div class="line">            max_sum=max(temp,max_sum);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_sum/k;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="665-非递减数列（回到目录）"><a href="#665-非递减数列（回到目录）" class="headerlink" title="665 非递减数列（回到目录）"></a>665 非递减数列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个长度为 n 的整数数组，你的任务是判断在最多改变 1 个元素的情况下，该数组能否变成一个非递减数列。</p>
<p>我们是这样定义一个非递减数列的： 对于数组中所有的 i (1 &lt;= i &lt; n)，满足 array[i] &lt;= array[i + 1]。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [4,2,3]</div><div class="line">输出: True</div><div class="line">解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [4,2,1]</div><div class="line">输出: False</div><div class="line">解释: 你不能在只改变一个元素的情况下将其变为非递减数列。</div></pre></td></tr></table></figure></p>
<p>说明:  n 的范围为 [1, 10,000]。<br><strong>分析</strong>：这道题给了我们一个数组，说我们最多有1次修改某个数字的机会，问能不能将数组变为非递减数组。题目中给的例子太少，不能覆盖所有情况，我们再来看下面三个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">4，2，3</div><div class="line"></div><div class="line">-1，4，2，3</div><div class="line"></div><div class="line">2，3，3，2，4</div></pre></td></tr></table></figure></p>
<p>我们通过分析上面三个例子可以发现，当我们发现后面的数字小于前面的数字产生冲突后，有时候需要修改前面较大的数字(比如前两个例子需要修改4)，有时候却要修改后面较小的那个数字(比如前第三个例子需要修改2)，那么有什么内在规律吗？是有的，判断修改那个数字其实跟再前面一个数的大小有关系，首先如果再前面的数不存在，比如例子1，4前面没有数字了，我们直接修改前面的数字为当前的数字2即可。而当再前面的数字存在，并且小于当前数时，比如例子2，-1小于2，我们还是需要修改前面的数字4为当前数字2；如果再前面的数大于当前数，比如例子3，3大于2，我们需要修改当前数2为前面的数3。这是修改的情况，由于我们只有一次修改的机会，所以用一个变量cnt，初始化为1，修改数字后cnt自减1，当下次再需要修改时，如果cnt已经为0了，直接返回false。遍历结束后返回true。</p>
<p><strong>修改的原则</strong>：尽量使把数字往小的改。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkPossibility</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[i<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(cnt==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                <span class="keyword">if</span>(i==<span class="number">1</span> || nums[i]&gt;=nums[i<span class="number">-2</span>]) nums[i<span class="number">-1</span>]=nums[i];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    nums[i]=nums[i<span class="number">-1</span>];</div><div class="line">                &#125;</div><div class="line">                cnt--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="131-分割回文串（回到目录）"><a href="#131-分割回文串（回到目录）" class="headerlink" title="131 分割回文串（回到目录）"></a>131 分割回文串（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</p>
<p>返回 s 所有可能的分割方案。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: &quot;aab&quot;</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [&quot;aa&quot;,&quot;b&quot;],</div><div class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>这是一道需要用DFS来解的题目，既然题目要求找到所有可能拆分成回文数的情况，那么肯定是所有的情况都要遍历到，对于每一个子字符串都要分别判断一次是不是回文数，那么肯定有一个判断回文数的子函数，还需要一个DFS函数用来递归，再加上原本的这个函数，总共需要三个函数来求解。代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//循环里有递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; partition(<span class="built_in">string</span> s) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; out;</div><div class="line">        partitionDFS(s, <span class="number">0</span>, out, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">partitionDFS</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> start, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;out, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; &amp;res)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start == s.size()) &#123;</div><div class="line">            res.push_back(out);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.size(); ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (isPalindrome(s, start, i)) &#123;</div><div class="line">                out.push_back(s.substr(start, i - start + <span class="number">1</span>));</div><div class="line">                partitionDFS(s, i + <span class="number">1</span>, out, res);</div><div class="line">                out.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (s[start] != s[end]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            ++start;</div><div class="line">            --end;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>注</strong>：那么，对原字符串的所有子字符串的访问顺序是什么呢，如果原字符串是 abcd, 那么访问顺序为:<code>a -&gt; b -&gt; c -&gt; d -&gt; cd -&gt; bc -&gt; bcd-&gt; ab -&gt; abc -&gt; abcd</code>, 这是对于没有两个或两个以上子回文串的情况。那么假如原字符串是<code>aabc</code>，那么访问顺序为：<code>a -&gt; a -&gt; b -&gt; c -&gt; bc -&gt; ab -&gt; abc -&gt; aa -&gt; b -&gt; c -&gt; bc -&gt; aab -&gt; aabc</code>，中间当检测到aa时候，发现是回文串，那么对于剩下的bc当做一个新串来检测，于是有<code>b -&gt; c -&gt; bc</code>，这样扫描了所有情况，即可得出最终答案。</p>
<h1 id="股票问题"><a href="#股票问题" class="headerlink" title="股票问题"></a>股票问题</h1><h2 id="121-买卖股票的最佳时机（回到目录）"><a href="#121-买卖股票的最佳时机（回到目录）" class="headerlink" title="121 买卖股票的最佳时机（回到目录）"></a>121 买卖股票的最佳时机（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 5</div><div class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</div><div class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div><div class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</div></pre></td></tr></table></figure></p>
<p>引入两个变量，最小买入价格和最大利润，遍历数组，判断最大和最小值来得到最后的结果。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">        vector&lt;pair&lt;int&gt; &gt; stock;</div><div class="line">        for(int i=1;i&lt;=prices.size();i++)</div><div class="line">        &#123;</div><div class="line">            stock.push_back(make_pair(i,prices[i]));</div><div class="line">        &#125;</div><div class="line">        */</div><div class="line">        <span class="keyword">if</span>(prices.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> max_pro=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp_min=prices[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> len=prices.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            temp_min=min(temp_min,prices[i]);</div><div class="line">            max_pro=max(max_pro,prices[i]-temp_min);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_pro;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="122-买卖股票的最佳时机-II（回到目录）"><a href="#122-买卖股票的最佳时机-II（回到目录）" class="headerlink" title="122 买卖股票的最佳时机 II（回到目录）"></a>122 买卖股票的最佳时机 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 7</div><div class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</div><div class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1,2,3,4,5]</div><div class="line">输出: 4</div><div class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</div><div class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</div><div class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div><div class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</div></pre></td></tr></table></figure></p>
<p><strong>分析</strong>：炒股想挣钱当然是低价买入高价抛出，那么这里我们只需要从第二天开始，如果当前价格比之前价格高，则把差值加入利润中，因为我们可以昨天买入，今日卖出，若明日价更高的话，还可以今日买入，明日再抛出。以此类推，遍历完整个数组后即可求得最大利润。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=prices.size();</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(prices[i]&lt;prices[i+<span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                res +=prices[i+<span class="number">1</span>]-prices[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>说明</strong>：其他几个股票问题有点难，现在不想做了</p>
<h1 id="516-最长回文子序列（回到目录）"><a href="#516-最长回文子序列（回到目录）" class="headerlink" title="516 最长回文子序列（回到目录）"></a>516 最长回文子序列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串s，找到其中最长的回文子序列。可以假设s的最大长度为1000。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入:&quot;bbbab&quot;</div><div class="line">输出:4</div><div class="line">一个可能的最长回文子序列为 &quot;bbbb&quot;。</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入:&quot;cbbd&quot;</div><div class="line">输出:2</div><div class="line">一个可能的最长回文子序列为 &quot;bb&quot;。</div></pre></td></tr></table></figure></p>
<p>这道题给了我们一个字符串，让我们求最大的回文子序列，子序列和子字符串不同，不需要连续。而关于回文串的题之前也做了不少，处理方法上就是老老实实的两两比较吧。像这种有关极值的问题，最应该优先考虑的就是贪婪算法和动态规划，这道题显然使用DP更加合适。我们建立一个二维的DP数组，其中dp[i][j]表示[i,j]区间内的字符串的最长回文子序列，那么对于递推公式我们分析一下，如果s[i]==s[j]，那么i和j就可以增加2个回文串的长度，我们知道中间dp[i + 1][j - 1]的值，那么其加上2就是dp[i][j]的值。如果s[i] != s[j]，那么我们可以去掉i或j其中的一个字符，然后比较两种情况下所剩的字符串谁dp值大，就赋给dp[i][j]，那么递推公式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">              /  dp[i + 1][j - 1] + 2                       if (s[i] == s[j])</div><div class="line"></div><div class="line">dp[i][j] =</div><div class="line"></div><div class="line">              \  max(dp[i + 1][j], dp[i][j - 1])        if (s[i] != s[j])</div></pre></td></tr></table></figure></p>
<details><summary><b>代码</b></summary><br><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//动态规划</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            dp[i][i] = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)             <span class="comment">// 子串结束位置</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j<span class="number">-1</span>; i &gt;=<span class="number">0</span>; i--) &#123;     <span class="comment">// 子串开始位置</span></div><div class="line">                <span class="keyword">if</span> (s[i] == s[j])</div><div class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br><br></details>

<h1 id="74-搜索二维矩阵"><a href="#74-搜索二维矩阵" class="headerlink" title="74 搜索二维矩阵"></a>74 搜索二维矩阵</h1><p>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p>
<p>每行中的整数从左到右按升序排列。<br>每行的第一个整数大于前一行的最后一个整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入:</div><div class="line">matrix = [</div><div class="line">  [1,   3,  5,  7],</div><div class="line">  [10, 11, 16, 20],</div><div class="line">  [23, 30, 34, 50]</div><div class="line">]</div><div class="line">target = 3</div><div class="line">输出: true</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入:</div><div class="line">matrix = [</div><div class="line">  [1,   3,  5,  7],</div><div class="line">  [10, 11, 16, 20],</div><div class="line">  [23, 30, 34, 50]</div><div class="line">]</div><div class="line">target = 13</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>这段代码里用到了两次二分查找，两次查找的代码模板不一样。</strong><br>这道题要求搜索一个二维矩阵，由于给的矩阵是有序的，所以很自然的想到要用二分查找法，我们可以在第一列上先用一次二分查找法找到目标值所在的行的位置，然后在该行上再用一次二分查找法来找是否存在目标值，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 二分查找法</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;matrix, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (matrix.empty() || matrix[<span class="number">0</span>].empty()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (target &lt; matrix[<span class="number">0</span>][<span class="number">0</span>] || target &gt; matrix.back().back()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = matrix.size();</div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] == target) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tmp = right<span class="number">-1</span>;</div><div class="line">        </div><div class="line">        left = <span class="number">0</span>;</div><div class="line">        right = matrix[tmp].size() - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (matrix[tmp][mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (matrix[tmp][mid] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="240-搜索二维矩阵-II"><a href="#240-搜索二维矩阵-II" class="headerlink" title="240 搜索二维矩阵 II"></a>240 搜索二维矩阵 II</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p>
<p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">现有矩阵 matrix 如下：</div><div class="line"></div><div class="line">[</div><div class="line">  [1,   4,  7, 11, 15],</div><div class="line">  [2,   5,  8, 12, 19],</div><div class="line">  [3,   6,  9, 16, 22],</div><div class="line">  [10, 13, 14, 17, 24],</div><div class="line">  [18, 21, 23, 26, 30]</div><div class="line">]</div><div class="line">给定 target = 5，返回 true。</div><div class="line"></div><div class="line">给定 target = 20，返回 false。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(matrix.size()==<span class="number">0</span> || matrix[<span class="number">0</span>].size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> m=matrix.size()<span class="number">-1</span>,n=matrix[<span class="number">0</span>].size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span>(target&lt;matrix[<span class="number">0</span>][<span class="number">0</span>] || target&gt;matrix[m][n]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> x=m,y=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(target&gt;matrix[x][y]) y++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;matrix[x][y]) x--;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&gt;n) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="107-二叉树的层次遍历-II"><a href="#107-二叉树的层次遍历-II" class="headerlink" title="107 二叉树的层次遍历 II"></a>107 二叉树的层次遍历 II</h1><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">例如：</div><div class="line">给定二叉树 [3,9,20,null,null,15,7],</div><div class="line"></div><div class="line">    3</div><div class="line">   / \</div><div class="line">  9  20</div><div class="line">    /  \</div><div class="line">   15   7</div><div class="line">返回其自底向上的层次遍历为：</div><div class="line"></div><div class="line">[</div><div class="line">  [15,7],</div><div class="line">  [9,20],</div><div class="line">  [3]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>递归方式</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrderBottom(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        recursive(<span class="number">0</span>,res,root);</div><div class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; (res.rbegin(),res.rend());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> level,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,TreeNode* root)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(level==res.size()) res.push_back(&#123;&#125;);</div><div class="line">        res[level].push_back(root-&gt;val);</div><div class="line">        recursive(level+<span class="number">1</span>,res,root-&gt;left);</div><div class="line">        recursive(level+<span class="number">1</span>,res,root-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代方式</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrderBottom(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        <span class="keyword">while</span>(!q.empty())</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; level;</div><div class="line">            TreeNode* node=<span class="literal">NULL</span>;</div><div class="line">            <span class="keyword">int</span> len=q.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">            &#123;</div><div class="line">                node=q.front();</div><div class="line">                level.push_back(node-&gt;val);</div><div class="line">                q.pop();</div><div class="line">                <span class="keyword">if</span>(node-&gt;left) q.push(node-&gt;left);</div><div class="line">                <span class="keyword">if</span>(node-&gt;right) q.push(node-&gt;right);</div><div class="line">            &#125;</div><div class="line">            res.insert(res.begin(),level);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344 反转字符串"></a>344 反转字符串</h1><p>编写一个函数，其作用是将输入的字符串反转过来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: &quot;hello&quot;</div><div class="line">输出: &quot;olleh&quot;</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</div><div class="line">输出: &quot;amanaP :lanac a ,nalp a ,nam A&quot;</div></pre></td></tr></table></figure></p>
<p><strong>我的解法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    string reverseString(string s) </div><div class="line">    &#123;</div><div class="line">        string res;</div><div class="line">        for(int i=s.size()-1;i&gt;=0;i--)</div><div class="line">        &#123;</div><div class="line">            res.push_back(s[i]);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>参考解法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    string reverseString(string s) </div><div class="line">    &#123;</div><div class="line">        int i=0,j=s.size()-1;</div><div class="line">        while(i&lt;j)</div><div class="line">        &#123;</div><div class="line">            swap(s[i++],s[j--]);</div><div class="line">        &#125;</div><div class="line">        return s;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349 两个数组的交集"></a>349 两个数组的交集</h1><p>给定两个数组，编写一个函数来计算它们的交集。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: nums1 = [1,2,2,1], nums2 = [2,2]</div><div class="line">输出: [2]</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</div><div class="line">输出: [9,4]</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>输出结果中的每个元素一定是唯一的。</li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<p><strong>method1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersection(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums1.empty() || nums2.empty()) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ();</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s(nums1.begin(),nums1.end()),res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s.count(num))</div><div class="line">            &#123;</div><div class="line">                res.insert(num);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(res.begin(),res.end());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>method2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersection(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums1.empty() || nums2.empty()) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ();</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">        sort(nums1.begin(),nums1.end());</div><div class="line">        sort(nums2.begin(),nums2.end());</div><div class="line">        <span class="keyword">while</span>(i&lt; nums1.size() &amp;&amp; j&lt;nums2.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums1[i]==nums2[j])</div><div class="line">            &#123;</div><div class="line">                res.insert(nums1[i]);</div><div class="line">                i++;j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums1[i]&lt;nums2[j])</div><div class="line">            &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (res.begin(),res.end());</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<h1 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350 两个数组的交集 II"></a>350 两个数组的交集 II</h1><p>给定两个数组，编写一个函数来计算它们的交集。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: nums1 = [1,2,2,1], nums2 = [2,2]</div><div class="line">输出: [2,2]</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</div><div class="line">输出: [4,9]</div><div class="line">说明：</div><div class="line"></div><div class="line">输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</div><div class="line">我们可以不考虑输出结果的顺序。</div></pre></td></tr></table></figure></p>
<p>进阶:</p>
<ul>
<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>
<li>如果 nums1 的大小比 nums2 小很多，哪种方法更优？</li>
<li>如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>
</ul>
<p><strong>解法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersect(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> a : nums1) ++m[a];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> a : nums2) &#123;</div><div class="line">            <span class="keyword">if</span> (m[a]-- &gt; <span class="number">0</span>) res.push_back(a);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>解法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersect(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        sort(nums1.begin(), nums1.end());</div><div class="line">        sort(nums2.begin(), nums2.end());</div><div class="line">        <span class="keyword">while</span> (i &lt; nums1.size() &amp;&amp; j &lt; nums2.size()) &#123;</div><div class="line">            <span class="keyword">if</span> (nums1[i] == nums2[j]) &#123;</div><div class="line">                res.push_back(nums1[i]);</div><div class="line">                ++i; ++j;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</div><div class="line">                ++j;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ++i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="788-旋转数字"><a href="#788-旋转数字" class="headerlink" title="788 旋转数字"></a>788 旋转数字</h1><p>我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。</p>
<p>如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。</p>
<p>现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line">输入: 10</div><div class="line">输出: 4</div><div class="line">解释: </div><div class="line">在[1, 10]中有四个好数： 2, 5, 6, 9。</div><div class="line">注意 1 和 10 不是好数, 因为他们在旋转之后不变。</div><div class="line">注意:</div></pre></td></tr></table></figure></p>
<p>N 的取值范围是 [1, 10000]。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rotatedDigits</span><span class="params">(<span class="keyword">int</span> N)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(check(i))</div><div class="line">            &#123;</div><div class="line">                res++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> str=to_string(n);</div><div class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c:str)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(c==<span class="string">'3'</span> || c==<span class="string">'4'</span> || c==<span class="string">'7'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">if</span>(c==<span class="string">'2'</span> || c==<span class="string">'5'</span> || c==<span class="string">'6'</span> || c==<span class="string">'9'</span>) flag=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="796-旋转字符串"><a href="#796-旋转字符串" class="headerlink" title="796 旋转字符串"></a>796 旋转字符串</h1><p>给定两个字符串, A 和 B。</p>
<p>A 的旋转操作就是将 A 最左边的字符移动到最右边。 例如, 若 A = ‘abcde’，在移动一次之后结果就是’bcdea’ 。如果在若干次旋转操作之后，A 能变成B，那么返回True。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: A = &apos;abcde&apos;, B = &apos;cdeab&apos;</div><div class="line">输出: true</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: A = &apos;abcde&apos;, B = &apos;abced&apos;</div><div class="line">输出: false</div><div class="line">注意：</div></pre></td></tr></table></figure></p>
<p>A 和 B 长度不超过 100。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">rotateString</span><span class="params">(<span class="built_in">string</span> A, <span class="built_in">string</span> B)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(A.size()==<span class="number">0</span> &amp;&amp; B.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(A.size()!=B.size()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(A.substr(i,A.size()-i)+A.substr(<span class="number">0</span>,i) == B) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="804-唯一摩尔斯密码词"><a href="#804-唯一摩尔斯密码词" class="headerlink" title="804 唯一摩尔斯密码词"></a>804 唯一摩尔斯密码词</h1><p>国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: “a” 对应 “.-“, “b” 对应 “-…”, “c” 对应 “-.-.”, 等等。</p>
<p>为了方便，所有26个英文字母对应摩尔斯密码表如下：</p>
<p><code>[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</code></p>
<p>给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，”cab” 可以写成 “-.-.-….-“，(即 “-.-.” + “-…” + “.-“字符串的结合)。我们将这样一个连接过程称作单词翻译。</p>
<p>返回我们可以获得所有词不同单词翻译的数量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">例如:</div><div class="line">输入: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</div><div class="line">输出: 2</div><div class="line">解释: </div><div class="line">各单词翻译如下:</div><div class="line">&quot;gin&quot; -&gt; &quot;--...-.&quot;</div><div class="line">&quot;zen&quot; -&gt; &quot;--...-.&quot;</div><div class="line">&quot;gig&quot; -&gt; &quot;--...--.&quot;</div><div class="line">&quot;msg&quot; -&gt; &quot;--...--.&quot;</div><div class="line"></div><div class="line">共有 2 种不同翻译, &quot;--...-.&quot; 和 &quot;--...--.&quot;.</div></pre></td></tr></table></figure></p>
<p>注意:</p>
<ul>
<li>单词列表words 的长度不会超过 100。</li>
<li>每个单词 words[i]的长度范围为 [1, 12]。</li>
<li>每个单词 words[i]只包含小写字母。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniqueMorseRepresentations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; morse&#123;<span class="string">".-"</span>,<span class="string">"-..."</span>,<span class="string">"-.-."</span>,<span class="string">"-.."</span>,<span class="string">"."</span>,<span class="string">"..-."</span>,<span class="string">"--."</span>,<span class="string">"...."</span>,<span class="string">".."</span>,<span class="string">".---"</span>,<span class="string">"-.-"</span>,<span class="string">".-.."</span>,<span class="string">"--"</span>,<span class="string">"-."</span>,<span class="string">"---"</span>,<span class="string">".--."</span>,<span class="string">"--.-"</span>,<span class="string">".-."</span>,<span class="string">"..."</span>,<span class="string">"-"</span>,<span class="string">"..-"</span>,<span class="string">"...-"</span>,<span class="string">".--"</span>,<span class="string">"-..-"</span>,<span class="string">"-.--"</span>,<span class="string">"--.."</span>&#125;;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> word:words)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">string</span> temp=<span class="string">""</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c:word)</div><div class="line">            &#123;</div><div class="line">                temp=temp+morse[c-<span class="string">'a'</span>];</div><div class="line">            &#125;</div><div class="line">            res.insert(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.size();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="371-两整数之和"><a href="#371-两整数之和" class="headerlink" title="371 两整数之和"></a>371 两整数之和</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>不使用运算符 + 和-，计算两整数a 、b之和。</p>
<p>示例：<br>若 a = 1 ，b = 2，返回 3。</p>
<p><strong>使用位运算的方法</strong>：我们在做加法运算的时候，每位相加之后可能会有进位Carry产生，然后在下一位计算时需要加上进位一起运算，那么我们能不能将两部分拆开呢，我们来看一个例子759+674</p>
<ol>
<li><p>如果我们不考虑进位，可以得到323</p>
</li>
<li><p>如果我们只考虑进位，可以得到1110</p>
</li>
<li><p>我们把上面两个数字假期323+1110=1433就是最终结果了</p>
</li>
</ol>
<p>然后我们进一步分析，如果得到上面的第一第二种情况，我们在二进制下来看，不考虑进位的加，<code>0+0=0， 0+1=1, 1+0=1， 1+1=0</code>，这就是异或的运算规则，如果只考虑进位的加<code>0+0=0, 0+1=0, 1+0=0, 1+1=1</code>，而这其实这就是与的运算，而第三步在将两者相加时，我们再递归调用这个算法，终止条件是当进位为0时，我们直接返回第一步的结果，参见代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</div><div class="line">        <span class="keyword">int</span> sum=a^b;</div><div class="line">        <span class="keyword">int</span> carry=(a&amp;b)&lt;&lt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> getSum(sum,carry);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代法</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (b) &#123;</div><div class="line">            <span class="keyword">int</span> carry = (a &amp; b) &lt;&lt; <span class="number">1</span>;</div><div class="line">            a = a ^ b;</div><div class="line">            b = carry;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="172-阶乘后的零"><a href="#172-阶乘后的零" class="headerlink" title="172 阶乘后的零"></a>172 阶乘后的零</h1><p>给定一个整数 n，返回 n! 结果尾数中零的数量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 3</div><div class="line">输出: 0</div><div class="line">解释: 3! = 6, 尾数中没有零。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 5</div><div class="line">输出: 1</div><div class="line">解释: 5! = 120, 尾数中有 1 个零.</div></pre></td></tr></table></figure></p>
<p>说明: 你算法的时间复杂度应为 O(log n) 。<br><strong>分析</strong>：这道题是求一个数的阶乘末尾0的个数，也就是要找乘数中10的个数，而10可分解为2和5，而我们可知2的数量又远大于5的数量，那么此题只需要找出5的个数。仍需注意的一点就是，像25,125，这样的不只含有一个5的数字需要考虑进去。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n)</div><div class="line">        &#123;</div><div class="line">            res +=n/<span class="number">5</span>;</div><div class="line">            n=n/<span class="number">5</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235 二叉搜索树的最近公共祖先"></a>235 二叉搜索树的最近公共祖先</h1><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</div><div class="line"></div><div class="line">        _______6______</div><div class="line">       /              \</div><div class="line">    ___2__          ___8__</div><div class="line">   /      \        /      \</div><div class="line">   0      _4       7       9</div><div class="line">         /  \</div><div class="line">         3   5</div><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</div><div class="line">输出: 6 </div><div class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4</div><div class="line">输出: 2</div><div class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>所有节点的值都是唯一的。</li>
<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span></div><div class="line">    &#123;</div><div class="line">        TreeNode* res=<span class="literal">NULL</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; path;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; path_p;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; path_q;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</div><div class="line">        preorder(root,p,path,path_p,flag);</div><div class="line">        path.clear();</div><div class="line">        flag=<span class="number">0</span>;</div><div class="line">        preorder(root,q,path,path_q,flag);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> min_length=min(path_p.size(),path_q.size());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;min_length;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(path_p[i]==path_q[i])<span class="comment">//妈的，一开始这行代码多了一个;不报语法错！！！</span></div><div class="line">            &#123;</div><div class="line">                res=path_p[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root,TreeNode* node,<span class="built_in">vector</span>&lt;TreeNode*&gt; &amp;path,<span class="built_in">vector</span>&lt;TreeNode*&gt; &amp;res,<span class="keyword">int</span> flag)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//vector&lt;TreeNode*&gt; path;//不能把path放在这里，要从外面传进来</span></div><div class="line">        <span class="comment">//int flag=0;//这个变量也是，要从外面进来</span></div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span> || flag) <span class="keyword">return</span>;</div><div class="line">        path.push_back(root);</div><div class="line">        <span class="keyword">if</span>(root==node) </div><div class="line">        &#123;</div><div class="line">            res=path;</div><div class="line">            flag=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        preorder(root-&gt;left,node,path,res,flag);</div><div class="line">        preorder(root-&gt;right,node,path,res,flag);</div><div class="line">        path.pop_back();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236 二叉树的最近公共祖先"></a>236 二叉树的最近公共祖先</h1><p><strong>代码同235</strong></p>
<h1 id="661-图片平滑器"><a href="#661-图片平滑器" class="headerlink" title="661 图片平滑器"></a>661 图片平滑器</h1><p>包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均灰度 (向下舍入) ，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八个，则尽可能多的利用它们。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">[[1,1,1],</div><div class="line"> [1,0,1],</div><div class="line"> [1,1,1]]</div><div class="line">输出:</div><div class="line">[[0, 0, 0],</div><div class="line"> [0, 0, 0],</div><div class="line"> [0, 0, 0]]</div><div class="line">解释:</div><div class="line">对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0</div><div class="line">对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0</div><div class="line">对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0</div></pre></td></tr></table></figure></p>
<p>注意:</p>
<ul>
<li>给定矩阵中的整数范围为 [0, 255]。</li>
<li>矩阵的长和宽的范围均为 [1, 150]。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; imageSmoother(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; M) </div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">if</span>(M.size()==<span class="number">0</span> || M[<span class="number">0</span>].size()==<span class="number">0</span>) <span class="keyword">return</span> M;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dirs=&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</div><div class="line">        <span class="keyword">int</span> m=M.size();</div><div class="line">        <span class="keyword">int</span> n=M[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sum=M[i][j];</div><div class="line">                <span class="keyword">int</span> cnt=<span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> dir:dirs)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> x=i+dir[<span class="number">0</span>];</div><div class="line">                    <span class="keyword">int</span> y=j+dir[<span class="number">1</span>];</div><div class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=m || y&lt;<span class="number">0</span> || y&gt;=n) <span class="keyword">continue</span>;</div><div class="line">                    cnt++;</div><div class="line">                    sum=sum+M[x][y];</div><div class="line">                &#125;</div><div class="line">                res[i][j]=sum/cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217 存在重复元素"></a>217 存在重复元素</h1><p>给定一个整数数组，判断是否存在重复元素。</p>
<p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [1,2,3,1]</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1,2,3,4]</div><div class="line">输出: false</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: [1,1,1,3,3,4,3,2,4,2]</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p><strong>代码</strong>：一看到题目（和 <a href="https://winper001.github.io/2018/08/27/leetcode%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/#389-%E6%89%BE%E4%B8%8D%E5%90%8C">389 找不同</a> 类似的思路）就写出来了代码，我的思路非常简单。使用map记录每个元素出现的次数，然后每个元素的次数都-1，再判断该元素的次数是否&gt;0，若是，则返回true。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            m[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(--m[nums[i]] &gt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="219-存在重复元素-II"><a href="#219-存在重复元素-II" class="headerlink" title="219 存在重复元素 II"></a>219 存在重复元素 II</h1><p>给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: nums = [1,2,3,1], k = 3</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: nums = [1,0,1,1], k = 1</div><div class="line">输出: true</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: nums = [1,2,3,1,2,3], k = 2</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p>首先定义一个pair的vector,目的是绑定元素和它对应的index,r然后进行元素大小排列，先判断两个元素相等时候，index之差是否&lt;=k，如果是，就返回true.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;a,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;b)</span><span class="comment">//cmp函数应该定义在类外面</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a.first&lt;b.first;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;t;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            t.push_back(make_pair(nums[i],i));</div><div class="line">        &#125;</div><div class="line">        sort(t.begin(),t.end(),cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(t[i].first==t[j].first &amp;&amp; j&lt;len)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(t[i].second-t[j].second)&lt;=k)</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="220-存在重复元素-III"><a href="#220-存在重复元素-III" class="headerlink" title="220 存在重复元素 III"></a>220 存在重复元素 III</h1><p>给定一个整数数组，判断数组中是否有两个不同的索引 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值最大为 t，并且 i 和 j 之间的差的绝对值最大为 ķ。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: nums = [1,2,3,1], k = 3, t = 0</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: nums = [1,0,1,1], k = 1, t = 2</div><div class="line">输出: true</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: nums = [1,5,9,1,5,9], k = 2, t = 3</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p>和上一题的代码基本类似<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">long</span>,<span class="keyword">long</span>&gt; &amp;a,pair&lt;<span class="keyword">long</span>,<span class="keyword">long</span>&gt; &amp;b)</span><span class="comment">//cmp函数应该定义在类外面</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a.first&lt;b.first;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k,<span class="keyword">int</span> t)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span>,<span class="keyword">long</span>&gt; &gt;tmp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            tmp.push_back(make_pair(nums[i],i));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"temp: "</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> tt:tmp)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;tt.first;</div><div class="line">        &#125;</div><div class="line">        sort(tmp.begin(),tmp.end(),cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">abs</span>(tmp[i].first-tmp[j].first)&lt;=t &amp;&amp; j&lt;len)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(tmp[i].second-tmp[j].second)&lt;=k)</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="231-2的幂"><a href="#231-2的幂" class="headerlink" title="231 2的幂"></a>231 2的幂</h1><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 1</div><div class="line">输出: true</div><div class="line">解释: 20 = 1</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 16</div><div class="line">输出: true</div><div class="line">解释: 24 = 16</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: 218</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<p><strong>法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n)</div><div class="line">        &#123;</div><div class="line">            cnt=cnt+(n&amp;<span class="number">1</span>);</div><div class="line">            n=n&gt;&gt;<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt==<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>万能法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(n &amp;&amp; n%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            n=n/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="326-3的幂"><a href="#326-3的幂" class="headerlink" title="326 3的幂"></a>326 3的幂</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(n &amp;&amp; n%<span class="number">3</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            n=n/<span class="number">3</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="342-4的幂"><a href="#342-4的幂" class="headerlink" title="342 4的幂"></a>342 4的幂</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(n &amp;&amp; n%<span class="number">4</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            n=n/<span class="number">4</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="237-删除链表中的节点"><a href="#237-删除链表中的节点" class="headerlink" title="237 删除链表中的节点"></a>237 删除链表中的节点</h1><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p>
<p>现有一个链表 – head = [4,5,1,9]，它可以表示为:<br>    <code>4 -&gt; 5 -&gt; 1 -&gt; 9</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: head = [4,5,1,9], node = 5</div><div class="line">输出: [4,1,9]</div><div class="line">解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: head = [4,5,1,9], node = 1</div><div class="line">输出: [4,5,9]</div><div class="line">解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>链表至少包含两个节点。</li>
<li>链表中所有节点的值都是唯一的。</li>
<li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li>
<li>不要从你的函数中返回任何结果。</li>
</ul>
<p>因为题目给的是删除节点，那说明这个节点可以舍弃了，我们把下一个节点的值拷贝给当前要删除的节点，再删除下一个节点。<br>大致过程如下（删除3）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1-&gt;2-&gt;3-&gt;4-&gt;5 </div><div class="line">1-&gt;2-&gt;4-&gt;4-&gt;5 </div><div class="line">1-&gt;2-&gt;4-&gt;5</div></pre></td></tr></table></figure></p>
<p><strong>这题太骚了</strong>：用覆盖的方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span></div><div class="line">    &#123;</div><div class="line">        node-&gt;val=node-&gt;next-&gt;val;</div><div class="line">        ListNode* temp=node-&gt;next;</div><div class="line">        node-&gt;next=temp-&gt;next;</div><div class="line">        <span class="keyword">delete</span> temp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="203-删除链表中的节点"><a href="#203-删除链表中的节点" class="headerlink" title="203 删除链表中的节点"></a>203 删除链表中的节点</h1><p>删除链表中等于给定值 val 的所有节点。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6</div><div class="line">输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</div></pre></td></tr></table></figure></p>
<p>方法1：和上面那题（237）类似的思路，删除目标节点<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        ListNode *dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), *pre = dummy;</div><div class="line">        dummy-&gt;next = head;</div><div class="line">        <span class="keyword">while</span> (pre-&gt;next) &#123;</div><div class="line">            <span class="keyword">if</span> (pre-&gt;next-&gt;val == val) &#123;</div><div class="line">                ListNode *t = pre-&gt;next;</div><div class="line">                pre-&gt;next = t-&gt;next;</div><div class="line">                t-&gt;next = <span class="literal">NULL</span>;</div><div class="line">                <span class="keyword">delete</span> t;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                pre = pre-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dummy-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>经典方法</strong>：跳过目标节点<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span></div><div class="line">    &#123;</div><div class="line">        ListNode* dummy=<span class="keyword">new</span> ListNode(<span class="number">-1</span>);</div><div class="line">        dummy-&gt;next=head;</div><div class="line">        ListNode* pre=dummy;</div><div class="line">        ListNode* cur=pre-&gt;next;</div><div class="line">        <span class="keyword">while</span>(cur)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur-&gt;val!=val)</div><div class="line">            &#123;</div><div class="line">                pre=cur;</div><div class="line">                cur=cur-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                pre-&gt;next=cur-&gt;next;</div><div class="line">                cur=pre-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dummy-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876 链表的中间结点"></a>876 链表的中间结点</h1><p>给定一个带有头结点 head 的非空单链表，返回链表的中间结点。</p>
<p>如果有两个中间结点，则返回第二个中间结点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1：</div><div class="line"></div><div class="line">输入：[1,2,3,4,5]</div><div class="line">输出：此列表中的结点 3 (序列化形式：[3,4,5])</div><div class="line">返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。</div><div class="line">注意，我们返回了一个 ListNode 类型的对象 ans，这样：</div><div class="line">ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.</div><div class="line">示例 2：</div><div class="line"></div><div class="line">输入：[1,2,3,4,5,6]</div><div class="line">输出：此列表中的结点 4 (序列化形式：[4,5,6])</div><div class="line">由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。</div></pre></td></tr></table></figure></p>
<p><strong>代码</strong>:和 <a href="https://winper001.github.io/2018/08/27/leetcode%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/#109-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">109</a>类似的套路<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span> || head-&gt;next==<span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        ListNode* fast=head-&gt;next-&gt;next;</div><div class="line">        ListNode* slow=head;</div><div class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</div><div class="line">        &#123;</div><div class="line">            fast=fast-&gt;next-&gt;next;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> slow-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="205-同构字符串"><a href="#205-同构字符串" class="headerlink" title="205 同构字符串"></a>205 同构字符串</h1><p>给定两个字符串 s 和 t，判断它们是否是同构的。</p>
<p>如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。</p>
<p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: s = &quot;egg&quot;, t = &quot;add&quot;</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: s = &quot;foo&quot;, t = &quot;bar&quot;</div><div class="line">输出: false</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: s = &quot;paper&quot;, t = &quot;title&quot;</div><div class="line">输出: true</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>你可以假设 s 和 t 具有相同的长度。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIsomorphic</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; char_m1;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; char_m2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(char_m1[s[i]]!=char_m2[t[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            char_m1[s[i]]=i+<span class="number">1</span>;<span class="comment">//原来我是char_m1[s[i]]++;这样只能会把“aba”和“aab”认为是同构，实际上这里丢失了位置对应的信息</span></div><div class="line">            char_m2[t[i]]=i+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739. 每日温度"></a>739. 每日温度</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高的天数。如果之后都不会升高，请输入 0 来代替。</p>
<p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p>
<p><strong>提示</strong>：气温 列表长度的范围是 [1, 30000]。每个气温的值的都是 [30, 100] 范围内的整数。</p>
<p><strong>分析</strong>：我的思路很简单，遍历每一个元素，对某一个元素来说，找到第一个大于它的数，此时：如果此时的是小于数组的size的，直接push_back(j-i),否则push 0.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dailyTemperatures(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; temperatures) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temperatures.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(temperatures[j]&lt;=temperatures[i])</div><div class="line">            &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j&lt;temperatures.size())</div><div class="line">            &#123;</div><div class="line">                res.push_back(j-i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                res.push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496 下一个更大元素 I"></a>496 下一个更大元素 I</h1><p>给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。</p>
<p>nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: nums1 = [4,1,2], nums2 = [1,3,4,2].</div><div class="line">输出: [-1,3,-1]</div><div class="line">解释:</div><div class="line">    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。</div><div class="line">    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。</div><div class="line">    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: nums1 = [2,4], nums2 = [1,2,3,4].</div><div class="line">输出: [3,-1]</div><div class="line">解释:</div><div class="line">    对于num1中的数字2，第二个数组中的下一个较大数字是3。</div><div class="line">    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。</div></pre></td></tr></table></figure></p>
<p>注意:</p>
<ul>
<li>nums1和nums2中所有元素是唯一的。</li>
<li>nums1和nums2 的数组大小都不超过1000。</li>
</ul>
<p><strong>和上一题的套路有点像</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nextGreaterElement(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; findNums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(findNums.size(),<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;findNums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(findNums[i]!=nums[j] &amp;&amp; j&lt;nums.size())</div><div class="line">            &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> z=j+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(nums[z]&lt;=nums[j])</div><div class="line">            &#123;</div><div class="line">                z++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(z&lt;nums.size())</div><div class="line">            &#123;</div><div class="line">                res[i]=nums[z];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503 下一个更大元素 II"></a>503 下一个更大元素 II</h1><p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,1]</div><div class="line">输出: [2,-1,2]</div><div class="line">解释: 第一个 1 的下一个更大的数是 2；</div><div class="line">数字 2 找不到下一个更大的数； </div><div class="line">第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</div></pre></td></tr></table></figure></p>
<p>注意: 输入数组的长度不会超过 10000。</p>
<p><strong>分析</strong>：依次遍历每一个元素。由于数组是循环的，所以先从前面往后面找第一个比它大的数字，如果找不到，就要那么就要从头开始找，第一个比它大的数字。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nextGreaterElements(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(nums.size(),<span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(nums[j]&lt;=nums[nums.size()<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j&lt;nums.size()) res[nums.size()<span class="number">-1</span>]=nums[j];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(nums[i]&gt;=nums[j])</div><div class="line">            &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j&lt;nums.size()) res[i]=nums[j];</div><div class="line">            <span class="keyword">else</span><span class="comment">//说明顺着没找到，那么就要从头开始找，第一个比它大的数字</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span>(nums[j]&lt;=nums[i]) j++;</div><div class="line">                <span class="keyword">if</span>(j&lt;nums.size()) res[i]=nums[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="556-下一个更大元素-III"><a href="#556-下一个更大元素-III" class="headerlink" title="556 下一个更大元素 III"></a>556 下一个更大元素 III</h1><p>给定一个32位正整数 n，你需要找到最小的32位整数，其与 n 中存在的位数完全相同，并且其值大于n。如果不存在这样的32位整数，则返回-1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 12</div><div class="line">输出: 21</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 21</div><div class="line">输出: -1</div></pre></td></tr></table></figure></p>
<p>这道题给了我们一个数字，让我们对各个位数重新排序，求出刚好比给定数字大的一种排序，如果不存在就返回-1。这道题给的例子的数字都比较简单，我们来看一个复杂的，比如12443322，这个数字的重排序结果应该为13222344，如果我们仔细观察的话会发现数字变大的原因是左数第二位的2变成了3，细心的童鞋会更进一步的发现后面的数字由降序变为了升序，这也不难理解，因为我们要求刚好比给定数字大的排序方式。那么我们再观察下原数字，看看2是怎么确定的，我们发现，如果从后往前看的话，2是第一个小于其右边位数的数字，因为如果是个纯降序排列的数字，做任何改变都不会使数字变大，直接返回-1。知道了找出转折点的方法，再来看如何确定2和谁交换，这里2并没有跟4换位，而是跟3换了，那么如何确定的3？其实也是从后往前遍历，找到第一个大于2的数字交换，然后把转折点之后的数字按升序排列就是最终的结果了。最后记得为防止越界要转为长整数型，然后根据结果判断是否要返回-1即可.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nextGreaterElement</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> s=to_string(n);</div><div class="line">        <span class="keyword">int</span> len=s.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> i=len;</div><div class="line">        <span class="keyword">for</span>(;i&gt;<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i<span class="number">-1</span>]&lt;s[i]) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=len;j&gt;=i;j--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[j]&gt;s[i<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                swap(s[j],s[i<span class="number">-1</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(s.begin()+i,s.end());</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res=stoll(s);</div><div class="line">        <span class="keyword">return</span> res&gt;INT_MAX? <span class="number">-1</span>:res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="268-缺失数字"><a href="#268-缺失数字" class="headerlink" title="268 缺失数字"></a>268 缺失数字</h1><p>给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [3,0,1]</div><div class="line">输出: 2</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [9,6,4,2,3,5,7,0,1]</div><div class="line">输出: 8</div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)   </div><div class="line">        &#123;</div><div class="line">            m[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(--m[i]&lt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">              res=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="113-路径总和-II"><a href="#113-路径总和-II" class="headerlink" title="113 路径总和 II"></a>113 路径总和 II</h1><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p>
<p>说明: 叶子节点是指没有子节点的节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line">给定如下二叉树，以及目标和 sum = 22，</div><div class="line"></div><div class="line">              5</div><div class="line">             / \</div><div class="line">            4   8</div><div class="line">           /   / \</div><div class="line">          11  13  4</div><div class="line">         /  \    / \</div><div class="line">        7    2  5   1</div><div class="line">返回:</div><div class="line"></div><div class="line">[</div><div class="line">   [5,4,11,2],</div><div class="line">   [5,8,4,5]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pathSum(TreeNode* root, <span class="keyword">int</span> sum) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">        <span class="keyword">int</span> path_sum=<span class="number">0</span>;</div><div class="line">        preorder(root,path_sum,sum,path,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* node, <span class="keyword">int</span> &amp;path_sum,<span class="keyword">int</span> sum,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;result)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!node)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        path_sum=path_sum+node-&gt;val;</div><div class="line">        path.push_back(node-&gt;val);</div><div class="line">        <span class="keyword">if</span>(sum==path_sum &amp;&amp; !node-&gt;left &amp;&amp; !node-&gt;right)</div><div class="line">        &#123;</div><div class="line">            result.push_back(path);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node-&gt;left) preorder(node-&gt;left,path_sum,sum,path,result);</div><div class="line">        <span class="keyword">if</span>(node-&gt;right) preorder(node-&gt;right,path_sum,sum,path,result);</div><div class="line">        path_sum=path_sum-node-&gt;val;</div><div class="line">        path.pop_back();        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257 二叉树的所有路径"></a>257 二叉树的所有路径</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>
<p>说明: </p>
<ul>
<li>叶子节点是指没有子节点的节点。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入:</div><div class="line"></div><div class="line">   1</div><div class="line"> /   \</div><div class="line">2     3</div><div class="line"> \</div><div class="line">  5</div><div class="line"></div><div class="line">输出: [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</div><div class="line"></div><div class="line">解释: 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; binaryTreePaths(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> res;</div><div class="line">        preorder(root,to_string(root-&gt;val),res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root,<span class="built_in">string</span> path,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right)<span class="comment">//说明是叶子节点</span></div><div class="line">        &#123;</div><div class="line">            res.push_back(path);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(root-&gt;left) preorder(root-&gt;left,path+<span class="string">"-&gt;"</span>+to_string(root-&gt;left-&gt;val),res);</div><div class="line">        <span class="keyword">if</span>(root-&gt;right) preorder(root-&gt;right,path+<span class="string">"-&gt;"</span>+to_string(root-&gt;right-&gt;val),res);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="437 路径总和 III"></a>437 路径总和 III</h1><p>给定一个二叉树，它的每个结点都存放着一个整数值。</p>
<p>找出路径和等于给定数值的路径总数。</p>
<p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p>
<p>二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</div><div class="line"></div><div class="line">      10</div><div class="line">     /  \</div><div class="line">    5   -3</div><div class="line">   / \    \</div><div class="line">  3   2   11</div><div class="line"> / \   \</div><div class="line">3  -2   1</div><div class="line"></div><div class="line">返回 3。和等于 8 的路径有:</div><div class="line"></div><div class="line">1.  5 -&gt; 3</div><div class="line">2.  5 -&gt; 2 -&gt; 1</div><div class="line">3.  -3 -&gt; 11</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; out;</div><div class="line">        helper(root, sum, <span class="number">0</span>, out, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode* node, <span class="keyword">int</span> sum, <span class="keyword">int</span> curSum, <span class="built_in">vector</span>&lt;TreeNode*&gt;&amp; out, <span class="keyword">int</span>&amp; res)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</div><div class="line">        curSum += node-&gt;val;</div><div class="line">        out.push_back(node);</div><div class="line">        <span class="keyword">if</span> (curSum == sum) ++res;</div><div class="line">        <span class="keyword">int</span> t = curSum;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; out.size() - <span class="number">1</span>; ++i) &#123;</div><div class="line">            t -= out[i]-&gt;val;</div><div class="line">            <span class="keyword">if</span> (t == sum) ++res;</div><div class="line">        &#125;</div><div class="line">        helper(node-&gt;left, sum, curSum, out, res);</div><div class="line">        helper(node-&gt;right, sum, curSum, out, res);</div><div class="line">        out.pop_back();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode刷题A部分]]></title>
      <url>https://winper001.github.io/2018/08/14/leetcode%E5%88%B7%E9%A2%98A/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[toc]</p>
<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1 两数之和"></a>1 两数之和</h1><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</p>
<p>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">给定 nums = [2, 7, 11, 15], target = 9</div><div class="line"></div><div class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</div><div class="line">所以返回 [0, 1]</div></pre></td></tr></table></figure></p>
<p>我的做法如下，直接暴力，复杂度是O(n2)，我们试图通过遍历数组的其余部分来寻找它对应的目标，这将耗费O(n)*O(n)的时间。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size();j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)</div><div class="line">                &#123;</div><div class="line">                    res.push_back(i);</div><div class="line">                    res.push_back(j);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>也可以使用哈希表</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum;</div><div class="line">      <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmpmap;<span class="comment">//键值为nums的值，变量值为nums下标</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">          tmpmap[nums[i]] = i;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">          <span class="keyword">if</span> (tmpmap.count(target - nums[i]) != <span class="number">0</span> &amp;&amp; tmpmap[target-nums[i]]!=i) &#123;<span class="comment">//  如果目标值减去循环处的值存在，且它对应的下标不为i，即存在有另一个数与循环值相加等于target，则返回结果</span></div><div class="line">            twoSum.push_back(i);</div><div class="line">              twoSum.push_back(tmpmap[target - nums[i]]);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> twoSum;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><strong>优化版的哈希表如下</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;  </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum;  </div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmpmap;<span class="comment">//键值为nums的值，变量值为nums下标  </span></div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;  </div><div class="line">        <span class="keyword">if</span> (tmpmap.count(nums[i]) != <span class="number">0</span>) &#123;  </div><div class="line">            twoSum.push_back(tmpmap[nums[i]]);  </div><div class="line">            twoSum.push_back(i);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">        tmpmap[target - nums[i]] = i;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> twoSum;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="2-两数相加-链表-（回到目录）"><a href="#2-两数相加-链表-（回到目录）" class="headerlink" title="2 两数相加(链表)（回到目录）"></a>2 两数相加(链表)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</div><div class="line"></div><div class="line">输出：7 -&gt; 0 -&gt; 8</div><div class="line"></div><div class="line">原因：342 + 465 = 807</div></pre></td></tr></table></figure></p>
<p><strong>我一开始的做法</strong>:错的！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span></div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">int</span> num1,num2=<span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec1;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec2;</div><div class="line">        <span class="keyword">while</span>(l1)</div><div class="line">        &#123;</div><div class="line">            vec1.push_back(l1-&gt;val);</div><div class="line">            l1=l1-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(l2)</div><div class="line">        &#123;</div><div class="line">            vec2.push_back(l2-&gt;val);</div><div class="line">            l2=l2-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec1.size();i++)</div><div class="line">        &#123;</div><div class="line">            num1 +=<span class="built_in">pow</span>(<span class="number">10</span>,i)*vec1[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;vec2.size();j++)</div><div class="line">        &#123;</div><div class="line">            num2 +=<span class="built_in">pow</span>(<span class="number">10</span>,j)*vec2[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> sum=num1+num2;</div><div class="line">        <span class="function">ListNode <span class="title">head</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode *p=&amp;head;</div><div class="line">        <span class="keyword">int</span> shang=sum/<span class="number">10</span>;</div><div class="line">        <span class="keyword">int</span> yushu=sum%<span class="number">10</span>;</div><div class="line">        <span class="keyword">while</span>(shang)</div><div class="line">        &#123;</div><div class="line">            p-&gt;next=<span class="keyword">new</span> ListNode(yushu);</div><div class="line">            p=p-&gt;next;</div><div class="line">            shang=shang/<span class="number">10</span>;</div><div class="line">            yushu=shang%<span class="number">10</span>;</div><div class="line">            </div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        p-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> head.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>参考做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span></div><div class="line">    &#123;   <span class="function">ListNode <span class="title">target</span><span class="params">(<span class="number">0</span>)</span></span>; <span class="comment">//头结点</span></div><div class="line">        ListNode* node = &amp;target;  <span class="comment">//结点</span></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//每个结点的和</span></div><div class="line">        <span class="keyword">while</span> (l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span>) &#123;</div><div class="line">            sum /= <span class="number">10</span>;    <span class="comment">//求本次的进位</span></div><div class="line">            <span class="keyword">if</span> (l1 != <span class="literal">NULL</span>) &#123;</div><div class="line">                sum += l1-&gt;val;</div><div class="line">                l1 = l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (l2 != <span class="literal">NULL</span>) &#123;</div><div class="line">                sum += l2-&gt;val;</div><div class="line">                l2 = l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            node-&gt;next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>); <span class="comment">//该结点的值 就是结点和的余数</span></div><div class="line">            node = node-&gt;next; <span class="comment">//指向下一个结点</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sum / <span class="number">10</span> == <span class="number">1</span>)   <span class="comment">//对最后一个结点进行处理</span></div><div class="line">            node-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> target.next;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="3-无重复字符的最长子串（回到目录）"><a href="#3-无重复字符的最长子串（回到目录）" class="headerlink" title="3 无重复字符的最长子串（回到目录）"></a>3 无重复字符的最长子串（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">给定 &quot;abcabcbb&quot; ，没有重复字符的最长子串是 &quot;abc&quot; ，那么长度就是3。</div><div class="line"></div><div class="line">给定 &quot;bbbbb&quot; ，最长的子串就是 &quot;b&quot; ，长度是1。</div><div class="line"></div><div class="line">给定 &quot;pwwkew&quot; ，最长子串是 &quot;wke&quot; ，长度是3。请注意答案必须是一个子串，&quot;pwke&quot; 是 子序列  而不是子串。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> char_map[<span class="number">128</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="built_in">string</span> word=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            char_map[s[i]]++;</div><div class="line">            <span class="keyword">if</span>(char_map[s[i]]==<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                word += s[i];</div><div class="line">                <span class="keyword">if</span>(result&lt;word.length())</div><div class="line">                &#123;</div><div class="line">                    result=word.length();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(begin&lt;i &amp;&amp; char_map[s[i]]&gt;<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    char_map[s[begin]]--;</div><div class="line">                    begin++;</div><div class="line">                &#125;</div><div class="line">                word=<span class="string">""</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=begin;j&lt;=i;j++)</div><div class="line">                &#123;</div><div class="line">                    word += s[j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="4-两个排序数组的中位数"><a href="#4-两个排序数组的中位数" class="headerlink" title="4 两个排序数组的中位数"></a>4 两个排序数组的中位数</h1><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。</p>
<p>请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。</p>
<p>你可以假设 nums1 和 nums2 均不为空。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 3]</div><div class="line">nums2 = [2]</div><div class="line"></div><div class="line">中位数是 2.0</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 2]</div><div class="line">nums2 = [3, 4]</div><div class="line"></div><div class="line">中位数是 (2 + 3)/2 = 2.5</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums1.size()==<span class="number">0</span> &amp;&amp; nums2.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec;</div><div class="line">        <span class="keyword">double</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;nums1.size() &amp;&amp; j&lt;nums2.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums1[i]&lt;nums2[j])</div><div class="line">            &#123;</div><div class="line">                vec.push_back(nums1[i]);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                vec.push_back(nums2[j]);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;i&lt;nums1.size();i++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(nums1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;j&lt;nums2.size();j++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(nums2[j]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> len=vec.size();</div><div class="line">        <span class="keyword">if</span>(len%<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            res=vec[len/<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            res=(vec[len/<span class="number">2</span>]+vec[len/<span class="number">2</span><span class="number">-1</span>])/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="5-最长回文子串（回到目录）"><a href="#5-最长回文子串（回到目录）" class="headerlink" title="5 最长回文子串（回到目录）"></a>5 最长回文子串（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。</p>
<p>示例 1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: &quot;babad&quot;</div><div class="line">输出: &quot;bab&quot;</div><div class="line">注意: &quot;aba&quot;也是一个有效答案。</div></pre></td></tr></table></figure></p>
<p>示例 2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;cbbd&quot;</div><div class="line">输出: &quot;bb&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> len = s.size();</div><div class="line">        <span class="keyword">if</span>(len &lt;= <span class="number">1</span>)<span class="keyword">return</span> s;</div><div class="line">        <span class="keyword">int</span> start, maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//寻找以i-1,i为中点偶数长度的回文</span></div><div class="line">            <span class="keyword">int</span> low = i<span class="number">-1</span>, high = i;</div><div class="line">            <span class="keyword">while</span>(low &gt;= <span class="number">0</span> &amp;&amp; high &lt; len &amp;&amp; s[low] == s[high])</div><div class="line">            &#123;</div><div class="line">                low--;</div><div class="line">                high++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(high - low - <span class="number">1</span> &gt; maxLen)</div><div class="line">            &#123;</div><div class="line">                maxLen = high - low <span class="number">-1</span>;</div><div class="line">                start = low + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">             </div><div class="line">            <span class="comment">//寻找以i为中心的奇数长度的回文</span></div><div class="line">            low = i- <span class="number">1</span>; high = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(low &gt;= <span class="number">0</span> &amp;&amp; high &lt; len &amp;&amp; s[low] == s[high])</div><div class="line">            &#123;</div><div class="line">                low--;</div><div class="line">                high++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(high - low - <span class="number">1</span> &gt; maxLen)</div><div class="line">            &#123;</div><div class="line">                maxLen = high - low <span class="number">-1</span>;</div><div class="line">                start = low + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s.substr(start, maxLen);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="6-Z字形变换（回到目录）"><a href="#6-Z字形变换（回到目录）" class="headerlink" title="6 Z字形变换（回到目录）"></a>6 Z字形变换（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>将字符串 “PAYPALISHIRING” 以Z字形排列成给定的行数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div><div class="line">之后从左往右，逐行读取字符：&quot;PAHNAPLSIIGYIR&quot;</div><div class="line"></div><div class="line">实现一个将字符串进行指定行数变换的函数:</div><div class="line"></div><div class="line">string convert(string s, int numRows);</div><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 3</div><div class="line">输出: &quot;PAHNAPLSIIGYIR&quot;</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 4</div><div class="line">输出: &quot;PINALSIGYAHRPI&quot;</div><div class="line">解释:</div><div class="line"></div><div class="line">P     I    N</div><div class="line">A   L S  I G</div><div class="line">Y A   H R</div><div class="line">P     I</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = s.length();</div><div class="line">        <span class="keyword">int</span> nodeLen = <span class="number">2</span>*numRows<span class="number">-2</span>;<span class="comment">//两整列之间的差 也就是等差数列中的d</span></div><div class="line">        <span class="built_in">string</span> result = <span class="string">""</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (len == <span class="number">0</span> || numRows == <span class="number">0</span> || numRows == <span class="number">1</span>)<span class="comment">//特殊情况特殊处理</span></div><div class="line">            <span class="keyword">return</span> s;</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)<span class="comment">//从第一行遍历到最后一行</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j += nodeLen) &#123;</div><div class="line">                result += s[j];<span class="comment">//第一行和最后一行 还有普通行的整列数字</span></div><div class="line">                <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i != numRows<span class="number">-1</span> &amp;&amp; j - <span class="number">2</span>*i + nodeLen &lt; len)</div><div class="line">                    result += s[j - <span class="number">2</span>*i + nodeLen];<span class="comment">//单列行的数字</span></div><div class="line">            &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> result ;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="7-反转整数"><a href="#7-反转整数" class="headerlink" title="7 反转整数"></a>7 反转整数</h1><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 123</div><div class="line">输出: 321</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: -123</div><div class="line">输出: -321</div></pre></td></tr></table></figure></p>
<p>示例 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 120</div><div class="line">输出: 21</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (x) &#123;</div><div class="line">            <span class="keyword">int</span> temp = ans * <span class="number">10</span> + x % <span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span>(temp/<span class="number">10</span> !=ans)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            ans = temp;</div><div class="line">            x /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="8-字符串转整数-atoi-（回到目录）"><a href="#8-字符串转整数-atoi-（回到目录）" class="headerlink" title="8 字符串转整数 (atoi)（回到目录）"></a>8 字符串转整数 (atoi)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/integer-to-roman/description/" target="_blank" rel="external">LINK</a></p>
<p>实现 atoi，将字符串转为整数。</p>
<p>在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>
<p>字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。</p>
<p>当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。</p>
<p>若函数不能执行有效的转换，返回 0。</p>
<p>说明：</p>
<p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。如果数值超过可表示的范围，则返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: &quot;42&quot;</div><div class="line">输出: 42</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: &quot;   -42&quot;</div><div class="line">输出: -42</div><div class="line">解释: 第一个非空白字符为 &apos;-&apos;, 它是一个负号。</div><div class="line">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</div><div class="line">     </div><div class="line">示例 3:</div><div class="line">输入: &quot;4193 with words&quot;</div><div class="line">输出: 4193</div><div class="line">解释: 转换截止于数字 &apos;3&apos; ，因为它的下一个字符不为数字。</div><div class="line"></div><div class="line">示例 4:</div><div class="line">输入: &quot;words and 987&quot;</div><div class="line">输出: 0</div><div class="line">解释: 第一个非空字符是 &apos;w&apos;, 但它不是数字或正、负号。</div><div class="line">     因此无法执行有效的转换。</div><div class="line">     </div><div class="line">示例 5:</div><div class="line">输入: &quot;-91283472332&quot;</div><div class="line">输出: -2147483648</div><div class="line">解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 </div><div class="line">     因此返回 INT_MIN (−231) 。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> sign=<span class="number">1</span>;</div><div class="line">        <span class="keyword">long</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(str.empty())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(str[i]==<span class="string">' '</span>)</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'-'</span> || str[i]==<span class="string">'+'</span>)</div><div class="line">        &#123;</div><div class="line">            sign= (str[i]==<span class="string">'+'</span>)?<span class="number">1</span>:<span class="number">-1</span>;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(str[i]&gt;=<span class="string">'0'</span> &amp;&amp; str[i]&lt;=<span class="string">'9'</span>)</div><div class="line">        &#123;</div><div class="line">            res=res*<span class="number">10</span>+(str[i]-<span class="string">'0'</span>);</div><div class="line">            i++;</div><div class="line">            <span class="keyword">if</span>(res*sign&gt;=INT_MAX) <span class="keyword">return</span> INT_MAX;</div><div class="line">            <span class="keyword">if</span>(res*sign&lt;=INT_MIN) <span class="keyword">return</span> INT_MIN;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res*sign;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9 回文数"></a>9 回文数</h1><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: 121</div><div class="line">输出: true</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: -121</div><div class="line">输出: false</div><div class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</div><div class="line"></div><div class="line">示例 3:</div><div class="line">输入: 10</div><div class="line">输出: false</div><div class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> tmp=x;</div><div class="line">        <span class="keyword">int</span> reverse=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(tmp)</div><div class="line">        &#123;</div><div class="line">            reverse=reverse*<span class="number">10</span>+tmp%<span class="number">10</span>;</div><div class="line">            tmp=tmp/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(x==reverse)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="10-正则表达式匹配（回到目录）"><a href="#10-正则表达式匹配（回到目录）" class="headerlink" title="10. 正则表达式匹配（回到目录）"></a>10. 正则表达式匹配（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串 (s) 和一个字符模式 (p)。实现支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>
<p>‘.’ 匹配任意单个字符。<br>‘*’ 匹配零个或多个前面的元素。<br>匹配应该覆盖整个字符串 (s) ，而不是部分字符串。</p>
<p>说明:</p>
<p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入:</div><div class="line">s = &quot;aa&quot;</div><div class="line">p = &quot;a&quot;</div><div class="line">输出: false</div><div class="line">解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入:</div><div class="line">s = &quot;aa&quot;</div><div class="line">p = &quot;a*&quot;</div><div class="line">输出: true</div><div class="line">解释: &apos;*&apos; 代表可匹配零个或多个前面的元素, 即可以匹配 &apos;a&apos; 。因此, 重复 &apos;a&apos; 一次, 字符串可变为 &quot;aa&quot;。</div><div class="line"></div><div class="line">示例 3:</div><div class="line">输入:</div><div class="line">s = &quot;ab&quot;</div><div class="line">p = &quot;.*&quot;</div><div class="line">输出: true</div><div class="line">解释: &quot;.*&quot; 表示可匹配零个或多个(&apos;*&apos;)任意字符(&apos;.&apos;)。</div><div class="line"></div><div class="line">示例 4:</div><div class="line">输入:</div><div class="line">s = &quot;aab&quot;</div><div class="line">p = &quot;c*a*b&quot;</div><div class="line">输出: true</div><div class="line">解释: &apos;c&apos; 可以不被重复, &apos;a&apos; 可以被重复一次。因此可以匹配字符串 &quot;aab&quot;。</div><div class="line"></div><div class="line">示例 5:</div><div class="line">输入:</div><div class="line">s = &quot;mississippi&quot;</div><div class="line">p = &quot;mis*is*p*.&quot;</div><div class="line">输出: fal</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (p.empty()) <span class="keyword">return</span> s.empty();</div><div class="line">        <span class="keyword">if</span> (p.size() == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> (s.size() == <span class="number">1</span> &amp;&amp; (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (p[<span class="number">1</span>] != <span class="string">'*'</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (s.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">return</span> (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>) &amp;&amp; isMatch(s.substr(<span class="number">1</span>), p.substr(<span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (!s.empty() &amp;&amp; (s[<span class="number">0</span>] == p[<span class="number">0</span>] || p[<span class="number">0</span>] == <span class="string">'.'</span>)) &#123;</div><div class="line">            <span class="keyword">if</span> (isMatch(s, p.substr(<span class="number">2</span>))) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            s = s.substr(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> isMatch(s, p.substr(<span class="number">2</span>));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="11-盛水（回到目录）"><a href="#11-盛水（回到目录）" class="headerlink" title="11 盛水（回到目录）"></a>11 盛水（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/integer-to-roman/description/" target="_blank" rel="external">LINK</a><br>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt=""><br>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;a,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a.second&gt;b.second;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=height.size();</div><div class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; index_height;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            index_height.push_back(make_pair(i,height[i]));</div><div class="line">        &#125;</div><div class="line">        sort(index_height.begin(),index_height.end(),cmp);</div><div class="line">        <span class="keyword">int</span> t=index_height[<span class="number">1</span>].first-index_height[<span class="number">0</span>].first;</div><div class="line">        res=t*index_height[<span class="number">1</span>].second;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>我的做法是<strong>错的</strong>，以为只需要找到最大的两个数，其实不是！还需要考虑index的距离。</p>
<p>还有一种做法，不知道哪里错了。(<strong>后来发现是temp的地方放错了！！！</strong>)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=height.size();</div><div class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=len<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> h=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>,temp=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(start&lt;end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(temp&gt;res)</div><div class="line">            &#123;</div><div class="line">                res=temp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(height[start]&lt;height[end])</div><div class="line">            &#123;</div><div class="line">                h=height[start];</div><div class="line">                start++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                h=height[end];</div><div class="line">                end--;</div><div class="line">            &#125;</div><div class="line">            temp=h*(end-start);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>下面的这个方法可以ac:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=height.size();</div><div class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=len<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> h=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>,temp=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(start&lt;end)</div><div class="line">        &#123;</div><div class="line">            temp=min(height[start],height[end])*(end-start);</div><div class="line">            <span class="keyword">if</span>(temp&gt;res)</div><div class="line">                &#123;</div><div class="line">                    res=temp;</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">if</span>(height[start]&lt;height[end])</div><div class="line">            &#123;</div><div class="line">                 </div><div class="line">                <span class="comment">//h=height[start];</span></div><div class="line">                start++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">//h=height[end];</span></div><div class="line">                end--;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="12-整数转换成罗马数字（回到目录）"><a href="#12-整数转换成罗马数字（回到目录）" class="headerlink" title="12 整数转换成罗马数字（回到目录）"></a>12 整数转换成罗马数字（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/integer-to-roman/description/" target="_blank" rel="external">LINK</a></p>
<p>我的做法如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; roman=&#123;<span class="string">"M"</span>,<span class="string">"D"</span>,<span class="string">"C"</span>,<span class="string">"L"</span>,<span class="string">"X"</span>,<span class="string">"V"</span>,<span class="string">"I"</span>&#125;;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; val=&#123;<span class="number">1000</span>,<span class="number">500</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;num !=<span class="number">0</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(num!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(num&gt;=val[i])</div><div class="line">                &#123;</div><div class="line">                    num -= val[i];</div><div class="line">                    res += roman[i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>参考做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; roman=&#123;<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125;;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; val=&#123;<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;num !=<span class="number">0</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(num&gt;=val[i])</div><div class="line">            &#123;</div><div class="line">                num -= val[i];</div><div class="line">                res += roman[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="13-罗马数字转换城整数（回到目录）"><a href="#13-罗马数字转换城整数（回到目录）" class="headerlink" title="13 罗马数字转换城整数（回到目录）"></a>13 罗马数字转换城整数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/roman-to-integer/description/" target="_blank" rel="external">LINK</a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; char_map=&#123;&#123;<span class="string">'I'</span>,<span class="number">1</span>&#125;,&#123;<span class="string">'V'</span>,<span class="number">5</span>&#125;,&#123;<span class="string">'X'</span>,<span class="number">10</span>&#125;,&#123;<span class="string">'L'</span>,<span class="number">50</span>&#125;,&#123;<span class="string">'C'</span>,<span class="number">100</span>&#125;,&#123;<span class="string">'D'</span>,<span class="number">500</span>&#125;,&#123;<span class="string">'M'</span>,<span class="number">1000</span>&#125;&#125;;</div><div class="line">        <span class="keyword">int</span> sum=char_map[s.back()];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size()<span class="number">-1</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(char_map[s[i]]&lt;char_map[s[i+<span class="number">1</span>]])</div><div class="line">            &#123;</div><div class="line">                sum=sum-char_map[s[i]];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                sum=sum+char_map[s[i]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="15-三数之和（回到目录）"><a href="#15-三数之和（回到目录）" class="headerlink" title="15 三数之和（回到目录）"></a>15 三数之和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><a href="https://leetcode-cn.com/problems/3sum/description/" target="_blank" rel="external">链接</a>:<br>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p>
<p><strong>注意</strong>: 答案中不可以包含重复的三元组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，满足要求的三元组集合为：</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-2</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> k=len<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(j&lt;k)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&gt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    k--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&lt;<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    j++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    res.push_back(&#123;nums[i],nums[j],nums[k]&#125;);</div><div class="line">                    <span class="keyword">while</span>(nums[j+<span class="number">1</span>]==nums[j])</div><div class="line">                    &#123;</div><div class="line">                        j++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">while</span>(nums[k]==nums[k<span class="number">-1</span>])</div><div class="line">                    &#123;</div><div class="line">                        k--;</div><div class="line">                    &#125;</div><div class="line">                    j++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(nums[i+<span class="number">1</span>]==nums[i])</div><div class="line">            &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>启发于4数之和的做法，有以下的代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num) <span class="comment">//相当于target==0</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span>(num.size()&lt;<span class="number">3</span>) <span class="keyword">return</span> res;</div><div class="line">        sort(num.begin(),num.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> target_2=-num[i];</div><div class="line">            <span class="keyword">int</span> left=i+<span class="number">1</span>,right=num.size()<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(left&lt;right)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sum_2=num[left]+num[right];</div><div class="line">                <span class="keyword">if</span>(sum_2&lt;target_2)</div><div class="line">                &#123;</div><div class="line">                    left++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum_2&gt;target_2)</div><div class="line">                &#123;</div><div class="line">                    right--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum_2==target_2)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item(<span class="number">3</span>,<span class="number">0</span>);</div><div class="line">                    item[<span class="number">0</span>]=num[i];</div><div class="line">                    item[<span class="number">1</span>]=num[left];</div><div class="line">                    item[<span class="number">2</span>]=num[right];</div><div class="line">                    res.push_back(item);</div><div class="line">                    <span class="keyword">while</span>(num[left]==item[<span class="number">1</span>]) left++;</div><div class="line">                    <span class="keyword">while</span>(num[right]==item[<span class="number">2</span>]) right--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(num[i+<span class="number">1</span>]==num[i]) i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16 最接近的三数之和"></a>16 最接近的三数之和</h1><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>
<p><code>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</code></p>
<p>与 target 最接近的三个数的和为 <code>2(-1 + 2 + 1 = 2).</code><br><strong>可以通过的做法之一</strong>，使用左右指针往中间夹逼。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//int closestSum=nums[0]+nums[1]+nums[2];</span></div><div class="line">        <span class="keyword">int</span> closestSum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> diff=<span class="number">99999999999999999</span>;</div><div class="line">        <span class="comment">//int diff=abs(closestSum-target);</span></div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> left=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> right=nums.size()<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(left&lt;right)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> sum=nums[i]+nums[left]+nums[right];</div><div class="line">                <span class="keyword">int</span> new_diff=<span class="built_in">abs</span>(sum-target);</div><div class="line">                <span class="keyword">if</span>(diff&gt;new_diff)</div><div class="line">                &#123;</div><div class="line">                    diff=new_diff;</div><div class="line">                    closestSum=sum;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(sum&lt;target)</div><div class="line">                &#123;</div><div class="line">                    left++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    right--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> closestSum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="17-电话号码的字母组合（回到目录）"><a href="#17-电话号码的字母组合（回到目录）" class="headerlink" title="17 电话号码的字母组合（回到目录）"></a>17 电话号码的字母组合（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1:</p>
<p>不对应任何字母。</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""></p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入：&quot;23&quot;</div><div class="line"></div><div class="line">输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//使用递归回溯做法。非常妙！</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(digits.size()==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">string</span> local;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; table&#123;&#123;<span class="string">'w'</span>&#125;, &#123;<span class="string">'w'</span>&#125;, &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;, &#123;<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;, &#123;<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>&#125;, &#123;<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>&#125;, </div><div class="line">        &#123;<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>&#125;, &#123;<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>&#125;, &#123;<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>&#125;, &#123;<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>&#125;&#125;;<span class="comment">//前两个，随便定义。。。。</span></div><div class="line">        generate(table,res,local,<span class="number">0</span>,digits);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; &amp;table,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res,<span class="built_in">string</span> &amp;local,<span class="keyword">int</span> index,<span class="built_in">string</span> digits)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> digit=digits[index]-<span class="string">'0'</span>;</div><div class="line">        <span class="keyword">if</span>(index==digits.size())</div><div class="line">        &#123;</div><div class="line">            res.push_back(local);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;table[digit].size();i++)</div><div class="line">        &#123;</div><div class="line">            local.push_back(table[digit][i]);</div><div class="line">            generate(table,res,local,index+<span class="number">1</span>,digits);</div><div class="line">            local.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>==大坑==</strong>：<br>实际上这行代码是省略了的，因为对于一个字符串来说，结束符是‘\0’,index加到最后面递归函数自然会return，所以可以不用return。我一开始，是直接在<code>res.push_back(local);</code>的下一行加return，那肯定是错的。因为index还没大于digits.size，就不能return.</p>
<h1 id="18-四数之和（回到目录）"><a href="#18-四数之和（回到目录）" class="headerlink" title="18 四数之和（回到目录）"></a>18 四数之和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num, <span class="keyword">int</span> target) &#123;</div><div class="line">    </div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (num.size()&lt;<span class="number">4</span>)<span class="comment">//原先是num.empy()</span></div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">    </div><div class="line">        sort(num.begin(),num.end());</div><div class="line">    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.size()<span class="number">-3</span>; i++) &#123;<span class="comment">//原先是i&lt;num.size();</span></div><div class="line">        </div><div class="line">            <span class="keyword">int</span> target_3 = target - num[i];</div><div class="line">        </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; num.size()<span class="number">-2</span>; j++) &#123; <span class="comment">//原先是i&lt;num.size()</span></div><div class="line">            </div><div class="line">                <span class="keyword">int</span> target_2 = target_3 - num[j];</div><div class="line">            </div><div class="line">                <span class="keyword">int</span> front = j + <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> back = num.size() - <span class="number">1</span>;</div><div class="line">            </div><div class="line">                <span class="keyword">while</span>(front &lt; back) &#123;</div><div class="line">                </div><div class="line">                    <span class="keyword">int</span> two_sum = num[front] + num[back];</div><div class="line">                </div><div class="line">                    <span class="keyword">if</span> (two_sum &lt; target_2) front++;</div><div class="line">                </div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (two_sum &gt; target_2) back--;</div><div class="line">                </div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                    </div><div class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; quadruplet(<span class="number">4</span>, <span class="number">0</span>);</div><div class="line">                        quadruplet[<span class="number">0</span>] = num[i];</div><div class="line">                        quadruplet[<span class="number">1</span>] = num[j];</div><div class="line">                        quadruplet[<span class="number">2</span>] = num[front];</div><div class="line">                        quadruplet[<span class="number">3</span>] = num[back];</div><div class="line">                        res.push_back(quadruplet);</div><div class="line">                    </div><div class="line">                        <span class="comment">// Processing the duplicates of number 3</span></div><div class="line">                        <span class="keyword">while</span> (front &lt; back &amp;&amp; num[front] == quadruplet[<span class="number">2</span>]) ++front;</div><div class="line">                    </div><div class="line">                        <span class="comment">// Processing the duplicates of number 4</span></div><div class="line">                        <span class="keyword">while</span> (front &lt; back &amp;&amp; num[back] == quadruplet[<span class="number">3</span>]) --back;</div><div class="line">                </div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="comment">// Processing the duplicates of number 2</span></div><div class="line">                <span class="keyword">while</span>(j + <span class="number">1</span> &lt; num.size() &amp;&amp; num[j + <span class="number">1</span>] == num[j]) ++j;</div><div class="line">            &#125;</div><div class="line">        </div><div class="line">            <span class="comment">// Processing the duplicates of number 1</span></div><div class="line">            <span class="keyword">while</span> (i + <span class="number">1</span> &lt; num.size() &amp;&amp; num[i + <span class="number">1</span>] == num[i]) ++i;</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="19-删除倒数第N个节点（回到目录）"><a href="#19-删除倒数第N个节点（回到目录）" class="headerlink" title="19 删除倒数第N个节点（回到目录）"></a>19 删除倒数第N个节点（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><strong>我一开始的做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">        ListNode* p=head;</div><div class="line">        <span class="keyword">while</span>(p)</div><div class="line">        &#123;</div><div class="line">            len++;</div><div class="line">            p=p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span> &amp;&amp; n==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(len!=<span class="number">1</span> &amp;&amp;len==n)</div><div class="line">        &#123;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        p=head;</div><div class="line">        <span class="keyword">int</span> t1=len-n<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(t1&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            t1--;</div><div class="line">            p=p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* pre=p;</div><div class="line">        p=head;</div><div class="line">        <span class="keyword">int</span> t2=len-n+<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(t2&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            t2--;</div><div class="line">            p=p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* head_next=p;</div><div class="line">        pre-&gt;next=head_next;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="21-合并两个有序链表（回到目录）"><a href="#21-合并两个有序链表（回到目录）" class="headerlink" title="21 合并两个有序链表（回到目录）"></a>21 合并两个有序链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</div><div class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//新建节点的两种方式</span></div><div class="line">        <span class="comment">/*</span></div><div class="line">        ListNode temp(0);</div><div class="line">        ListNode* ptr=&amp;temp;</div><div class="line">        */</div><div class="line">        ListNode* pre=ListNode(<span class="number">0</span>);</div><div class="line">        ListNode* ptr=pre;</div><div class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">            &#123;</div><div class="line">                ptr=l1;</div><div class="line">                l1=l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ptr=l2;</div><div class="line">                l2=l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            ptr=ptr-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(l1)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l2)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l2;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> pre-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="20-有效的括号（回到目录）"><a href="#20-有效的括号（回到目录）" class="headerlink" title="20 有效的括号（回到目录）"></a>20 有效的括号（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个只包括 <code>&#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。</p>
<p>左括号必须以正确的顺序闭合。</p>
<p><strong>注意</strong>空字符串可被认为是有效字符串。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=s.size();</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(res.empty()) res.push(s[i]);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((res.top()==<span class="string">'('</span> &amp;&amp; s[i]==<span class="string">')'</span>) || (res.top()==<span class="string">'['</span> &amp;&amp; s[i]==<span class="string">']'</span>) ||(res.top()==<span class="string">'&#123;'</span> &amp;&amp; s[i]==<span class="string">'&#125;'</span>))</div><div class="line">            &#123;</div><div class="line">                res.pop();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                res.push(s[i]);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.empty();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="23-合并K个有序链表（回到目录）"><a href="#23-合并K个有序链表（回到目录）" class="headerlink" title="23 合并K个有序链表（回到目录）"></a>23 合并K个有序链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入:</div><div class="line">[</div><div class="line">  1-&gt;4-&gt;5,</div><div class="line">  1-&gt;3-&gt;4,</div><div class="line">  2-&gt;6</div><div class="line">]</div><div class="line">输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</div></pre></td></tr></table></figure></p>
<p><strong>方法1：分治归并</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(lists.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(lists.size()==<span class="number">1</span>) <span class="keyword">return</span> lists[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span>(lists.size()==<span class="number">2</span>) <span class="keyword">return</span> mergeTwoLists(lists[<span class="number">0</span>],lists[<span class="number">1</span>]);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid=lists.size()/<span class="number">2</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; sublists_1;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; sublists_2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid;i++)</div><div class="line">        &#123;</div><div class="line">            sublists_1.push_back(lists[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid;i&lt;lists.size();i++)</div><div class="line">        &#123;</div><div class="line">            sublists_2.push_back(lists[i]);</div><div class="line">        &#125;</div><div class="line">        ListNode* l1=mergeKLists(sublists_1);</div><div class="line">        ListNode* l2=mergeKLists(sublists_2);</div><div class="line">        <span class="keyword">return</span> mergeTwoLists(l1,l2);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1,ListNode* l2)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function">ListNode <span class="title">temp</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode* ptr= &amp;temp;</div><div class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">            &#123;</div><div class="line">                ptr-&gt;next=l1;</div><div class="line">                l1=l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ptr-&gt;next=l2;</div><div class="line">                l2=l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            ptr=ptr-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l1)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l2)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> temp.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法2: 将所有的节点放在一个vector,然后再排序，最后相连。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; node_vec;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lists.size();i++)</div><div class="line">        &#123;</div><div class="line">            node_vec.push_back(lists[i]);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node_vec.size()==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        sort(node_vec.begin(),node_vec.end(),cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;node_vec.size();i++)</div><div class="line">        &#123;</div><div class="line">            node_vec[i<span class="number">-1</span>]-&gt;next=node_vec[i];</div><div class="line">        &#125;</div><div class="line">        node_vec[node_vec.size()<span class="number">-1</span>]-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> node_vec[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> ListNode* a,<span class="keyword">const</span> ListNode* b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a-&gt;val &lt; b-&gt;val;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="24-两两交换链表中相邻的节点（回到目录）"><a href="#24-两两交换链表中相邻的节点（回到目录）" class="headerlink" title="24 两两交换链表中相邻的节点（回到目录）"></a>24 两两交换链表中相邻的节点（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>
<p>示例:</p>
<p><code>给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</code></p>
<p>说明:</p>
<p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(head-&gt;next == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        </div><div class="line">        ListNode* temp = head-&gt;next;</div><div class="line">        head-&gt;next = swapPairs(temp-&gt;next);</div><div class="line">        temp-&gt;next = head;<span class="comment">//这个temp和上一行函数里面的temp不一样。</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="26-删除排序数组中的重复项（82，83）（回到目录）"><a href="#26-删除排序数组中的重复项（82，83）（回到目录）" class="headerlink" title="26 删除排序数组中的重复项（82，83）（回到目录）"></a>26 删除排序数组中的重复项（82，83）（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">给定数组 nums = [1,1,2], </div><div class="line"></div><div class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </div><div class="line"></div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</div><div class="line"></div><div class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</div></pre></td></tr></table></figure></p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] ==nums[i<span class="number">-1</span>])</div><div class="line">                &#123;</div><div class="line">                     cnt++;               </div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    nums[i-cnt]=nums[i];</div><div class="line">                &#125;</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> (nums.size()-cnt);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法2</strong>（我更倾向）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] !=nums[i<span class="number">-1</span>])</div><div class="line">                &#123;</div><div class="line">                    index++;</div><div class="line">                    nums[index]=nums[i];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> index+<span class="number">1</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p><strong>快慢指针:同方法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>, cur = <span class="number">0</span>, n = nums.size();</div><div class="line">        <span class="keyword">while</span> (cur &lt; n) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[pre] == nums[cur]) ++cur;</div><div class="line">            <span class="keyword">else</span> nums[++pre] = nums[cur++];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="80-删除排序数组中的重复项-II（回到目录）"><a href="#80-删除排序数组中的重复项-II（回到目录）" class="headerlink" title="80 删除排序数组中的重复项 II（回到目录）"></a>80 删除排序数组中的重复项 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">给定 nums = [1,1,1,2,2,3],</div><div class="line"></div><div class="line">函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。</div><div class="line"></div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div><div class="line">示例 2:</div><div class="line"></div><div class="line">给定 nums = [0,0,1,1,1,1,2,3,3],</div><div class="line"></div><div class="line">函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。</div><div class="line"></div><div class="line">你不需要考虑数组中超出新长度后面的元素。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;=<span class="number">2</span>) <span class="keyword">return</span> nums.size();</div><div class="line">        <span class="keyword">int</span> pre=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> cur=<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> count=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(cur&lt;nums.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[pre]==nums[cur] &amp;&amp; count==<span class="number">0</span>) cur++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[pre]==nums[cur]) count--;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    count=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                nums[++pre]=nums[cur++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="31-下一个排列（回到目录）"><a href="#31-下一个排列（回到目录）" class="headerlink" title="31 下一个排列（回到目录）"></a>31 下一个排列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p>
<p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p>
<p>必须原地修改，只允许使用额外常数空间。</p>
<p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。</p>
<p>1,2,3 → 1,3,2</p>
<p>3,2,1 → 1,2,3</p>
<p>1,1,5 → 1,5,1<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[i+<span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(j=len<span class="number">-1</span>;j&gt;i;j--)<span class="comment">//为了找第一个比nums[i]大的数字</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(nums[j]&gt;nums[i]) <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                swap(nums[i],nums[j]);</div><div class="line">                reverse(nums.begin()+i+<span class="number">1</span>,nums.end());</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        reverse(nums.begin(),nums.end());</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="32-最长有效括号（回到目录）"><a href="#32-最长有效括号（回到目录）" class="headerlink" title="32 最长有效括号（回到目录）"></a>32 最长有效括号（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长的包含有效括号的子串的长度。</p>
<p><strong>使用栈</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//使用栈</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; index;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)</div><div class="line">            &#123;</div><div class="line">                index.push(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(index.empty())</div><div class="line">                &#123;</div><div class="line">                    start=i+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    index.pop();</div><div class="line">                    <span class="keyword">if</span>(index.empty())</div><div class="line">                    &#123;</div><div class="line">                        res=max(res,i-start+<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        res=max(res,i-index.top());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33 搜索旋转排序数组"></a>33 搜索旋转排序数组</h1><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>
<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>
<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>
<p>你可以假设数组中不存在重复的元素。</p>
<p>你的算法时间复杂度必须是 O(log n) 级别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: nums = [4,5,6,7,0,1,2], target = 0</div><div class="line">输出: 4</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: nums = [4,5,6,7,0,1,2], target = 3</div><div class="line">输出: -1</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[begin]&lt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(target&gt;=nums[begin])</div><div class="line">                    &#123;</div><div class="line">                        end=mid<span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        begin=mid+<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]&gt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    end=mid<span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]==nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[begin]&lt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]&gt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(target&gt;=nums[begin])</div><div class="line">                    &#123;</div><div class="line">                        end=mid<span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        begin=mid+<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]==nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>二分查找</strong><br>这道题让在旋转数组中搜索一个给定值，若存在返回坐标，若不存在返回-1。我们还是考虑二分搜索法，但是这道题的难点在于我们不知道原数组在哪旋转了，我们还是用题目中给的例子来分析，对于数组[0 1 2 4 5 6 7] 共有下列七种旋转方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">0　　1　　2　　 4　　5　　6　　7</div><div class="line"></div><div class="line">7　　0　　1　　 2　　4　　5　　6</div><div class="line"></div><div class="line">6　　7　　0　　 1　　2　　4　　5</div><div class="line"></div><div class="line">5　　6　　7　　 0　　1　　2　　4</div><div class="line"></div><div class="line">4　　5　　6　　7　　0　　1　　2</div><div class="line"></div><div class="line">2　　4　　5　　6　　7　　0　　1</div><div class="line"></div><div class="line">1　　2　　4　　5　　6　　7　　0</div></pre></td></tr></table></figure></p>
<p>二分搜索法的关键在于获得了中间数后，判断下面要搜索左半段还是右半段，我们观察上面红色的数字都是升序的，由此我们可以观察出规律，如果中间的数小于最右边的数，则右半段是有序的，若中间数大于最右边数，则左半段是有序的，我们只要在有序的半段里用首尾两个数组来判断目标值是否在这一区域内，这样就可以确定保留哪半边了，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(left&lt;=right)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[mid]==target) <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;nums[right])<span class="comment">//说明右半边有序</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[mid]&lt;target &amp;&amp; target&lt;=nums[right]) left=mid+<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> right=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;=nums[right])<span class="comment">//说明左半部有序</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(target&gt;=nums[left] &amp;&amp; target&lt;nums[mid]) right=mid<span class="number">-1</span>;</div><div class="line">                <span class="keyword">else</span> left=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="34-在排序数组中查找元素的第一个和最后一个位置（回到目录）"><a href="#34-在排序数组中查找元素的第一个和最后一个位置（回到目录）" class="headerlink" title="34 在排序数组中查找元素的第一个和最后一个位置（回到目录）"></a>34 在排序数组中查找元素的第一个和最后一个位置（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>
<p>你的算法时间复杂度必须是 O(log n) 级别。</p>
<p>如果数组中不存在目标值，返回 [-1, -1]。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">输入: nums = [5,7,7,8,8,10], target = 8</div><div class="line">输出: [3,4]</div><div class="line"></div><div class="line">示例 2:</div><div class="line">输入: nums = [5,7,7,8,8,10], target = 6</div><div class="line">输出: [-1,-1]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        result.push_back(left_bound(nums,target));</div><div class="line">        result.push_back(right_bound(nums,target));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> target)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>,end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[mid<span class="number">-1</span>]&lt;target || mid==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> mid;</div><div class="line">                &#125;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> target)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> begin=<span class="number">0</span>,end=nums.size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(target==nums[mid])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[mid+<span class="number">1</span>]&gt;target || mid==nums.size()<span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">            begin=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">        &#123;</div><div class="line">            end=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">        &#123;</div><div class="line">            begin=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>二分查找法</strong>：</p>
<p>使用两次二分查找法，第一次找到左边界，第二次调用找到右边界即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(<span class="number">2</span>, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span>(nums.empty()) <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size()<span class="number">-1</span>;<span class="comment">//这里是因为左边界的数不可能到数组最后一位</span></div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (nums[right]!= target) <span class="keyword">return</span> res;</div><div class="line">        res[<span class="number">0</span>] = right;</div><div class="line">        right = nums.size();</div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right= mid;</div><div class="line">        &#125;</div><div class="line">        res[<span class="number">1</span>] = left - <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35 搜索插入位置"></a>35 搜索插入位置</h1><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>你可以假设数组中无重复元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [1,3,5,6], 5</div><div class="line">输出: 2</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1,3,5,6], 2</div><div class="line">输出: 1</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: [1,3,5,6], 7</div><div class="line">输出: 4</div><div class="line">示例 4:</div><div class="line"></div><div class="line">输入: [1,3,5,6], 0</div><div class="line">输出: 0</div></pre></td></tr></table></figure></p>
<p><strong>视频上解法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> index=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(index==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                index=mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(mid==<span class="number">0</span> || target&gt;nums[mid<span class="number">-1</span>])</div><div class="line">                &#123;</div><div class="line">                    index=mid;</div><div class="line">                &#125;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(mid==nums.size()<span class="number">-1</span> || target&lt;nums[mid+<span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    index=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> index;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>其他解法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] &gt;= target) <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums.size();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>其他解法2:二分查找法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (nums.back() &lt; target) <span class="keyword">return</span> nums.size();</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size();</div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> right = mid;<span class="comment">//相当于查找第一个大于target的数</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> right;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="39-组合总和-I"><a href="#39-组合总和-I" class="headerlink" title="39 组合总和 I"></a>39 组合总和 I</h1><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的数字可以无限制重复被选取。</p>
<p>说明：</p>
<p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。 </p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [2,3,6,7], target = 7,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [7],</div><div class="line">  [2,2,3]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [2,3,5], target = 8,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [2,2,2,2],</div><div class="line">  [2,3,3],</div><div class="line">  [3,5]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combinationSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        sort(candidates.begin(),candidates.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        generate(candidates,res,item,target,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;candidates,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item,<span class="keyword">int</span> target,<span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=candidates.size();</div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.push_back(item);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(candidates[i]);</div><div class="line">            generate(candidates,res,item,target-candidates[i],i);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="40-组合总和-II（回到目录）"><a href="#40-组合总和-II（回到目录）" class="headerlink" title="40 组合总和 II（回到目录）"></a>40 组合总和 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的每个数字在每个组合中只能使用一次。</p>
<p>说明：</p>
<p>所有数字（包括目标数）都是正整数。<br>解集不能包含重复的组合。<br>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [10,1,2,7,6,1,5], target = 8,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [1, 7],</div><div class="line">  [1, 2, 5],</div><div class="line">  [2, 6],</div><div class="line">  [1, 1, 6]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: candidates = [2,5,2,1,2], target = 5,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [1,2,2],</div><div class="line">  [5]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combinationSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        sort(num.begin(),num.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; local;</div><div class="line">        findCombination(res, <span class="number">0</span>, target, local, num);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findCombination</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res, <span class="keyword">const</span> <span class="keyword">int</span> start, <span class="keyword">const</span> <span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; local, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; num)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.push_back(local);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i&lt;num.size();i++) <span class="comment">// iterative component</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">if</span>(num[i]==num[i<span class="number">-1</span>] &amp;&amp; i&gt;start) <span class="keyword">continue</span>; <span class="comment">// check duplicate combination</span></div><div class="line">                local.push_back(num[i]),</div><div class="line">                findCombination(res,i+<span class="number">1</span>,target-num[i],local,num); <span class="comment">// recursive componenet</span></div><div class="line">                local.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>另一种做法</strong>:使用set容器，代码和上面那题一样的<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; combinationSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">        sort(num.begin(),num.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; local;</div><div class="line">        findCombination(res, <span class="number">0</span>, target, local, num);</div><div class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; (res.begin(),res.end());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findCombination</span><span class="params">(<span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res, <span class="keyword">const</span> <span class="keyword">int</span> order, <span class="keyword">const</span> <span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; local, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; num)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res.insert(local);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = order;i&lt;num.size();i++) <span class="comment">// iterative component</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">                <span class="comment">//if(num[i]==num[i-1]&amp;&amp;i&gt;order) continue; // check duplicate combination</span></div><div class="line">                local.push_back(num[i]),</div><div class="line">                findCombination(res,i+<span class="number">1</span>,target-num[i],local,num); <span class="comment">// recursive componenet</span></div><div class="line">                local.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="45-跳跃游戏-II"><a href="#45-跳跃游戏-II" class="headerlink" title="45 跳跃游戏 II"></a>45 跳跃游戏 II</h1><p>给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: [2,3,1,1,4]</div><div class="line">输出: 2</div><div class="line">解释: 跳到最后一个位置的最小跳跃数是 2。</div><div class="line">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> current_max_index=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> pre_max_index=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> jump_min=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i&gt;current_max_index)</div><div class="line">            &#123;</div><div class="line">                jump_min++;</div><div class="line">                current_max_index=pre_max_index;</div><div class="line">            &#125;</div><div class="line">                         </div><div class="line">            <span class="keyword">if</span>(pre_max_index&lt;nums[i]+i)</div><div class="line">            &#123;</div><div class="line">                pre_max_index=nums[i]+i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> jump_min;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46 全排列"></a>46 全排列</h1><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p>
<p><strong>示例</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3]</div><div class="line"></div><div class="line">输出:</div><div class="line">[</div><div class="line">  [1,2,3],</div><div class="line">  [1,3,2],</div><div class="line">  [2,1,3],</div><div class="line">  [2,3,1],</div><div class="line">  [3,1,2],</div><div class="line">  [3,2,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        generate(nums,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp;res,<span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            res.push_back(nums);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)<span class="comment">//循环实现和begin+1之后的全排列</span></div><div class="line">        &#123;</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">            generate(nums,res,begin+<span class="number">1</span>);</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>注</strong>：我们来仔细推敲一下循环体里的代码，当我们对序列进行交换之后，就将交换后的序列除去第一个元素放入到下一次递归中去了，递归完成了再进行下一次循环。这是某一次循环程序所做的工作，这里有一个问题，那就是在进入到下一次循环时，序列是被改变了。可是，如果我们要假定第一位的所有可能性的话，那么，就必须是在建立在这些序列的初始状态一致的情况下,所以每次交换后，要还原，确保初始状态一致。 </p>
<h1 id="47-全排列II（回到目录）"><a href="#47-全排列II（回到目录）" class="headerlink" title="47 全排列II（回到目录）"></a>47 全排列II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入: [1,1,2]</div><div class="line"></div><div class="line">输出:</div><div class="line">[</div><div class="line">  [1,1,2],</div><div class="line">  [1,2,1],</div><div class="line">  [2,1,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permuteUnique(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res_set;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        generate(res,res_set,nums,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,<span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res_set,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size() &amp;&amp; res_set.find(nums) ==res_set.end())</div><div class="line">        &#123;</div><div class="line">            res.push_back(nums);</div><div class="line">            res_set.insert(nums);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">            generate(res,res_set,nums,begin+<span class="number">1</span>);</div><div class="line">            swap(nums[begin],nums[i]);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="48-旋转图像（回到目录）"><a href="#48-旋转图像（回到目录）" class="headerlink" title="48 旋转图像（回到目录）"></a>48 旋转图像（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个 n × n 的二维矩阵表示一个图像。将图像顺时针旋转 90 度。</p>
<p>说明：你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line">给定 matrix = </div><div class="line">[</div><div class="line">  [1,2,3],</div><div class="line">  [4,5,6],</div><div class="line">  [7,8,9]</div><div class="line">],</div><div class="line"></div><div class="line">原地旋转输入矩阵，使其变为:</div><div class="line">[</div><div class="line">  [7,4,1],</div><div class="line">  [8,5,2],</div><div class="line">  [9,6,3]</div><div class="line">]</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">给定 matrix =</div><div class="line">[</div><div class="line">  [ 5, 1, 9,11],</div><div class="line">  [ 2, 4, 8,10],</div><div class="line">  [13, 3, 6, 7],</div><div class="line">  [15,14,12,16]</div><div class="line">], </div><div class="line"></div><div class="line">原地旋转输入矩阵，使其变为:</div><div class="line">[</div><div class="line">  [15,13, 2, 5],</div><div class="line">  [14, 3, 4, 1],</div><div class="line">  [12, 6, 8, 9],</div><div class="line">  [16, 7,10,11]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//i表示的是绕中心的层数，j是列数</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> n=matrix.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n<span class="number">-1</span>-i;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> t=matrix[i][j];</div><div class="line">                matrix[i][j]=matrix[n<span class="number">-1</span>-j][i];</div><div class="line">                matrix[n<span class="number">-1</span>-j][i]=matrix[n<span class="number">-1</span>-i][n<span class="number">-1</span>-j];</div><div class="line">                matrix[n<span class="number">-1</span>-i][n<span class="number">-1</span>-j]=matrix[j][n<span class="number">-1</span>-i];</div><div class="line">                matrix[j][n<span class="number">-1</span>-i]=t;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49 字母异位词分组"></a>49 字母异位词分组</h1><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</div><div class="line">  [&quot;nat&quot;,&quot;tan&quot;],</div><div class="line">  [&quot;bat&quot;]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>说明</strong>：</p>
<p>所有输入均为小写字母。</p>
<p>不考虑答案输出的顺序。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; groupAnagrams(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs) </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;anagram;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">            change_to_vec(strs[i],vec);</div><div class="line">            <span class="keyword">if</span>(anagram.find(vec)==anagram.end())</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; item;</div><div class="line">                anagram[vec]=item;</div><div class="line">            &#125;</div><div class="line">            anagram[vec].push_back(strs[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;::iterator it;</div><div class="line">        <span class="keyword">for</span>(it=anagram.begin();it!=anagram.end();it++)</div><div class="line">        &#123;</div><div class="line">            res.push_back((*it).second);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_to_vec</span><span class="params">(<span class="built_in">string</span> &amp;str,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</div><div class="line">        &#123;</div><div class="line">            vec[str[i]-<span class="string">'a'</span>]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="51-N皇后（回到目录）"><a href="#51-N皇后（回到目录）" class="headerlink" title="51 N皇后（回到目录）"></a>51 N皇后（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; solveNQueens(<span class="keyword">int</span> n) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mark;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; location;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            mark.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                mark[i].push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            location.push_back(<span class="string">""</span>);<span class="comment">//字符串向量的初始化</span></div><div class="line">            location[i].append(n,<span class="string">'.'</span>);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        generate(<span class="number">0</span>,n,location,result,mark);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;location,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; &amp;result,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;mark)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(k==n)</div><div class="line">        &#123;</div><div class="line">            result.push_back(location);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(mark[k][i]==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; temp_mark;</div><div class="line">                temp_mark=mark;</div><div class="line">                location[k][i]=<span class="string">'Q'</span>;</div><div class="line">                put_down_queen(k,i,mark);</div><div class="line">                generate(k+<span class="number">1</span>,n,location,result,mark);</div><div class="line">                mark=temp_mark;</div><div class="line">                location[k][i]=<span class="string">'.'</span>;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put_down_queen</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;mark)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</div><div class="line">        mark[x][y]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;mark.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> new_x=x+i*dx[j];</div><div class="line">                <span class="keyword">int</span> new_y=y+i*dy[j];</div><div class="line">                <span class="keyword">if</span>(new_x&gt;=<span class="number">0</span> &amp;&amp; new_x&lt;mark.size() &amp;&amp; new_y&gt;=<span class="number">0</span> &amp;&amp; new_y&lt;mark.size())</div><div class="line">                &#123;</div><div class="line">                    mark[new_x][new_y]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53 最大子序和"></a>53 最大子序和</h1><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</div><div class="line">输出: 6</div><div class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</div></pre></td></tr></table></figure></p>
<p>进阶:</p>
<p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(nums.size()+<span class="number">6</span>,<span class="number">0</span>);</div><div class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> max_res=dp[<span class="number">0</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=max(dp[i<span class="number">-1</span>]+nums[i],nums[i]);</div><div class="line">            <span class="keyword">if</span>(max_res&lt;dp[i])</div><div class="line">            &#123;</div><div class="line">                max_res=dp[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_res;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="55-跳跃游戏（回到目录）"><a href="#55-跳跃游戏（回到目录）" class="headerlink" title="55 跳跃游戏（回到目录）"></a>55 跳跃游戏（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>
<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>
<p>判断你是否能够到达最后一个位置。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [2,3,1,1,4]</div><div class="line">输出: true</div><div class="line">解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [3,2,1,0,4]</div><div class="line">输出: false</div><div class="line">解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canjump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; index;</div><div class="line">        <span class="keyword">int</span> jump=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            index.push_back(i+nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> max_jump=index[<span class="number">0</span>];</div><div class="line">        <span class="keyword">while</span>(jump&lt;index.size() &amp;&amp; jump&lt;max_jump)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(max_jump&lt;index[jump])</div><div class="line">            &#123;</div><div class="line">                max_jump=index[jump];</div><div class="line">            &#125;</div><div class="line">            jump++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(jump==index.size()</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="61-旋转链表（回到目录）"><a href="#61-旋转链表（回到目录）" class="headerlink" title="61 旋转链表（回到目录）"></a>61 旋转链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</div><div class="line"></div><div class="line">输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</div><div class="line"></div><div class="line">解释:</div><div class="line"></div><div class="line">向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</div><div class="line"></div><div class="line">向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4</div><div class="line"></div><div class="line">输出: 2-&gt;0-&gt;1-&gt;NULL</div><div class="line"></div><div class="line">解释:</div><div class="line"></div><div class="line">向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL</div><div class="line"></div><div class="line">向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL</div><div class="line"></div><div class="line">向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL</div><div class="line"></div><div class="line">向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</div><div class="line"></div><div class="line">**链表移动位置和数组不一样**</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">rotateRight</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">int</span> len=<span class="number">1</span>;</div><div class="line">        ListNode* p=head;</div><div class="line">        <span class="keyword">while</span>(p-&gt;next)<span class="comment">//注意这里一定要使用p-&gt;next,不然编译器会报错。</span></div><div class="line">        &#123;</div><div class="line">            len++;</div><div class="line">            p=p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        p-&gt;next=head;</div><div class="line">        <span class="keyword">int</span> begin_pos=len-k%len<span class="number">-1</span>;</div><div class="line">        ListNode* cur=head;</div><div class="line">        <span class="keyword">while</span>(begin_pos)</div><div class="line">        &#123;</div><div class="line">            begin_pos--;</div><div class="line">            cur=cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* new_head=cur-&gt;next;</div><div class="line">        cur-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> new_head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64 最小路径和"></a>64 最小路径和</h1><p>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>
<p>说明：每次只能向下或者向右移动一步。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入:</div><div class="line">[</div><div class="line">  [1,3,1],</div><div class="line">  [1,5,1],</div><div class="line">  [4,2,1]</div><div class="line">]</div><div class="line">输出: 7</div><div class="line">解释: 因为路径 1→3→1→1→1 的总和最小。</div></pre></td></tr></table></figure></p>
<p>代码1：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(grid.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> row=grid.size();</div><div class="line">        <span class="keyword">int</span> col=grid[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;dp(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,<span class="number">0</span>));</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=grid[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;col;j++)</div><div class="line">        &#123;</div><div class="line">            dp[<span class="number">0</span>][j]=grid[<span class="number">0</span>][j]+dp[<span class="number">0</span>][j<span class="number">-1</span>];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;row;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i][<span class="number">0</span>]=grid[i][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;col;j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])+grid[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[row<span class="number">-1</span>][col<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>代码2：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = grid.size();</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">if</span>(m == <span class="number">0</span> || n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) </div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = grid[i][j];</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">0</span>) </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i][j<span class="number">-1</span>] + grid[i][j];</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>) </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] + grid[i][j];</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> </div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]) + grid[i][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="66-加一（回到目录）"><a href="#66-加一（回到目录）" class="headerlink" title="66 加一（回到目录）"></a>66 加一（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非负整数组成的非空数组，在该数的基础上加一，返回一个新的数组。</p>
<p>最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。</p>
<p>你可以假设除了整数 0 之外，这个整数不会以零开头。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; plusOne(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=digits.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(digits[i]!=<span class="number">9</span>)</div><div class="line">            &#123;</div><div class="line">                digits[i]++;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                digits[i]=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(digits[<span class="number">0</span>]==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                digits[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">                digits.push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> digits;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="67-二进制求和（回到目录）"><a href="#67-二进制求和（回到目录）" class="headerlink" title="67 二进制求和（回到目录）"></a>67 二进制求和（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定两个二进制字符串，返回他们的和（用二进制表示）。</p>
<p>输入为非空字符串且只包含数字 1 和 0。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: a = &quot;11&quot;, b = &quot;1&quot;</div><div class="line">输出: &quot;100&quot;</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: a = &quot;1010&quot;, b = &quot;1011&quot;</div><div class="line">输出: &quot;10101&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">addBinary</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">int</span> len_a=a.size();</div><div class="line">        <span class="keyword">int</span> len_b=b.size();</div><div class="line">        <span class="keyword">int</span> n=max(len_a,len_b);</div><div class="line">        <span class="keyword">int</span> carry=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(len_a&gt;len_b)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len_a-len_b;i++)</div><div class="line">            &#123;</div><div class="line">                b.insert(b.begin(),<span class="string">'0'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len_b&gt;len_a)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len_b-len_a;i++)</div><div class="line">            &#123;</div><div class="line">                a.insert(a.begin(),<span class="string">'0'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> temp=<span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(carry)</div><div class="line">            &#123;</div><div class="line">                temp=(a[i]-<span class="string">'0'</span>)+(b[i]-<span class="string">'0'</span>)+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                temp=(a[i]-<span class="string">'0'</span>)+(b[i]-<span class="string">'0'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">switch</span>(temp)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    res.insert(res.begin(),<span class="string">'0'</span>);</div><div class="line">                    carry=<span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    res.insert(res.begin(),<span class="string">'1'</span>);</div><div class="line">                    carry=<span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                    res.insert(res.begin(),<span class="string">'0'</span>);</div><div class="line">                    carry=<span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                    res.insert(res.begin(),<span class="string">'1'</span>);</div><div class="line">                    carry=<span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(carry)</div><div class="line">        &#123;</div><div class="line">            res.insert(res.begin(),<span class="string">'1'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="69-x-的平方根（回到目录）"><a href="#69-x-的平方根（回到目录）" class="headerlink" title="69 x 的平方根（回到目录）"></a>69 x 的平方根（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>实现 int sqrt(int x) 函数。</p>
<p>计算并返回 x 的平方根，其中 x 是非负整数。</p>
<p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: 4</div><div class="line">输出: 2</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: 8</div><div class="line">输出: 2</div><div class="line">说明: 8 的平方根是 2.82842..., </div><div class="line">     由于返回类型是整数，小数部分将被舍去</div></pre></td></tr></table></figure></p>
<p><strong>解法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>,  high = x, mid;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">2</span>) <span class="keyword">return</span> x; <span class="comment">// to avoid mid = 0</span></div><div class="line">        <span class="keyword">while</span>(low&lt;high)</div><div class="line">        &#123;</div><div class="line">            mid = (low + high)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(x/mid &gt;= mid) low = mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> high = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> high<span class="number">-1</span>;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>解法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原来的i是int,不通过，改成long之后，就可以了</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n=x/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">2</span>) <span class="keyword">return</span> x; </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(x&gt;=i*i &amp;&amp; x&lt;(i+<span class="number">1</span>)*(i+<span class="number">1</span>))</div><div class="line">            &#123;</div><div class="line">                res=i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="70-爬楼梯答（回到目录）"><a href="#70-爬楼梯答（回到目录）" class="headerlink" title="70 爬楼梯答（回到目录）"></a>70 爬楼梯答（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>假设你正在爬楼梯。需要 n 步你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例 1：</div><div class="line">输入： 2</div><div class="line">输出： 2</div><div class="line">解释： 有两种方法可以爬到楼顶。</div><div class="line">1.  1 步 + 1 步</div><div class="line">2.  2 步</div><div class="line"></div><div class="line">示例 2：</div><div class="line">输入： 3</div><div class="line">输出： 3</div><div class="line">解释： 有三种方法可以爬到楼顶。</div><div class="line">1.  1 步 + 1 步 + 1 步</div><div class="line">2.  1 步 + 2 步</div><div class="line">3.  2 步 + 1 步</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n,<span class="number">0</span>);</div><div class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">        dp[<span class="number">2</span>]=<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[n];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76 最小覆盖子串"></a>76 最小覆盖子串</h1><p>给定一个字符串 S 和一个字符串 T，请在 S 中找出包含 T 所有字母的最小子串。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: S = &quot;ADOBECODEBANC&quot;, T = &quot;ABC&quot;</div><div class="line">输出: &quot;BANC&quot;</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<p>如果 S 中不存这样的子串，则返回空字符串 “”。<br>如果 S 中存在这样的子串，我们保证它是唯一的答案。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_window_ok</span><span class="params">(<span class="keyword">int</span> map_s[], <span class="keyword">int</span> <span class="keyword">map_t</span>[], <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="keyword">vec_t</span>)</span></span>&#123;</div><div class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">vec_t</span>.size(); i++)&#123;</div><div class="line">    		<span class="keyword">if</span> (map_s[<span class="keyword">vec_t</span>[i]] &lt; <span class="keyword">map_t</span>[<span class="keyword">vec_t</span>[i]])&#123;</div><div class="line">		    	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		    &#125;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">minWindow</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s, <span class="built_in">std</span>::<span class="built_in">string</span> t)</span> </span>&#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> MAX_ARRAY_LEN = <span class="number">128</span>;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">map_t</span>[MAX_ARRAY_LEN] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">int</span> map_s[MAX_ARRAY_LEN] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="keyword">vec_t</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++)&#123;</div><div class="line">        	<span class="keyword">map_t</span>[t[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_ARRAY_LEN; i++)&#123;</div><div class="line">        	<span class="keyword">if</span> (<span class="keyword">map_t</span>[i] &gt; <span class="number">0</span>)&#123;</div><div class="line">	        	<span class="keyword">vec_t</span>.push_back(i);</div><div class="line">	        &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> window_begin = <span class="number">0</span>;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</div><div class="line">        	map_s[s[i]]++;</div><div class="line">        	<span class="keyword">while</span>(window_begin &lt; i)&#123;</div><div class="line">        		<span class="keyword">char</span> begin_ch = s[window_begin];</div><div class="line">	        	<span class="keyword">if</span> (<span class="keyword">map_t</span>[begin_ch] == <span class="number">0</span>)&#123;</div><div class="line">	        		window_begin++;</div><div class="line">	        	&#125;</div><div class="line">	        	<span class="keyword">else</span> <span class="keyword">if</span>	(map_s[begin_ch] &gt; <span class="keyword">map_t</span>[begin_ch])&#123;</div><div class="line">	        		map_s[begin_ch]--;</div><div class="line">	        		window_begin++;</div><div class="line">	        	&#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    &#123;<span class="keyword">break</span>;&#125;</div><div class="line"></div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">if</span> (is_window_ok(map_s, <span class="keyword">map_t</span>, <span class="keyword">vec_t</span>))&#123;</div><div class="line">        		<span class="keyword">int</span> new_window_len = i - window_begin + <span class="number">1</span>;</div><div class="line">        		<span class="keyword">if</span> (result == <span class="string">""</span> || result.length() &gt; new_window_len)&#123;</div><div class="line">		        	result = s.substr(window_begin, new_window_len);</div><div class="line">				&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="77-组合（回到目录）"><a href="#77-组合（回到目录）" class="headerlink" title="77 组合（回到目录）"></a>77 组合（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>
<p><strong>示例</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">输入: n = 4, k = 2</div><div class="line"></div><div class="line">输出:</div><div class="line">[</div><div class="line">  [2,4],</div><div class="line">  [3,4],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  [1,3],</div><div class="line">  [1,4],</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>递归回溯</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item(<span class="number">0</span>,k);</div><div class="line">        <span class="keyword">if</span>(k&gt;n) <span class="keyword">return</span> res;</div><div class="line">        generate(n,k,<span class="number">0</span>,<span class="number">0</span>,item,res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> numOfDigit,<span class="keyword">int</span> begin,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(numOfDigit==k)</div><div class="line">        &#123;</div><div class="line">            res.push_back(item);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(i+<span class="number">1</span>);</div><div class="line">            generate(n,k,numOfDigit+<span class="number">1</span>,i+<span class="number">1</span>,item,res);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="78-子集（回到目录）"><a href="#78-子集（回到目录）" class="headerlink" title="78 子集（回到目录）"></a>78 子集（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">输入: nums = [1,2,3]</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [3],</div><div class="line">  [1],</div><div class="line">  [2],</div><div class="line">  [1,2,3],</div><div class="line">  [1,3],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>小象写法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,nums,item,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp;result)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size()) <span class="keyword">return</span>;</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        result.push_back(item);</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result);</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>for循环里递归</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//for循环</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        res.push_back(item);</div><div class="line">        sort(nums.begin(),nums.end());<span class="comment">//解答错误不是没有排序的问题</span></div><div class="line">        generate(res,item,nums,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(nums[i]);</div><div class="line">            res.push_back(item);</div><div class="line">            generate(res,item,nums,i+<span class="number">1</span>);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="90-子集-II（回到目录）"><a href="#90-子集-II（回到目录）" class="headerlink" title="90 子集 II（回到目录）"></a>90 子集 II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,2]</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [2],</div><div class="line">  [1],</div><div class="line">  [1,2,2],</div><div class="line">  [2,2],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>小象解法</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsetsWithDup(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res_set;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,nums,item,result,res_set);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;result, <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res_set)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size())</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(res_set.find(item)==res_set.end())</div><div class="line">        &#123;</div><div class="line">            result.push_back(item);</div><div class="line">            res_set.insert(item);</div><div class="line">        &#125;</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>for循环里面递归</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsetsWithDup(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        res.push_back(item);</div><div class="line">        sort(nums.begin(),nums.end());<span class="comment">//解答错误不是没有排序的问题</span></div><div class="line">        generate(res,item,nums,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(nums[i]);</div><div class="line">            res.push_back(item);</div><div class="line">            generate(res,item,nums,i+<span class="number">1</span>);</div><div class="line">            item.pop_back();</div><div class="line">            <span class="keyword">while</span>(i+<span class="number">1</span>&lt;nums.size() &amp;&amp; nums[i]==nums[i+<span class="number">1</span>]) i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="82-删除排序链表中的重复元素II（回到目录）"><a href="#82-删除排序链表中的重复元素II（回到目录）" class="headerlink" title="82 删除排序链表中的重复元素II（回到目录）"></a>82 删除排序链表中的重复元素II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</div><div class="line"></div><div class="line">输出: 1-&gt;2-&gt;5</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;1-&gt;1-&gt;2-&gt;3</div><div class="line"></div><div class="line">输出: 2-&gt;3</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>新建链表头结点指针<code>pDel，pDel-&gt;next=head</code>，并设置指针<code>prev</code>指针指向<code>pDel</code>，<code>curr</code>指针指向<code>head-&gt;next</code>（代表遍历指针）;当<code>curr-&gt;next</code>不为<code>NULL</code>，如果<code>curr-&gt;next-&gt;val == curr-&gt;val，curr=curr-&gt;next</code>；如果<code>curr-&gt;next-&gt;val != curr-&gt;val</code>；则需判断<code>prev-&gt;next=curr</code>？如果是，则<code>prev=curr</code>；如果不是，则<code>prev-&gt;next=curr-&gt;next</code>.（这里是说，<code>prev</code>先假设一个<code>next</code>指针，即<code>curr=curr-&gt;next</code>；当进行下一步判断时，如果<code>curr-&gt;next-&gt;val != curr-&gt;val</code> 且 <code>prev-&gt;next==curr</code>，则说明假设正确，prev直接指向curr）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这题一定要借用头节点，来获取pre指针。</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;             </div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span> || head-&gt;next==<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        &#125;</div><div class="line">        ListNode* pre_head=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        pre_head-&gt;next=head;</div><div class="line">        ListNode* pre=pre_head;</div><div class="line">        ListNode* cur=head;</div><div class="line">        <span class="keyword">while</span>(cur-&gt;next)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur-&gt;val != cur-&gt;next-&gt;val)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(pre-&gt;next==cur)</div><div class="line">                &#123;</div><div class="line">                    pre=cur;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    pre-&gt;next=cur-&gt;next;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            cur=cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(pre-&gt;next !=cur)</div><div class="line">        &#123;</div><div class="line">            pre-&gt;next=cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre_head-&gt;next;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="83-删除排序链表中的重复元素（回到目录）"><a href="#83-删除排序链表中的重复元素（回到目录）" class="headerlink" title="83 删除排序链表中的重复元素（回到目录）"></a>83 删除排序链表中的重复元素（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p>
<p>示例1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;1-&gt;2</div><div class="line"></div><div class="line">输出: 1-&gt;2</div></pre></td></tr></table></figure>
<p>示例2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</div><div class="line"></div><div class="line">输出: 1-&gt;2-&gt;3</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        ListNode* pre=head;</div><div class="line">        ListNode* cur=head-&gt;next;</div><div class="line">        <span class="keyword">while</span>(cur)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(cur-&gt;val==pre-&gt;val)</div><div class="line">            &#123;</div><div class="line">                pre-&gt;next=cur-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                pre=pre-&gt;next;</div><div class="line">            &#125;</div><div class="line">            cur=cur-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="86-分割链表（回到目录）"><a href="#86-分割链表（回到目录）" class="headerlink" title="86 分割链表（回到目录）"></a>86 分割链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。</p>
<p>你应当保留两个分区中每个节点的初始相对位置。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3</div><div class="line">输出: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="keyword">int</span> x)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="function">ListNode <span class="title">less_head</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        <span class="function">ListNode <span class="title">more_head</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode* less_ptr= &amp;less_head;</div><div class="line">        ListNode* more_ptr= &amp;more_head;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head-&gt;val &lt;x)</div><div class="line">            &#123;</div><div class="line">                less_ptr-&gt;next=head;</div><div class="line">                less_ptr=head;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                more_ptr-&gt;next=head;</div><div class="line">                more_ptr=head;</div><div class="line">            &#125;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        less_ptr-&gt;next=more_head.next;</div><div class="line">        more_ptr-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> less_head.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="88-合并有序数组"><a href="#88-合并有序数组" class="headerlink" title="88 合并有序数组"></a>88 合并有序数组</h1><p>给定两个有序整数数组<code>nums1</code>和 <code>nums2</code>，将<code>nums2</code> 合并到<code>nums1</code> 中，使得<code>num1</code>成为一个有序数组。</p>
<p>说明:</p>
<p>初始化 <code>nums1</code>和 <code>nums2</code>的元素数量分别为<code>m</code> 和<code>n</code>。<br>你可以假设<code>nums1</code>有足够的空间（空间大小大于或等于 <code>m + n</code>）来保存<code>nums2</code>中的元素。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: </div><div class="line">nums1 = [1,2,3,0,0,0], m = 3</div><div class="line"></div><div class="line">nums2 = [2,5,6],       n = 3</div><div class="line"></div><div class="line">输出: [1,2,2,3,5,6]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i=m<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> j=n<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> k=m+n<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums2[j]&gt;=nums1[i])</div><div class="line">            &#123;</div><div class="line">                nums1[k]=nums2[j];</div><div class="line">                k--;</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                nums1[k]=nums1[i];</div><div class="line">                k--;</div><div class="line">                i--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            nums1[k]=nums2[j];</div><div class="line">            k--;</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="92-反转链表II（回到目录）"><a href="#92-反转链表II（回到目录）" class="headerlink" title="92 反转链表II（回到目录）"></a>92 反转链表II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p>
<p>说明:<br><code>1 ≤ m ≤ n ≤ 链表长度</code>。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</div><div class="line">输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> list_len=n-m+<span class="number">1</span>;</div><div class="line">        ListNode* pre_head=<span class="literal">NULL</span>;</div><div class="line">        ListNode* result=head;</div><div class="line">        <span class="keyword">while</span>(head &amp;&amp; --m)</div><div class="line">        &#123;</div><div class="line">            pre_head=head;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* modify_list_tail=head;</div><div class="line">        ListNode* new_head=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(head &amp;&amp; list_len)</div><div class="line">        &#123;</div><div class="line">            ListNode* next=head-&gt;next;</div><div class="line">            head-&gt;next=new_head;</div><div class="line">            new_head=head;</div><div class="line">            head=next;</div><div class="line">            list_len--;</div><div class="line">        &#125;</div><div class="line">        modify_list_tail-&gt;next=head;</div><div class="line">        <span class="keyword">if</span>(pre_head)</div><div class="line">        &#123;</div><div class="line">            pre_head-&gt;next=new_head;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            result=new_head;</div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="94-二叉树的中序遍历（144，145）（回到目录）"><a href="#94-二叉树的中序遍历（144，145）（回到目录）" class="headerlink" title="94 二叉树的中序遍历（144，145）（回到目录）"></a>94 二叉树的中序遍历（144，145）（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><strong>递归方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        if(root==NULL) return res;</div><div class="line">        vector&lt;int&gt; temp1=inorderTraversal(root-&gt;left);</div><div class="line">        for(int i=0;i&lt;temp1.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp1[i]);</div><div class="line">        &#125;</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        </div><div class="line">        vector&lt;int&gt; temp2=inorderTraversal(root-&gt;right);</div><div class="line">        for(int i=0;i&lt;temp2.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp2[i]);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    vector&lt;int&gt; res;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        if(root==NULL) return res;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        stack&lt;TreeNode*&gt; s;</div><div class="line">        s.push(root);</div><div class="line">        while(!s.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode* node=s.top();</div><div class="line">            if(node-&gt;left)</div><div class="line">            &#123;</div><div class="line">                s.push(node-&gt;left);</div><div class="line">                node-&gt;left=NULL;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                res.push_back(node-&gt;val);</div><div class="line">                s.pop();</div><div class="line">                if(node-&gt;right)</div><div class="line">                &#123;</div><div class="line">                    s.push(node-&gt;right);</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="101-对称二叉树（回到目录）"><a href="#101-对称二叉树（回到目录）" class="headerlink" title="101 对称二叉树（回到目录）"></a>101 对称二叉树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p>例如，二叉树<code>[1,2,2,3,4,4,3]</code> 是对称的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    1</div><div class="line">   / \</div><div class="line">  2   2</div><div class="line"> / \ / \</div><div class="line">3  4 4  3</div><div class="line">但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</div><div class="line"></div><div class="line">    1</div><div class="line">   / \</div><div class="line">  2   2</div><div class="line">   \   \</div><div class="line">   3    3</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* left,TreeNode* right)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(left==<span class="literal">NULL</span> &amp;&amp; right==<span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(left==<span class="literal">NULL</span> &amp;&amp; right!=<span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(left!=<span class="literal">NULL</span> &amp;&amp; right==<span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(left-&gt;val !=right-&gt;val)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">bool</span> res=(isSymmetric(left-&gt;left,right-&gt;right) &amp;&amp; isSymmetric(left-&gt;right,right-&gt;left));</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) </div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">bool</span> res=isSymmetric(root-&gt;left,root-&gt;right);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="102-二叉树的层次遍历"><a href="#102-二叉树的层次遍历" class="headerlink" title="102 二叉树的层次遍历"></a>102 二叉树的层次遍历</h1><p><strong>非递归</strong></p>
<p><strong>分析</strong>：先建立一个queue，然后先把根节点放进去，这时候找根节点的左右两个子节点，这时候去掉根节点，此时queue里的元素就是下一层的所有节点，用一个for循环遍历它们，然后存到一个一维向量里，遍历完之后再把这个一维向量存到二维向量里，以此类推，可以完成层序遍历。代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; levelOrder(TreeNode *root) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; oneLevel;</div><div class="line">            <span class="keyword">int</span> size = q.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">                TreeNode *node = q.front();</div><div class="line">                q.pop();</div><div class="line">                oneLevel.push_back(node-&gt;val);</div><div class="line">                <span class="keyword">if</span> (node-&gt;left) q.push(node-&gt;left);</div><div class="line">                <span class="keyword">if</span> (node-&gt;right) q.push(node-&gt;right);</div><div class="line">            &#125;</div><div class="line">            res.push_back(oneLevel);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>递归做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//递归方法</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        preorder(root,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res,<span class="keyword">int</span> depth)</span></span></div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(depth==res.size())</div><div class="line">        &#123;</div><div class="line">            res.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        res[depth].push_back(root-&gt;val);</div><div class="line">        preorder(root-&gt;left,res,depth+<span class="number">1</span>);</div><div class="line">        preorder(root-&gt;right,res,depth+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="104-二叉树的最大深度（递归）"><a href="#104-二叉树的最大深度（递归）" class="headerlink" title="104 二叉树的最大深度（递归）"></a>104 二叉树的最大深度（递归）</h1><p><strong>深度优先</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> depth=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left=maxDepth(root-&gt;left);</div><div class="line">        <span class="keyword">int</span> right=maxDepth(root-&gt;right);</div><div class="line">        depth=<span class="number">1</span>+max(left,right);</div><div class="line">        <span class="keyword">return</span> depth;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>宽度优先</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode *root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;TreeNode *&gt; q;</div><div class="line">    q.push(root);</div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    &#123;</div><div class="line">        ++ res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, n = q.size(); i &lt; n; ++ i)</div><div class="line">        &#123;</div><div class="line">            TreeNode *p = q.front();</div><div class="line">            q.pop();</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(p -&gt; left != <span class="literal">NULL</span>)</div><div class="line">                q.push(p -&gt; left);</div><div class="line">            <span class="keyword">if</span>(p -&gt; right != <span class="literal">NULL</span>)</div><div class="line">                q.push(p -&gt; right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="111-二叉树的最小深度（回到目录）"><a href="#111-二叉树的最小深度（回到目录）" class="headerlink" title="111 二叉树的最小深度（回到目录）"></a>111 二叉树的最小深度（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树，找出其最小深度。</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">class</span> Solution &#123;<span class="comment">//递归</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> depth=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left=minDepth(root-&gt;left);</div><div class="line">        <span class="keyword">int</span> right=minDepth(root-&gt;right);</div><div class="line">        <span class="keyword">if</span>(left==<span class="number">0</span> || right==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            depth=left+right+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            depth=<span class="number">1</span>+min(left,right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> depth;       </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="108-将有序数组转换为二叉搜索树（回到目录）"><a href="#108-将有序数组转换为二叉搜索树（回到目录）" class="headerlink" title="108 将有序数组转换为二叉搜索树（回到目录）"></a>108 将有序数组转换为二叉搜索树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p>
<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>
<p>示例:</p>
<p><code>给定有序数组: [-10,-3,0,5,9],</code></p>
<p><code>一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     0</div><div class="line">    / \</div><div class="line">  -3   9</div><div class="line">  /   /</div><div class="line">-10  5</div></pre></td></tr></table></figure></p>
<p> 代码<br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(nums[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">int</span> mid=nums.size()/<span class="number">2</span>;</div><div class="line">        TreeNode* root=<span class="keyword">new</span> TreeNode(nums[mid]);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left(nums.begin(),nums.begin()+mid);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right(nums.begin()+mid+<span class="number">1</span>,nums.end());</div><div class="line">        root-&gt;left=sortedArrayToBST(left);</div><div class="line">        root-&gt;right=sortedArrayToBST(right);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="109-有序链表转换二叉搜索树"><a href="#109-有序链表转换二叉搜索树" class="headerlink" title="109 有序链表转换二叉搜索树"></a>109 有序链表转换二叉搜索树</h1><p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p>
<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>
<p><strong>使用了递归，和那个24题差不多,关键是如何找到链表的中间位置。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//使用了递归，和那个24题差不多</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">sortedListToBST</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(head-&gt;next==<span class="literal">NULL</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> TreeNode(head-&gt;val));</div><div class="line">        &#125;</div><div class="line">        ListNode* fast=head-&gt;next-&gt;next;</div><div class="line">        ListNode* slow=head;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)<span class="comment">//这段代码是在找链表中间位置的元素</span></div><div class="line">        &#123;</div><div class="line">            fast=fast-&gt;next-&gt;next;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        TreeNode* root=<span class="keyword">new</span> TreeNode(slow-&gt;next-&gt;val);<span class="comment">//这就是找到的中间位置</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,root-&gt;val);</div><div class="line">        root-&gt;right=sortedListToBST(slow-&gt;next-&gt;next);</div><div class="line">        slow-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        root-&gt;left=sortedListToBST(head);</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="110-平衡二叉树（回到目录）"><a href="#110-平衡二叉树（回到目录）" class="headerlink" title="110 平衡二叉树（回到目录）"></a>110 平衡二叉树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">给定二叉树 [3,9,20,null,null,15,7]</div><div class="line"></div><div class="line">    3</div><div class="line">   / \</div><div class="line">  9  20</div><div class="line">    /  \</div><div class="line">   15   7</div><div class="line">返回 true 。</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">给定二叉树 [1,2,2,3,3,null,null,4,4]</div><div class="line"></div><div class="line">       1</div><div class="line">      / \</div><div class="line">     2   2</div><div class="line">    / \</div><div class="line">   3   3</div><div class="line">  / \</div><div class="line"> 4   4</div><div class="line">返回 false 。</div></pre></td></tr></table></figure></p>
<p>代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(depth(root-&gt;left)-depth(root-&gt;right))&gt;<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> isBalanced(root-&gt;left)&amp;&amp;isBalanced(root-&gt;right);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode* root)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>+max(depth(root-&gt;left),depth(root-&gt;right));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="112-路径之和（二叉树）（回到目录）"><a href="#112-路径之和（二叉树）（回到目录）" class="headerlink" title="112 路径之和（二叉树）（回到目录）"></a>112 路径之和（二叉树）（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>
<p><strong>说明</strong>: 叶子节点是指没有子节点的节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">bool</span> result=<span class="literal">false</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">        <span class="keyword">int</span> path_sum=<span class="number">0</span>;</div><div class="line">        preorder(root,path_sum,sum,path,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* node, <span class="keyword">int</span> &amp;path_sum,<span class="keyword">int</span> sum,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path,<span class="keyword">bool</span> &amp;result)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!node)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        path_sum=path_sum+node-&gt;val;</div><div class="line">        path.push_back(node-&gt;val);</div><div class="line">        <span class="keyword">if</span>(sum==path_sum &amp;&amp; !node-&gt;left &amp;&amp; !node-&gt;right)</div><div class="line">        &#123;</div><div class="line">            result=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        preorder(node-&gt;left,path_sum,sum,path,result);</div><div class="line">        preorder(node-&gt;right,path_sum,sum,path,result);</div><div class="line">        path_sum=path_sum-node-&gt;val;</div><div class="line">        path.pop_back();</div><div class="line">            </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118 杨辉三角"></a>118 杨辉三角</h1><p>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。<br><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; generate(<span class="keyword">int</span> numRows) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res(numRows,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">        <span class="comment">//vector&lt;vector&lt;int&gt; &gt;res;</span></div><div class="line">        <span class="keyword">if</span>(numRows==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">        res[<span class="number">0</span>].push_back(<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;numRows;i++)</div><div class="line">        &#123;</div><div class="line">            res[i].push_back(<span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</div><div class="line">            &#123;</div><div class="line">                res[i].push_back(res[i<span class="number">-1</span>][j<span class="number">-1</span>]+res[i<span class="number">-1</span>][j]);</div><div class="line">            &#125;</div><div class="line">            res[i].push_back(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="119-杨辉三角II（回到目录）"><a href="#119-杨辉三角II（回到目录）" class="headerlink" title="119 杨辉三角II（回到目录）"></a>119 杨辉三角II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。</p>
<p><strong>示例</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 3</div><div class="line">输出: [1,3,3,1]</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后面的覆盖前面的数据   节省空间</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getRow(<span class="keyword">int</span> rowIndex) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(rowIndex+<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=rowIndex;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;=<span class="number">1</span>;j--)</div><div class="line">            &#123;</div><div class="line">                res[j]=res[j]+res[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="125-验证回文串（回到目录）"><a href="#125-验证回文串（回到目录）" class="headerlink" title="125 验证回文串（回到目录）"></a>125 验证回文串（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p>说明：本题中，我们将空字符串定义为有效的回文串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</div><div class="line">输出: true</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: &quot;race a car&quot;</div><div class="line">输出: false</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> l=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> r=s.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(l&lt;r)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; !<span class="built_in">isalnum</span>(s[l])) l++;<span class="comment">//这两行的l&lt;r，一定要加上，不然“.,”就出错了</span></div><div class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; !<span class="built_in">isalnum</span>(s[r])) r--;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">toupper</span>(s[l]) !=<span class="built_in">toupper</span>(s[r]))</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">           &#125;</div><div class="line">            l++;r--;</div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="121-买卖股票的最佳时机（回到目录）"><a href="#121-买卖股票的最佳时机（回到目录）" class="headerlink" title="121 买卖股票的最佳时机（回到目录）"></a>121 买卖股票的最佳时机（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p><strong>注意你不能在买入股票前卖出股票</strong>。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [7,1,5,3,6,4]</div><div class="line">输出: 5</div></pre></td></tr></table></figure></p>
<p>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</p>
<p>注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [7,6,4,3,1]</div><div class="line">输出: 0</div></pre></td></tr></table></figure></p>
<p>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(prices.size()&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> max_pro=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp_min=prices[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> len=prices.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(temp_min&gt;prices[i])</div><div class="line">            &#123;</div><div class="line">                temp_min=prices[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> temp_max=prices[i]-temp_min;</div><div class="line">                max_pro=max(max_pro,temp_max);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_pro;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="134-加油站"><a href="#134-加油站" class="headerlink" title="134 加油站"></a>134 加油站</h1><p>在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。</p>
<p>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</p>
<p>说明: </p>
<p>如果题目有解，该答案即为唯一答案。<br>输入数组均为非空数组，且长度相同。<br>输入数组中的元素均为非负数。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">输入: </div><div class="line">gas  = [1,2,3,4,5]</div><div class="line">cost = [3,4,5,1,2]</div><div class="line"></div><div class="line">输出: 3</div><div class="line"></div><div class="line">解释:</div><div class="line">从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油</div><div class="line">开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油</div><div class="line">开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油</div><div class="line">开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油</div><div class="line">开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油</div><div class="line">开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。</div><div class="line">因此，3 可为起始索引。</div></pre></td></tr></table></figure></p>
<p><strong>贪心相关</strong>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; gas, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cost)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gas.size();i++)</div><div class="line">        &#123;</div><div class="line">            total=total+gas[i]-cost[i];</div><div class="line">            sum=sum+gas[i]-cost[i];</div><div class="line">            <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                start =i+<span class="number">1</span>;</div><div class="line">                sum=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(total&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> start;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="135-分发糖果（回到目录）"><a href="#135-分发糖果（回到目录）" class="headerlink" title="135 分发糖果（回到目录）"></a>135 分发糖果（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>老师想给孩子们分发糖果，有 N个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p>
<p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p>
<p>每个孩子至少分配到 1 个糖果。<br>相邻的孩子中，评分高的孩子必须获得更多的糖果。<br>那么这样下来，老师至少需要准备多少颗糖果呢？</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [1,0,2]</div><div class="line">输出: 5</div><div class="line">解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,2]</div><div class="line">输出: 4</div><div class="line">解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。 第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</div></pre></td></tr></table></figure></p>
<p><strong>思路</strong>：</p>
<p>假设每个孩子分到的糖果数组为<code>A[N]</code>，初始化为{1}，因为每个人至少分到一颗糖。</p>
<p>1、与前面的邻居比较，前向遍历权重数组ratings，如果<code>ratings[i]&gt;ratings[i-1]，则A[i]=A[i-1]+1</code>；</p>
<p>2、与后面的邻居比较，后向遍历权重数组ratings，如果<code>ratings[i]&gt;ratings[i+1]且A[i]&lt;A[i+1]+1</code>，则更新<code>A</code>，<code>A[i]=A[i+1]+1</code>；</p>
<p>3、对A求和即为最少需要的糖果。</p>
<p>时间复杂度：<code>O(n)</code></p>
<p>空间复杂度：<code>O(n)</code></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ratings)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len=ratings.size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums(len,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(ratings[i]&gt;ratings[i<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                nums[i]=nums[i<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sum=nums[len<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(ratings[i]&gt;ratings[i+<span class="number">1</span>] &amp;&amp; nums[i]&lt;nums[i+<span class="number">1</span>]+<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                nums[i]=nums[i+<span class="number">1</span>]+<span class="number">1</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            sum=sum+nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136 只出现一次的数字"></a>136 只出现一次的数字</h1><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>说明：</p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [2,2,1]</div><div class="line"></div><div class="line">输出: 1</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [4,1,2,1,2]</div><div class="line"></div><div class="line">输出: 4</div></pre></td></tr></table></figure></p>
<p><strong>我的做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash_map;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(hash_map[nums[i]]==<span class="number">1</span>)</div><div class="line">                res=nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>按位异或</strong><br>用到位运算之异或的特性：<code>n ^ n = 0, 0 ^ x = x。</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            res=res^nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="137-只出现一次的数字II（回到目录）"><a href="#137-只出现一次的数字II（回到目录）" class="headerlink" title="137 只出现一次的数字II（回到目录）"></a>137 只出现一次的数字II（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现三次。找出那个只出现了一次的元素。</p>
<p>说明：</p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p><strong>我的做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash_map;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(hash_map[nums[i]]==<span class="number">1</span>)</div><div class="line">                res=nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>位运算</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> length = nums.size();</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">32</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>; </div><div class="line">            <span class="keyword">int</span> mask = <span class="number">1</span>&lt;&lt; i;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;length; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(nums[j] &amp; mask)</div><div class="line">                    count++;</div><div class="line">            &#125;</div><div class="line">          <span class="keyword">if</span>(count %<span class="number">3</span>)</div><div class="line">                result |= mask;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="141-环形链表（回到目录）"><a href="#141-环形链表（回到目录）" class="headerlink" title="141 环形链表（回到目录）"></a>141 环形链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个链表，判断链表中是否有环。</p>
<p><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>&lt;ListNode*&gt; node_set;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node_set.find(head)!=node_set.end())</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            node_set.insert(head);</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span> || head-&gt;next==<span class="literal">NULL</span> || head-&gt;next-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        ListNode* fast=head;</div><div class="line">        ListNode* slow=head;</div><div class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</div><div class="line">        &#123;</div><div class="line">            fast=fast-&gt;next;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">            fast=fast-&gt;next;</div><div class="line">            <span class="keyword">if</span>(fast==slow)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142 环形链表II"></a>142 环形链表II</h1><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<p>说明：不允许修改给定的链表。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span></div><div class="line">    &#123;</div><div class="line">        ListNode* fast=head;</div><div class="line">        ListNode* slow=head;</div><div class="line">        ListNode* meet=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</div><div class="line">        &#123;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">            fast=fast-&gt;next-&gt;next;</div><div class="line">            <span class="keyword">if</span>(fast==slow)</div><div class="line">            &#123;</div><div class="line">                meet=fast;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(meet==<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(head &amp;&amp; meet)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head==meet)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            &#125;</div><div class="line">            head=head-&gt;next;</div><div class="line">            meet=meet-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144 二叉树的前序遍历"></a>144 二叉树的前序遍历</h1><p>题目描述提示帮助提交记录社区讨论阅读解答<br>给定一个二叉树，返回它的 前序 遍历。</p>
<p> 示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: [1,null,2,3]  </div><div class="line">   1</div><div class="line">    \</div><div class="line">     2</div><div class="line">    /</div><div class="line">   3 </div><div class="line">输出: [1,2,3]</div></pre></td></tr></table></figure></p>
<p><strong>进阶</strong>: 递归算法很简单，你可以通过迭代算法完成吗？</p>
<p><strong>递归方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp1=preorderTraversal(root-&gt;left);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp1.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp2=preorderTraversal(root-&gt;right);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp2.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp2[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        s.push(root);</div><div class="line">        <span class="keyword">while</span>(!s.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode* temp=s.top();</div><div class="line">            res.push_back(temp-&gt;val);</div><div class="line">            s.pop();</div><div class="line">            <span class="keyword">if</span>(temp-&gt;right)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;right);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp-&gt;left)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;left);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145 二叉树的后序遍历"></a>145 二叉树的后序遍历</h1><p>递归方法<br><strong>递归1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        postorder(root,res);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">private:</div><div class="line">    void postorder(TreeNode* root,vector&lt;int&gt; &amp;res)</div><div class="line">    &#123;</div><div class="line">        if(root==NULL)</div><div class="line">        &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        postorder(root-&gt;left,res);</div><div class="line">        postorder(root-&gt;right,res);</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>递归2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp1=postorderTraversal(root-&gt;left);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp1.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp2=postorderTraversal(root-&gt;right);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp2.size();i++)</div><div class="line">        &#123;</div><div class="line">            res.push_back(temp2[i]);</div><div class="line">        &#125;</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>迭代法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        if(root==NULL) return res;</div><div class="line">        stack&lt;TreeNode*&gt; s;</div><div class="line">        s.push(root);</div><div class="line">        while(!s.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode* temp=s.top();</div><div class="line">            s.pop();</div><div class="line">            res.push_back(temp-&gt;val);</div><div class="line">            if(temp-&gt;left)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;left);</div><div class="line">            &#125;</div><div class="line">            if(temp-&gt;right)</div><div class="line">            &#123;</div><div class="line">                s.push(temp-&gt;right);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //vector反转的两种方式</div><div class="line">        //return vector&lt;int&gt;(res.rbegin(),res.rend());//vector反转方式1</div><div class="line">        </div><div class="line">        reverse(res.begin(),res.end());//vector反转方式2</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="160-求两个链表的交点。-回到目录"><a href="#160-求两个链表的交点。-回到目录" class="headerlink" title="160 求两个链表的交点。(回到目录)"></a>160 求两个链表的交点。(<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>)</h1><p>已知链表A的头节点指针headA，链表B的头节点指针headB，两个链表相交，求两个链表交点对应的节点。</p>
<p><strong>方法一</strong>：使用std中的set函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">set</span>&lt;ListNode*&gt; node_set;</div><div class="line">        <span class="keyword">while</span>(headA)</div><div class="line">        &#123;</div><div class="line">            node_set.insert(headA);</div><div class="line">            headA=headA-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(headB)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node_set.find(headB)!=node_set.end())</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> headB;</div><div class="line">            &#125;</div><div class="line">            headB=headB-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法二</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> lenA=compute_len(headA);</div><div class="line">        <span class="keyword">int</span> lenB=compute_len(headB);</div><div class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(lenB&gt;lenA)</div><div class="line">        &#123;</div><div class="line">            t=lenB-lenA;</div><div class="line">            <span class="keyword">while</span>(headB &amp;&amp; t)</div><div class="line">            &#123;</div><div class="line">                headB=headB-&gt;next;</div><div class="line">                t--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(headA &amp;&amp; headB)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(headA==headB) <span class="keyword">return</span> headA;</div><div class="line">                headA=headA-&gt;next;</div><div class="line">                headB=headB-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            t=lenA-lenB;</div><div class="line">            <span class="keyword">while</span>(headA &amp;&amp; t)</div><div class="line">            &#123;</div><div class="line">                headA=headA-&gt;next;</div><div class="line">                t--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(headA &amp;&amp; headB)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(headA==headB) <span class="keyword">return</span> headB;</div><div class="line">                headA=headA-&gt;next;</div><div class="line">                headB=headB-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compute_len</span><span class="params">(ListNode* head)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            len++;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> len;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="169-求众数"><a href="#169-求众数" class="headerlink" title="169 求众数"></a>169 求众数</h1><p>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p>
<p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [3,2,3]</div><div class="line">输出: 3</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [2,2,1,1,1,2,2]</div><div class="line">输出: 2</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash_map;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[nums[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> temp=hash_map[nums[<span class="number">0</span>]];</div><div class="line">        <span class="keyword">int</span> res=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(hash_map[nums[i]]&gt;temp)</div><div class="line">            &#123;</div><div class="line">                temp=hash_map[nums[i]];</div><div class="line">                res=nums[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189 旋转数组"></a>189 旋转数组</h1><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p>
<p><strong>示例 1</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">输入: [1,2,3,4,5,6,7] 和 k = 3</div><div class="line"></div><div class="line">输出: [5,6,7,1,2,3,4]</div><div class="line"></div><div class="line">解释:</div><div class="line"></div><div class="line">向右旋转 1 步: [7,1,2,3,4,5,6]</div><div class="line"></div><div class="line">向右旋转 2 步: [6,7,1,2,3,4,5]</div><div class="line"></div><div class="line">向右旋转 3 步: [5,6,7,1,2,3,4]</div></pre></td></tr></table></figure></p>
<p><strong>示例 2</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">输入: [-1,-100,3,99] 和 k = 2</div><div class="line"></div><div class="line">输出: [3,99,-1,-100]</div><div class="line"></div><div class="line">解释: </div><div class="line"></div><div class="line">向右旋转 1 步: [99,-1,-100,3]</div><div class="line"></div><div class="line">向右旋转 2 步: [3,99,-1,-100]</div></pre></td></tr></table></figure></p>
<p><strong>我的做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> temp=nums[len<span class="number">-1</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=len<span class="number">-1</span>;j&gt;<span class="number">0</span>;j--)</div><div class="line">            &#123;</div><div class="line">                nums[j]=nums[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">            nums[<span class="number">0</span>]=temp;</div><div class="line">        &#125;     </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191 位1的个数"></a>191 位1的个数</h1><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p>
<p>示例 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 11</div><div class="line">输出: 3</div><div class="line">解释: 整数 11 的二进制表示为 00000000000000000000000000001011</div></pre></td></tr></table></figure></p>
<p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 128</div><div class="line">输出: 1</div><div class="line">解释: 整数 128 的二进制表示为 00000000000000000000000010000000</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>)</div><div class="line">            &#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">            n=n/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>法2</strong>:位运算<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(n&amp;(<span class="number">1</span>&lt;&lt;i)) res++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="199-二叉树的右视图（回到目录）"><a href="#199-二叉树的右视图（回到目录）" class="headerlink" title="199 二叉树的右视图（回到目录）"></a>199 二叉树的右视图（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><strong>递归做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//递归做法</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode *root, <span class="keyword">int</span> depth, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">if</span>(res.size()&lt;depth) res.push_back(root-&gt;val);</div><div class="line">        preorder(root-&gt;right, depth+<span class="number">1</span>, res);</div><div class="line">        preorder(root-&gt;left, depth+<span class="number">1</span>, res);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rightSideView(TreeNode *root) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        preorder(root, <span class="number">1</span>, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>普通方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rightSideView(TreeNode* root) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; view;</div><div class="line">        <span class="built_in">queue</span>&lt;pair&lt;TreeNode*,<span class="keyword">int</span>&gt; &gt;Q;</div><div class="line">        <span class="keyword">if</span>(root)</div><div class="line">        &#123;</div><div class="line">            Q.push(make_pair(root,<span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!Q.empty())</div><div class="line">        &#123;</div><div class="line">            TreeNode *node=Q.front().first;</div><div class="line">            <span class="keyword">int</span> depth=Q.front().second;</div><div class="line">            <span class="keyword">if</span>(view.size()==depth)</div><div class="line">            &#123;</div><div class="line">                view.push_back(node-&gt;val);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                view[depth]=node-&gt;val;</div><div class="line">            &#125;</div><div class="line">            Q.pop();</div><div class="line">            <span class="keyword">if</span>(node-&gt;left)</div><div class="line">            &#123;</div><div class="line">                Q.push(make_pair(node-&gt;left,depth+<span class="number">1</span>));</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(node-&gt;right)</div><div class="line">            &#123;</div><div class="line">                Q.push(make_pair(node-&gt;right,depth+<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="206-反转链表（回到目录）"><a href="#206-反转链表（回到目录）" class="headerlink" title="206 反转链表（回到目录）"></a>206 反转链表（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>反转一个单链表。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</div><div class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span></div><div class="line">    &#123;</div><div class="line">        ListNode* new_head=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            ListNode* next=head-&gt;next;</div><div class="line">            head-&gt;next=new_head;</div><div class="line">            new_head=head;</div><div class="line">            head=next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> new_head;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="215-数组中的第k个最大元素"><a href="#215-数组中的第k个最大元素" class="headerlink" title="215 数组中的第k个最大元素"></a>215 数组中的第k个最大元素</h1><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [3,2,1,5,6,4] 和 k = 2</div><div class="line"></div><div class="line">输出: 5</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k = 4</div><div class="line"></div><div class="line">输出: 4</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>,greater&lt;<span class="keyword">int</span>&gt; &gt;nums_set;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            nums_set.insert(nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ::iterator it=nums_set.begin();</div><div class="line">        <span class="keyword">if</span>(nums_set.size()&gt;=k)</div><div class="line">        &#123;</div><div class="line">            k=k<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(k)</div><div class="line">            &#123;</div><div class="line">                k--;</div><div class="line">                it++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> *it;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225 用队列实现栈"></a>225 用队列实现栈</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MyStack &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    MyStack() &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Push element x onto stack. */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; temp_queue;</div><div class="line">        temp_queue.push(x);</div><div class="line">        <span class="keyword">while</span>(!data_queue.empty())</div><div class="line">        &#123;</div><div class="line">            temp_queue.push(data_queue.front());</div><div class="line">            data_queue.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!temp_queue.empty())</div><div class="line">        &#123;</div><div class="line">            data_queue.push(temp_queue.front());</div><div class="line">            temp_queue.pop();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> x=data_queue.front();</div><div class="line">        data_queue.pop();</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get the top element. */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data_queue.front();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data_queue.empty();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; data_queue;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="226-翻转二叉树（回到目录）"><a href="#226-翻转二叉树（回到目录）" class="headerlink" title="226 翻转二叉树（回到目录）"></a>226 翻转二叉树（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p><strong>使用递归方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        TreeNode* temp=root-&gt;left;</div><div class="line">        root-&gt;left=invertTree(root-&gt;right);</div><div class="line">        root-&gt;right=invertTree(temp);</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>非递归</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Non-Recursion</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        q.push(root);</div><div class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">            TreeNode *node = q.front(); q.pop();</div><div class="line">            TreeNode *tmp = node-&gt;left;</div><div class="line">            node-&gt;left = node-&gt;right;</div><div class="line">            node-&gt;right = tmp;</div><div class="line">            <span class="keyword">if</span> (node-&gt;left) q.push(node-&gt;left);</div><div class="line">            <span class="keyword">if</span> (node-&gt;right) q.push(node-&gt;right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="258-各位相加（回到目录）"><a href="#258-各位相加（回到目录）" class="headerlink" title="258 各位相加（回到目录）"></a>258 各位相加（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入: 38</div><div class="line"></div><div class="line">输出: 2</div></pre></td></tr></table></figure></p>
<p>解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。</p>
<p>进阶:</p>
<p>你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p>
<p><strong>递归方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(num&lt;<span class="number">10</span>) <span class="keyword">return</span> num;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(num)  </div><div class="line">        &#123;</div><div class="line">            sum=num%<span class="number">10</span> +sum;</div><div class="line">            num=num/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> addDigits(sum);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>循环方法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i,sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(num != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                sum += num%<span class="number">10</span>;</div><div class="line">                num /= <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(sum &gt;= <span class="number">10</span>)</div><div class="line">            &#123;</div><div class="line">                num = sum;</div><div class="line">                sum = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="295-数据流的中位数（回到目录）"><a href="#295-数据流的中位数（回到目录）" class="headerlink" title="295 数据流的中位数（回到目录）"></a>295 数据流的中位数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>
<p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[2,3,4] 的中位数是 3</div><div class="line"></div><div class="line">[2,3] 的中位数是 (2 + 3) / 2 = 2.5</div><div class="line"></div><div class="line">设计一个支持以下两种操作的数据结构：</div><div class="line"></div><div class="line">void addNum(int num) - 从数据流中添加一个整数到数据结构中。</div><div class="line"></div><div class="line">double findMedian() - 返回目前所有元素的中位数。</div></pre></td></tr></table></figure></p>
<p><strong>示例</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">addNum(1)</div><div class="line"></div><div class="line">addNum(2)</div><div class="line"></div><div class="line">findMedian() -&gt; 1.5</div><div class="line"></div><div class="line">addNum(3) </div><div class="line"></div><div class="line">findMedian() -&gt; 2</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MedianFinder &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    MedianFinder() &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    	<span class="keyword">if</span> (big_queue.empty())&#123;</div><div class="line">	    	big_queue.push(num);</div><div class="line">	    	<span class="keyword">return</span>;</div><div class="line">	    &#125;</div><div class="line">        <span class="keyword">if</span> (big_queue.size() == small_queue.size())&#123;</div><div class="line">        	<span class="keyword">if</span> (num &lt; big_queue.top())&#123;</div><div class="line">	        	big_queue.push(num);</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">else</span>&#123;</div><div class="line">        		small_queue.push(num);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(big_queue.size() &gt; small_queue.size())&#123;</div><div class="line">        	<span class="keyword">if</span> (num &gt; big_queue.top())&#123;</div><div class="line">	        	small_queue.push(num);</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">else</span>&#123;</div><div class="line">        		small_queue.push(big_queue.top());</div><div class="line">        		big_queue.pop();</div><div class="line">        		big_queue.push(num);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(big_queue.size() &lt; small_queue.size())&#123;</div><div class="line">        	<span class="keyword">if</span> (num &lt; small_queue.top())&#123;</div><div class="line">	        	big_queue.push(num);</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">else</span>&#123;</div><div class="line">        		big_queue.push(small_queue.top());</div><div class="line">        		small_queue.pop();</div><div class="line">        		small_queue.push(num);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="keyword">if</span> (big_queue.size() == small_queue.size())&#123;</div><div class="line">        	<span class="keyword">return</span> (big_queue.top() + small_queue.top()) / <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (big_queue.size() &gt; small_queue.size())&#123;</div><div class="line">        	<span class="keyword">return</span> big_queue.top();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> small_queue.top();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="comment">//priority_queue&lt;double&gt; big_queue;//最大堆的两种定义方式</span></div><div class="line">    priority_queue&lt;<span class="keyword">double</span>,<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;,less&lt;<span class="keyword">double</span>&gt; &gt; big_queue;<span class="comment">//最大堆</span></div><div class="line">	priority_queue&lt;<span class="keyword">double</span>, <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;, greater&lt;<span class="keyword">double</span>&gt; &gt; small_queue;<span class="comment">//最小堆</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="315-计算右侧小于当前元素的个数（回到目录）"><a href="#315-计算右侧小于当前元素的个数（回到目录）" class="headerlink" title="315 计算右侧小于当前元素的个数（回到目录）"></a>315 计算右侧小于当前元素的个数（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个整数数组 nums，按要求返回一个新数组 counts。数组 counts 有该性质： counts[i] 的值是  nums[i] 右侧小于 nums[i] 的元素的数量。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: [5,2,6,1]</div><div class="line">输出: [2,1,1,0] </div><div class="line">解释:</div><div class="line">5 的右侧有 2 个更小的元素 (2 和 1).</div><div class="line">2 的右侧仅有 1 个更小的元素 (1).</div><div class="line">6 的右侧有 1 个更小的元素 (1).</div><div class="line">1 的右侧有 0 个更小的元素.</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">   &#123;</div><div class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count;</div><div class="line">       <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; vec;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">       &#123;</div><div class="line">           vec.push_back(make_pair(nums[i],i));</div><div class="line">           count.push_back(<span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">       merge_sort(vec,count);</div><div class="line">       <span class="keyword">return</span> count;</div><div class="line">   &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge_sort_two_vec</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;sub_vec1,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;sub_vec2,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;vec,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;count)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;sub_vec1.size() &amp;&amp; j&lt;sub_vec2.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sub_vec1[i].first&lt;=sub_vec2[j].first)</div><div class="line">            &#123;</div><div class="line">                count[sub_vec1[i].second] +=j;</div><div class="line">                vec.push_back(sub_vec1[i]);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                vec.push_back(sub_vec2[j]);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;i&lt;sub_vec1.size();i++)</div><div class="line">        &#123;   </div><div class="line">            count[sub_vec1[i].second] +=j;</div><div class="line">            vec.push_back(sub_vec1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;j&lt;sub_vec2.size();j++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec2[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;vec,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;count)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(vec.size()&lt;<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid=vec.size()/<span class="number">2</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; sub_vec1;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; sub_vec2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid;i++)</div><div class="line">        &#123;</div><div class="line">            sub_vec1.push_back(vec[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid;i&lt;vec.size();i++)</div><div class="line">        &#123;</div><div class="line">            sub_vec2.push_back(vec[i]);</div><div class="line">        &#125;</div><div class="line">        merge_sort(sub_vec1,count);</div><div class="line">        merge_sort(sub_vec2,count);</div><div class="line">        vec.clear();</div><div class="line">        merge_sort_two_vec(sub_vec1,sub_vec2,vec,count);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="389-找不同"><a href="#389-找不同" class="headerlink" title="389 找不同"></a>389 找不同</h1><p>给定两个字符串 s 和 t，它们只包含小写字母。</p>
<p>字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。</p>
<p>请找出在 t 中被添加的字母。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入：</div><div class="line">s = &quot;abcd&quot;</div><div class="line">t = &quot;abcde&quot;</div><div class="line">输出：</div><div class="line">e</div><div class="line">解释：</div><div class="line">&apos;e&apos; 是那个被添加的字母。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; hash_map;</div><div class="line">        <span class="keyword">char</span> res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[t[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</div><div class="line">        &#123;</div><div class="line">            hash_map[s[i]]--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(hash_map[t[i]]==<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                res=t[i];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="402-移掉k个数字（回到目录）"><a href="#402-移掉k个数字（回到目录）" class="headerlink" title="402 移掉k个数字（回到目录）"></a>402 移掉k个数字（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。</p>
<p>注意:</p>
<p>num 的长度小于 10002 且 ≥ k。<br>num 不会包含任何前导零。</p>
<p>示例 1 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: num = &quot;1432219&quot;, k = 3</div><div class="line">输出: &quot;1219&quot;</div><div class="line">解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。</div></pre></td></tr></table></figure></p>
<p>示例 2 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: num = &quot;10200&quot;, k = 1</div><div class="line">输出: &quot;200&quot;</div><div class="line">解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。</div></pre></td></tr></table></figure></p>
<p>示例 3 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: num = &quot;10&quot;, k = 2</div><div class="line">输出: &quot;0&quot;</div><div class="line">解释: 从原数字移除所有的数字，剩余为空就是0。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeKdigits</span><span class="params">(<span class="built_in">string</span> num, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line">        <span class="built_in">string</span> result=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> number=num[i]-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">while</span>(S.size()!=<span class="number">0</span> &amp;&amp; k&gt;<span class="number">0</span> &amp;&amp; S[S.size()<span class="number">-1</span>]&gt;number)</div><div class="line">            &#123;</div><div class="line">                S.pop_back();</div><div class="line">                k--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(number !=<span class="number">0</span> || S.size()!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                S.push_back(number);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">while</span>(k&gt;<span class="number">0</span> &amp;&amp; S.size()!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                S.pop_back();</div><div class="line">                k--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S.size();i++)</div><div class="line">            &#123;</div><div class="line">                result.append(<span class="number">1</span>,<span class="string">'0'</span>+S[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(result==<span class="string">""</span>)</div><div class="line">            &#123;</div><div class="line">                result=<span class="string">"0"</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="414-第三大的数"><a href="#414-第三大的数" class="headerlink" title="414 第三大的数"></a>414 第三大的数</h1><p>给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [3, 2, 1]</div><div class="line"></div><div class="line">输出: 1</div><div class="line"></div><div class="line">解释: 第三大的数是 1.</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [1, 2]</div><div class="line"></div><div class="line">输出: 2</div><div class="line"></div><div class="line">解释: 第三大的数不存在, 所以返回最大的数 2 .</div><div class="line">示例 3:</div><div class="line"></div><div class="line">输入: [2, 2, 3, 1]</div><div class="line"></div><div class="line">输出: 1</div><div class="line"></div><div class="line">解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。</div><div class="line">存在两个值为2的数，它们都排第二。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">thirdMax</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>,greater&lt;<span class="keyword">int</span>&gt; &gt;nums_set;<span class="comment">//从大到小排序</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            nums_set.insert(nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ::iterator it=nums_set.begin();</div><div class="line">        <span class="keyword">if</span>(nums_set.size()&gt;=<span class="number">3</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> k=<span class="number">2</span>;</div><div class="line">            <span class="keyword">while</span>(k)</div><div class="line">            &#123;</div><div class="line">                k--;</div><div class="line">                it++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> *it;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="520-检测大写字母（回到目录）"><a href="#520-检测大写字母（回到目录）" class="headerlink" title="520 检测大写字母（回到目录）"></a>520 检测大写字母（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个单词，你需要判断单词的大写使用是否正确。</p>
<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>
<p>全部字母都是大写，比如”USA”。<br>单词中所有字母都不是大写，比如”leetcode”。<br>如果单词不只含有一个字母，只有首字母大写， 比如 “Google”。<br>否则，我们定义这个单词没有正确使用大写字母。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: &quot;USA&quot;</div><div class="line">输出: True</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: &quot;FlaG&quot;</div><div class="line">输出: False</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>: 输入是由大写和小写拉丁字母组成的非空单词。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">detectCapitalUse</span><span class="params">(<span class="built_in">string</span> word)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=word.size();</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(word[i]&lt;=<span class="string">'Z'</span> &amp;&amp; word[i]&gt;=<span class="string">'A'</span>)</div><div class="line">            &#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>((cnt==<span class="number">1</span> &amp;&amp; word[<span class="number">0</span>]&lt;=<span class="string">'Z'</span> &amp;&amp; word[<span class="number">0</span>]&gt;=<span class="string">'A'</span>) || cnt==len || cnt==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="633-平方数之和"><a href="#633-平方数之和" class="headerlink" title="633 平方数之和"></a>633 平方数之和</h1><p>给定一个非负整数c,你要判断是否存在两个整数a和b，使得<code>$a^{2}+b^{2}=c$</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例1:</div><div class="line"></div><div class="line">输入: 5</div><div class="line"></div><div class="line">输出: True</div><div class="line"></div><div class="line">解释: 1 * 1 + 2 * 2 = 5</div><div class="line"> </div><div class="line"></div><div class="line">示例2:</div><div class="line"></div><div class="line">输入: 3</div><div class="line"></div><div class="line">输出: False</div></pre></td></tr></table></figure></p>
<p>我的做法如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="built_in">sqrt</span>(c);</div><div class="line">        <span class="keyword">while</span>(a&lt;=b)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a*a+b*b&gt;c)</div><div class="line">            &#123;</div><div class="line">                b--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a*a+b*b&lt;c)</div><div class="line">            &#123;</div><div class="line">                a++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>下面这种方法用到了集合set，从0遍历到c的平方根，对于每个<code>i*i</code>，都加入集合set中，然后计算<code>c-i*i</code>，如果这个差值也在集合set中，返回true，遍历结束返回false，参见代码如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">sqrt</span>(c); ++i) &#123;</div><div class="line">            s.insert(i * i);</div><div class="line">            <span class="keyword">if</span> (s.count(c - i * i)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="784-字母大小写全排列（回到目录）"><a href="#784-字母大小写全排列（回到目录）" class="headerlink" title="784 字母大小写全排列（回到目录）"></a>784 字母大小写全排列（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>给定一个字符串S，通过将字符串S中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line">输入: S = &quot;a1b2&quot;</div><div class="line">输出: [&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]</div><div class="line"></div><div class="line">输入: S = &quot;3z4&quot;</div><div class="line">输出: [&quot;3z4&quot;, &quot;3Z4&quot;]</div><div class="line"></div><div class="line">输入: S = &quot;12345&quot;</div><div class="line">输出: [&quot;12345&quot;]</div><div class="line"></div><div class="line">**注意**：</div><div class="line"></div><div class="line">S 的长度不超过12。</div><div class="line"></div><div class="line">S 仅由数字和字母组成。</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">chang_upOrLow</span><span class="params">(<span class="keyword">char</span> s)</span><span class="comment">//递归</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> res;</div><div class="line">        <span class="keyword">if</span>(s&gt;=<span class="string">'A'</span> &amp;&amp; s&lt;=<span class="string">'Z'</span>)</div><div class="line">        &#123;</div><div class="line">            res=s+<span class="number">32</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(s&gt;=<span class="string">'a'</span> &amp;&amp; s&lt;=<span class="string">'z'</span>)</div><div class="line">        &#123;</div><div class="line">            res=s<span class="number">-32</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">string</span> &amp;S,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res,<span class="keyword">int</span> index)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(index&gt;=S.size())</div><div class="line">    &#123;</div><div class="line">        res.push_back(S);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((S[index]&gt;=<span class="string">'a'</span> &amp;&amp; S[index]&lt;=<span class="string">'z'</span>) ||(S[index]&gt;=<span class="string">'A'</span> &amp;&amp; S[index]&lt;=<span class="string">'Z'</span>)) </div><div class="line">    <span class="comment">//if(S[index]&gt;='A' &amp;&amp; S[index]&lt;='z')</span></div><div class="line">    &#123;</div><div class="line">        S[index]=chang_upOrLow(S[index]);</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">        S[index]=chang_upOrLow(S[index]);</div><div class="line">    &#125;</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCasePermutation(<span class="built_in">string</span> S) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        generate(S,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>或者</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">chang_upOrLow</span><span class="params">(<span class="keyword">char</span> s)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> res;</div><div class="line">        <span class="keyword">if</span>(s&gt;=<span class="string">'A'</span> &amp;&amp; s&lt;=<span class="string">'Z'</span>)</div><div class="line">        &#123;</div><div class="line">            res=s+<span class="number">32</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(s&gt;=<span class="string">'a'</span> &amp;&amp; s&lt;=<span class="string">'z'</span>)</div><div class="line">        &#123;</div><div class="line">            res=s<span class="number">-32</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">string</span> &amp;S,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res,<span class="keyword">int</span> index)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(index&gt;=S.size())</div><div class="line">    &#123;</div><div class="line">        res.push_back(S);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((S[index]&gt;=<span class="string">'a'</span> &amp;&amp; S[index]&lt;=<span class="string">'z'</span>) ||(S[index]&gt;=<span class="string">'A'</span> &amp;&amp; S[index]&lt;=<span class="string">'Z'</span>)) </div><div class="line">    <span class="comment">//if(S[index]&gt;='A' &amp;&amp; S[index]&lt;='z')</span></div><div class="line">    &#123;</div><div class="line">        S[index]=chang_upOrLow(S[index]);</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">        S[index]=chang_upOrLow(S[index]);</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        generate(S,res,index+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCasePermutation(<span class="built_in">string</span> S) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        generate(S,res,<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c++常见基础知识]]></title>
      <url>https://winper001.github.io/2018/08/10/c++%E5%B8%B8%E8%A7%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[toc]</p>
<h1 id="编译器和预处理器（回到目录）"><a href="#编译器和预处理器（回到目录）" class="headerlink" title="编译器和预处理器（回到目录）"></a>编译器和预处理器（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><ul>
<li><strong>编译器</strong>就是把源代码翻译成目标代码的工具，目标代码可以是机器码，也可以是其他代码。</li>
<li><strong>预处理器</strong>就是在代码交给编译器处理前，预先进行一些处理，比如包含头文件，宏展开等等。</li>
</ul>
<hr>
<h1 id="typedef使用"><a href="#typedef使用" class="headerlink" title="typedef使用"></a>typedef使用</h1><h2 id="基本解释"><a href="#基本解释" class="headerlink" title="基本解释"></a>基本解释</h2><p>　　typedef为C语言的关键字，作用是为一种数据类型定义一个新名字。这里的数据类型包括内部数据类型（int,char等）和自定义的数据类型（struct等）。</p>
<p>　　在编程中使用typedef目的一般有两个，一个是给变量一个易记且意义明确的新名字，另一个是简化一些比较复杂的类型声明。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>（1）用typedef声明一个新类型名来代替已有的类型名。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">typedef int Status  //指定标识符Status代表int类型</div><div class="line">typedef double DATE  //指定标识符DATE代表double类型</div></pre></td></tr></table></figure></p>
<p>这样下面代码等价：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int i; double j;</div><div class="line">Status i;DATE j;</div></pre></td></tr></table></figure></p>
<p>（2）用typedef对数组类型起新名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">typedef int NUM[100];//声明NUM为整数数组类型，可以包含100个元素</div><div class="line">NUM n;//定义n为包含100个整数元素的数组，n就是数组名</div></pre></td></tr></table></figure></p>
<p>（3）对一个结构体类型声明一个新名字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef struct  //在struct之前用了关键字typedef，表示是声明新类型名</div><div class="line">&#123;</div><div class="line">    int month;</div><div class="line">    int day;</div><div class="line">    int year;  </div><div class="line">&#125; TIME; //TIME是新类型名，但不是新类型，也不是结构体变量名</div></pre></td></tr></table></figure></p>
<p> 新声明的新类型名TIME代表上面指定的一个结构体类型，这样就可以用TIME定义该结构体变量，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TIME birthday;</div><div class="line">TIME *P //p是指向该结构体类型数据的指针</div></pre></td></tr></table></figure></p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>（1）用typedef只是对已经存在的类型增加一个类型名，而没有创造一个新的类型。只是增加了一个新名字，可以用该名字定义变量，比如使用上文中的Status定义变量i；则i变量的类型为int型。</p>
<p>（2）可以用typedef声明新类型名。但是不能用来定义变量</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>　　使用typedef类型名，有利于程序的移植性。有时程序会依赖硬件特性。比如在某个Cpp系统用2个字节存一个int类型变量，用4个字节存一个long类型变量。而在另一个Cpp系统中以4个字节存放int类型变量。则把一个Cpp程序从一个用2个字节存一个int类型变量的C++系统移植到以4个字节存放int类型变量的Cpp系统时，如果原来用typedef声明int类型,则例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Typedef  int INTEGER ; //原来这样写</div><div class="line">Typedef long INTEGER ; //移植后可以改为这样</div></pre></td></tr></table></figure></p>
<p>如果不是用typedef声明的，那每一处定义int类型的地方都要改，程序越大，工作量越大。</p>
<hr>
<h1 id="c-中常见数据结构的基本操作"><a href="#c-中常见数据结构的基本操作" class="headerlink" title="c++中常见数据结构的基本操作"></a>c++中常见数据结构的基本操作</h1><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>stack 的<strong>基本操作</strong>有：</p>
<p>入栈，如例：s.push(x);</p>
<p>出栈，如例：s.pop();注意，出栈操作只是删除栈顶元素，并不返回该元素。</p>
<p>访问栈顶，如例：s.top()</p>
<p>判断栈空，如例：s.empty()，当栈空时，返回true。</p>
<p>访问栈中的元素个数，如例：s.size()。</p>
<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>queue 的基本操作有：</p>
<p>入队，如例：q.push(x); 将x 接到队列的末端。</p>
<p>出队，如例：q.pop(); 弹出队列的第一个元素，注意，并不会返回被弹出元素的值。</p>
<p>访问队首元素，如例：q.front()，即最早被压入队列的元素。</p>
<p>访问队尾元素，如例：q.back()，即最后被压入队列的元素。</p>
<p>判断队列空，如例：q.empty()，当队列空时，返回true。</p>
<p>访问队列中的元素个数，如例：q.size()</p>
<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><h3 id="vector的六种初始化方式"><a href="#vector的六种初始化方式" class="headerlink" title="vector的六种初始化方式"></a>vector的六种初始化方式</h3><p>C++的初始化方法很多，各种初始化方法有一些不同。</p>
<ul>
<li><code>vector&lt;int&gt; ilist;</code></li>
</ul>
<p><strong>默认初始化，vector为空， size为0，表明容器中没有元素，而且 capacity 也返回 0，意味着还没有分配内存空间。这种初始化方式适用于元素个数未知，需要在程序中动态添加的情况。</strong></p>
<ul>
<li><code>vector&lt;int&gt; ilist2(ilist);</code></li>
</ul>
<p><code>vector&lt;int&gt; ilist2  = ilist;</code> </p>
<p><strong>两种方式等价 ，ilist2 初始化为ilist 的拷贝，ilist必须与ilist2 类型相同，也就是同为int的vector类型，ilist2将具有和ilist相同的容量和元素.</strong></p>
<ul>
<li><p><code>vector&lt;int&gt; ilist = {1,2,3.0,4,5,6,7};</code></p>
<p><code>vector&lt;int&gt; ilist {1,2,3.0,4,5,6,7};</code></p>
</li>
</ul>
<p><strong>ilist 初始化为列表中元素的拷贝，列表中元素必须与ilist的元素类型相容，本例中必须是与整数类型相容的类型，整形会直接拷贝，其他类型会进行类型转换。</strong></p>
<ul>
<li><code>vector&lt;int&gt; ilist3(ilist.begin()+2,ilist.end()-1);</code></li>
</ul>
<p><strong>ilist3初始化为两个迭代器指定范围中元素的拷贝，范围中的元素类型必须与ilist3 的元素类型相容，在本例中ilist3被初始化为{3,4,5,6}。注意：由于只要求范围中的元素类型与待初始化的容器的元素类型相容，因此迭代器来自不同的容器是可能的，例如，用一个double的list的范围来初始化ilist3是可行的。另外由于构造函数只是读取范围中的元素进行拷贝，因此使用普通迭代器还是const迭代器来指出范围并没有区别。这种初始化方法特别适合于获取一个序列的子序列。</strong></p>
<ul>
<li><code>vector&lt;int&gt; ilist4(7);</code></li>
</ul>
<p><strong>默认值初始化，ilist4中将包含7个元素，每个元素进行缺省的值初始化，对于int，也就是被赋值为0，因此ilist4被初始化为包含7个0。当程序运行初期元素大致数量可预知，而元素的值需要动态获取的时候，可采用这种初始化方式。</strong></p>
<ul>
<li><code>vector&lt;int&gt; ilist5(7,3);</code></li>
</ul>
<p><strong>指定值初始化，ilist5被初始化为包含7个值为3的int</strong></p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>尾部插入数字</strong>：vec.push_back(a);</p>
<p><strong>使用下标访问元素</strong>，cout&lt;&lt;vec[0]&lt;&lt;endl;记住下标是从0开始的。</p>
<p><strong>使用迭代器访问元素</strong>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vector&lt;int&gt;::iterator it;</div><div class="line">for(it=vec.begin();it!=vec.end();it++)</div><div class="line">    cout&lt;&lt;*it&lt;&lt;endl;</div></pre></td></tr></table></figure></p>
<p><strong>插入元素</strong>：<code>vec.insert(vec.begin()+i,a);</code>在第i+1个元素前面插入a;</p>
<p><strong>删除元素</strong>：<code>vec.erase(vec.begin()+2);</code>删除第3个元素</p>
<p><code>vec.erase(vec.begin()+i,vec.end()+j);</code>删除区间[i,j-1];区间从0开始</p>
<p><strong>向量大小</strong>:<code>vec.size()</code>;<br><br><strong>vector也有empty()操作size()等价</strong></p>
<p><strong>清空</strong>:<code>vec.clear();</code></p>
<p><strong>使用reverse将元素翻转</strong>：需要头文件<code>#include&lt;algorithm&gt;</code></p>
<p><code>reverse(vec.begin(),vec.end());</code>将元素翻转(在vector中，如果一个函数中需要两个迭代器，</p>
<p>一般后一个都不包含.)</p>
<p><strong>使用sort排序</strong>：需要头文件<code>#include&lt;algorithm&gt;</code>，</p>
<p><code>sort(vec.begin(),vec.end());</code>(默认是按升序排列,即从小到大).</p>
<p>可以通过重写排序比较函数按照降序比较，如下：</p>
<p>定义排序比较函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bool Comp(const int &amp;a,const int &amp;b)</div><div class="line">&#123;</div><div class="line">    return a&gt;b;</div></pre></td></tr></table></figure></p>
<p>调用时:<code>sort(vec.begin(),vec.end(),Comp)</code>，这样就降序排序。</p>
<h1 id="c-map基本操作"><a href="#c-map基本操作" class="headerlink" title="c++ map基本操作"></a>c++ map基本操作</h1><h2 id="pair类型"><a href="#pair类型" class="headerlink" title="pair类型"></a>pair类型</h2><h3 id="pair类型的定义和初始化"><a href="#pair类型的定义和初始化" class="headerlink" title="pair类型的定义和初始化"></a>pair类型的定义和初始化</h3><p>pair类型是在有文件utility中定义的，pair类型包含了两个数据值，通常有以下的一些定义和初始化的一些方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pair&lt;T1, T2&gt; p;</div><div class="line">pair&lt;T1, T2&gt; p(v1, v2);</div><div class="line">make_pair(v1, v2)</div></pre></td></tr></table></figure></p>
<p>上述<strong>第一种方法</strong>是定义了一个空的pair对象p，<strong>第二种方法</strong>是定义了包含初始值为v1和v2的pair对象p。<strong>第三种方法</strong>是以v1和v2值创建的一个新的pair对象。</p>
<h3 id="pair对象的一些操作"><a href="#pair对象的一些操作" class="headerlink" title="pair对象的一些操作"></a>pair对象的一些操作</h3><p>除此之外，pair对象还有一些方法，如取出pair对象中的每一个成员的值：</p>
<ul>
<li>p.first</li>
<li>p.second</li>
<li>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;utility&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">        pair&lt;int, string&gt; p1(0, &quot;Hello&quot;);</div><div class="line">        printf(&quot;%d, %s\n&quot;, p1.first, p1.second.c_str());</div><div class="line">        pair&lt;int, string&gt; p2 = make_pair(1, &quot;World&quot;);</div><div class="line">        printf(&quot;%d, %s\n&quot;, p2.first, p2.second.c_str());</div><div class="line">        return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="map对象的定义和初始化"><a href="#map对象的定义和初始化" class="headerlink" title="map对象的定义和初始化"></a>map对象的定义和初始化</h2><p>map是键-值对的组合，有以下的一些定义的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map&lt;k, v&gt; m;</div><div class="line">map&lt;k, v&gt; m(m2);</div><div class="line">map&lt;k, v&gt; m(b, e);</div></pre></td></tr></table></figure></p>
<p>上述<strong>第一种方法</strong>定义了一个名为m的空的map对象；<strong>第二种方法</strong>创建了m2的副本m；<strong>第三种方法</strong>创建了map对象m，并且存储迭代器b和e范围内的所有元素的副本。</p>
<p><code>map</code>的<code>value_type</code>是存储元素的键以及值的<code>pair</code>类型，键为<code>const</code>。</p>
<h2 id="map的一些操作"><a href="#map的一些操作" class="headerlink" title="map的一些操作"></a>map的一些操作</h2><h3 id="map元素插入"><a href="#map元素插入" class="headerlink" title="map元素插入"></a>map元素插入</h3><p>在map中元素有两种插入方法：</p>
<p>使用下标<br>使用insert函数<br>在map中使用下标访问不存在的元素将导致在map容器中添加一个新的元素。</p>
<p>insert函数的插入方法主要有如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m.insert(e)</div><div class="line">m.insert(beg, end)</div><div class="line">m.insert(iter, e)</div></pre></td></tr></table></figure></p>
<p>上述的e是一个<code>value_type</code>类型的值。beg和end标记的是迭代器的开始和结束。</p>
<p>两种插入方法如下面的例子所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">        map&lt;int, int&gt; mp;</div><div class="line">        for (int i = 0; i &lt; 10; i ++)&#123;</div><div class="line">                mp[i] = i;</div><div class="line">        &#125;</div><div class="line">        for (int i = 10; i &lt; 20; i++)&#123;</div><div class="line">                mp.insert(make_pair(i, i));</div><div class="line">        &#125;</div><div class="line">        map&lt;int, int&gt;::iterator it;</div><div class="line">        for (it = mp.begin(); it != mp.end(); it++)&#123;</div><div class="line">                printf(&quot;%d--&gt;%d\n&quot;, it-&gt;first, it-&gt;second);</div><div class="line">        &#125;</div><div class="line">        return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="map中元素的查找和读取"><a href="#map中元素的查找和读取" class="headerlink" title="map中元素的查找和读取"></a>map中元素的查找和读取</h3><p>注意：上述采用下标的方法读取map中元素时，若map中不存在该元素，则会在map中插入。</p>
<p>因此，若只是查找该元素是否存在，可以使用函数count(k)，该函数返回的是k出现的次数；若是想取得key对应的值，可以使用函数find(k)，该函数返回的是指向该元素的迭代器。</p>
<p>上述的两个函数的使用如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">        map&lt;int, int&gt; mp;</div><div class="line">        for (int i = 0; i &lt; 20; i++)&#123;</div><div class="line">                mp.insert(make_pair(i, i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (mp.count(0))&#123;</div><div class="line">                printf(&quot;yes!\n&quot;);</div><div class="line">        &#125;else&#123;</div><div class="line">                printf(&quot;no!\n&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        map&lt;int, int&gt;::iterator it_find;</div><div class="line">        it_find = mp.find(0);</div><div class="line">        if (it_find != mp.end())&#123;</div><div class="line">                it_find-&gt;second = 20;</div><div class="line">        &#125;else&#123;</div><div class="line">                printf(&quot;no!\n&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        map&lt;int, int&gt;::iterator it;</div><div class="line">        for (it = mp.begin(); it != mp.end(); it++)&#123;</div><div class="line">                printf(&quot;%d-&gt;%d\n&quot;, it-&gt;first, it-&gt;second);</div><div class="line">        &#125;</div><div class="line">        return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="从map中删除元素"><a href="#从map中删除元素" class="headerlink" title="从map中删除元素"></a>从map中删除元素</h3><p>从map中删除元素的函数是erase()，该函数有如下的三种形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m.erase(k)</div><div class="line">m.erase(p)</div><div class="line">m.erase(b, e)</div></pre></td></tr></table></figure></p>
<p>第一种方法删除的是m中键为k的元素，返回的是删除的元素的个数；第二种方法删除的是迭代器p指向的元素，返回的是void；第三种方法删除的是迭代器b和迭代器e范围内的元素，返回void。</p>
<p>如下所示：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</div><div class="line">                mp.insert(make_pair(i, i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mp.erase(<span class="number">0</span>);</div><div class="line"></div><div class="line">        mp.erase(mp.begin());</div><div class="line"></div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it;</div><div class="line">        <span class="keyword">for</span> (it = mp.begin(); it != mp.end(); it++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d-&gt;%d\n"</span>, it-&gt;first, it-&gt;second);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="c-万能头文件"><a href="#c-万能头文件" class="headerlink" title="c++万能头文件"></a>c++万能头文件</h1><p><code>#include &lt;bits/stdc++.h&gt;</code></p>
<h1 id="C-的printf方法-f保留小数位处理"><a href="#C-的printf方法-f保留小数位处理" class="headerlink" title="C++的printf方法%f保留小数位处理"></a>C++的printf方法%f保留小数位处理</h1><p>例如printf(“%7.2f”,a);结果保留2位，在f前面加上“整数位保留个数.小数位保留个数”</p>
<p>固定 m 位小数 如此： printf(“%.mf”,a);</p>
<p>例如 printf(“%.2f”,a); 保留小数点后两位</p>
<p>要保留1位小数点：printf(“%.1f”,a);</p>
<p>要保留2位小数点：printf(“%.2f”,a);</p>
<p>要保留3位小数点：printf(“%.3f”,a);</p>
<p>……</p>
<p>如此类推。</p>
<p>%8.3f。就是：占8个字符的位置，小数点后面有3位。注意小数点也算一位</p>
<h1 id="c语言中计算字符串长度"><a href="#c语言中计算字符串长度" class="headerlink" title="c语言中计算字符串长度"></a>c语言中计算字符串长度</h1><ul>
<li>strlen():纯长度，不包括‘/0’</li>
<li>sizeof():包括‘/0’</li>
</ul>
<h1 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h1><p><strong>一个vector丢进set里面，set会把vector去重</strong>。</p>
<p><strong>插入和遍历的代码</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;    </div><div class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; set_str;    </div><div class="line">    <span class="built_in">string</span> str;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)</div><div class="line">        set_str.insert(str);</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator iter=set_str.begin();</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(iter!=set_str.end())</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;*iter&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        ++iter;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode二分搜索法总结]]></title>
      <url>https://winper001.github.io/2018/08/08/leetcode%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h1 id="第一类：-需查找和目标值完全相等的数"><a href="#第一类：-需查找和目标值完全相等的数" class="headerlink" title="第一类： 需查找和目标值完全相等的数"></a>第一类： 需查找和目标值完全相等的数</h1><p>这是最简单的一类，也是我们最开始学二分查找法需要解决的问题，比如我们有数组[2, 4, 5, 6, 9]，target = 6，那么我们可以写出二分查找法的代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size();</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> right = mid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>小象教育的解法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> right = mid<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>会返回3，也就是target的在数组中的位置。注意二分查找法的写法并不唯一，主要可以变动地方有四处：</p>
<p>第一处是right的初始化，可以写成 nums.size() 或者 nums.size() - 1</p>
<p>第二处是left和right的关系，可以写成 left &lt; right 或者 left &lt;= right</p>
<p>第三处是更新right的赋值，可以写成 right = mid 或者 right = mid - 1</p>
<p>第四处是最后返回值，可以返回left，right，或right - 1</p>
<p>但是这些不同的写法并不能随机的组合，像博主的那种写法，若right初始化为了nums.size()，那么就必须用left &lt; right，而最后的right的赋值，用哪个都可以，博主偷懒就不写-1了。但是如果我们right初始化为 nums.size() - 1，那么就必须用 left &lt;= right，并且right的赋值要写成 right = mid - 1，不然就会出错。所以博主的建议是选择一套自己喜欢的写法，并且记住，实在不行就带简单的例子来一步一步执行，确定正确的写法也行。</p>
<h1 id="第二类：-查找第一个大于等于目标值的数，可变形为查找最后一个小于目标值的数"><a href="#第二类：-查找第一个大于等于目标值的数，可变形为查找最后一个小于目标值的数" class="headerlink" title="第二类： 查找第一个大于等于目标值的数，可变形为查找最后一个小于目标值的数"></a>第二类： 查找第一个大于等于目标值的数，可变形为查找最后一个小于目标值的数</h1><p>这是比较常见的一类，因为我们要查找的目标值不一定会在数组中出现，也有可能是跟目标值相等的数在数组中并不唯一，而是有多个，那么这种情况下nums[mid] == target这条判断语句就没有必要存在。比如在数组[2, 4, 5, 6, 9]中查找数字3，就会返回数字4的位置；在数组[0, 1, 1, 1, 1]中查找数字1，就会返回第一个数字1的位置。我们可以使用如下代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size();</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) </div><div class="line">        &#123;</div><div class="line">            left = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;=target)</div><div class="line">        &#123;</div><div class="line">            right = mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们需要返回的位置就是right指针指向的地方。在C++的STL中有专门的查找第一个不小于目标值的数的函数lower_bound，在博主的解法中也会时不时的用到这个函数。但是如果面试的时候人家不让使用内置函数，那么我们只能老老实实写上面这段二分查找的函数。</p>
<p>这一类可以轻松的变形为查找最后一个小于目标值的数，怎么变呢。我们已经找到了第一个不小于目标值的数，那么再往前退一位，返回right - 1，就是最后一个小于目标值的数。</p>
<h1 id="第三类：-查找第一个大于目标值的数，可变形为查找最后一个不大于目标值的数"><a href="#第三类：-查找第一个大于目标值的数，可变形为查找最后一个不大于目标值的数" class="headerlink" title="第三类： 查找第一个大于目标值的数，可变形为查找最后一个不大于目标值的数"></a>第三类： 查找第一个大于目标值的数，可变形为查找最后一个不大于目标值的数</h1><p>这一类也比较常见，尤其是查找第一个大于目标值的数，在C++的STL也有专门的函数upper_bound，这里跟上面的那种情况的写法上很相似，只需要添加一个等号，将之前的 nums[mid] &lt; target 变成 nums[mid] &lt;= target，就这一个小小的变化，其实直接就改变了搜索的方向，使得在数组中有很多跟目标值相同的数字存在的情况下，返回最后一个相同的数字的下一个位置。比如在数组[2, 4, 5, 6, 9]中查找数字3，还是返回数字4的位置，这跟上面那查找方式返回的结果相同，因为数字4在此数组中既是第一个不小于目标值3的数，也是第一个大于目标值3的数，所以make sense；在数组[0, 1, 1, 1, 1]中查找数字1，就会返回坐标5，通过对比返回的坐标和数组的长度，我们就知道是否存在这样一个大于目标值的数。参见下面的代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.size();</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target) </div><div class="line">        &#123;</div><div class="line">            left = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target)</div><div class="line">        &#123;</div><div class="line">             right = mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> right;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这一类可以轻松的变形为查找最后一个不大于目标值的数，怎么变呢。我们已经找到了第一个大于目标值的数，那么再往前退一位，返回right - 1，就是最后一个不大于目标值的数。比如在数组[0, 1, 1, 1, 1]中查找数字1，就会返回最后一个数字1的位置4，这在有些情况下是需要这么做的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">第三类应用实例：Kth Smallest Element in a Sorted Matrix</div><div class="line"></div><div class="line">第三类变形应用示例：Sqrt(x)</div></pre></td></tr></table></figure></p>
<h1 id="第四类：-用子函数当作判断关系"><a href="#第四类：-用子函数当作判断关系" class="headerlink" title="第四类： 用子函数当作判断关系"></a>第四类： 用子函数当作判断关系</h1><p>这是最令博主头疼的一类，而且通常情况下都很难。因为这里在二分查找法重要的比较大小的地方使用到了子函数，并不是之前三类中简单的数字大小的比较，比如Split Array Largest Sum那道题中的解法一，就是根据是否能分割数组来确定下一步搜索的范围。类似的还有Guess Number Higher or Lower这道题，是根据给定函数guess的返回值情况来确定搜索的范围。对于这类题目，博主也很无奈，遇到了只能自求多福了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">第四类应用实例：</div><div class="line">Split Array Largest Sum， Guess Number Higher or Lower，Find K Closest Elements，Find K-th Smallest Pair Distance，Kth Smallest Number in Multiplication Table，Maximum Average Subarray II，Minimize Max Distance to Gas Station，Swim in Rising Water</div></pre></td></tr></table></figure></p>
<p>综上所述，博主大致将二分搜索法的应用场景分成了主要这四类，其中第二类和第三类还有各自的扩展。根据目前博主的经验来看，第二类和第三类的应用场景最多，也是最重要的两类。第一类和第四类较少，其中第一类最简单，第四类最难，遇到这类，博主也没啥好建议，多多练习吧～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>https://winper001.github.io/2018/08/08/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h1 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h1><p><img src="https://images2018.cnblogs.com/blog/849589/201804/849589-20180402132530342-980121409.png" alt=""></p>
<h1 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h1><p><img src="https://images2018.cnblogs.com/blog/849589/201804/849589-20180402133438219-1946132192.png" alt=""></p>
<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><p><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p>
<p><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</p>
<p><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</p>
<p><strong>空间复杂度</strong>：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。 </p>
<h1 id="1-冒泡算法（回到目录）"><a href="#1-冒泡算法（回到目录）" class="headerlink" title="1 冒泡算法（回到目录）"></a>1 冒泡算法（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>重复步骤1~3，直到排序完成。</li>
</ul>
<p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015223238449-2146169197.gif" alt=""></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function bubbleSort(arr) &#123;</div><div class="line">    var len = arr.length;</div><div class="line">    for (var i = 0; i &lt; len - 1; i++) &#123;</div><div class="line">        for (var j = 0; j &lt; len - 1 - i; j++) &#123;</div><div class="line">            if (arr[j] &gt; arr[j+1]) &#123;        // 相邻元素两两对比</div><div class="line">                var temp = arr[j+1];        // 元素交换</div><div class="line">                arr[j+1] = arr[j];</div><div class="line">                arr[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-选择排序（回到目录）"><a href="#2-选择排序（回到目录）" class="headerlink" title="2 选择排序（回到目录）"></a>2 选择排序（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n - 1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序<strong>不是一个稳定</strong>的排序算法。</p>
<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015224719590-1433219824.gif" alt=""></p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function selectionSort(arr) &#123;</div><div class="line">    var len = arr.length;</div><div class="line">    var minIndex, temp;</div><div class="line">    for (var i = 0; i &lt; len - 1; i++) &#123;</div><div class="line">        minIndex = i;</div><div class="line">        for (var j = i + 1; j &lt; len; j++) &#123;</div><div class="line">            if (arr[j] &lt; arr[minIndex]) &#123;     // 寻找最小的数</div><div class="line">                minIndex = j;                 // 将最小数的索引保存</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        temp = arr[i];</div><div class="line">        arr[i] = arr[minIndex];</div><div class="line">        arr[minIndex] = temp;</div><div class="line">    &#125;</div><div class="line">    return arr;</div></pre></td></tr></table></figure>
<h1 id="3-插入排序（回到目录）"><a href="#3-插入排序（回到目录）" class="headerlink" title="3 插入排序（回到目录）"></a>3 插入排序（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>
<h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul>
<li>从第一个元素开始，该元素可以认为已经被排序；</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；</li>
<li>重复步骤2~5。<br><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015225645277-1151100000.gif" alt=""><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function insertionSort(arr) &#123;</div><div class="line">    var len = arr.length;</div><div class="line">    var preIndex, current;</div><div class="line">    for (var i = 1; i &lt; len; i++) &#123;</div><div class="line">        preIndex = i - 1;</div><div class="line">        current = arr[i];</div><div class="line">        while (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</div><div class="line">            arr[preIndex + 1] = arr[preIndex];</div><div class="line">            preIndex--;</div><div class="line">        &#125;</div><div class="line">        arr[preIndex + 1] = current;</div><div class="line">    &#125;</div><div class="line">    return arr;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="4-快速排序（回到目录）"><a href="#4-快速排序（回到目录）" class="headerlink" title="4 快速排序（回到目录）"></a>4 快速排序（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j，交换a[i]和a[j],重复上面的过程，直到i &gt; j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为5 3 3 4 3 8 9 10 11，现在中枢元素5和3（第5个元素，下标从1开始计）交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j] 交换的时刻。</p>
<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>1．先从数列中取出一个数作为基准数。</p>
<p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</p>
<p>3．再对左右区间重复第二步，直到各区间只有一个数。</p>
<p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230936371-1413523412.gif" alt=""></p>
<h2 id="挖坑填数法总结"><a href="#挖坑填数法总结" class="headerlink" title="挖坑填数法总结"></a>挖坑填数法总结</h2><p>1．i =start; j = end; 将基准数挖出形成第一个坑a[i]。</p>
<p>2．j–由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</p>
<p>3．i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</p>
<p>4．再重复执行2，3二步，直到i==j，将基准数填入a[i]中。</p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span> (left&lt; right)  </div><div class="line">    &#123;        </div><div class="line">        <span class="keyword">int</span> i = left, j = right, x = s[left];  </div><div class="line">        <span class="keyword">while</span> (i &lt; j)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[j]&gt;= x) <span class="comment">// 从右向左找第一个小于x的数  </span></div><div class="line">                j--;   </div><div class="line">            <span class="keyword">if</span>(i &lt; j)  </div><div class="line">                s[i++] = s[j];  </div><div class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[i]&lt; x) <span class="comment">// 从左向右找第一个大于等于x的数  </span></div><div class="line">                i++;   </div><div class="line">            <span class="keyword">if</span>(i &lt; j)  </div><div class="line">                s[j--] = s[i];  <span class="comment">//此时剩下了s[i]没有被填坑</span></div><div class="line">        &#125;  </div><div class="line">        s[i] = x;  </div><div class="line">        quickSort(s, left, i - <span class="number">1</span>); <span class="comment">// 递归调用  </span></div><div class="line">        quickSort(s, i + <span class="number">1</span>, right);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5-希尔排序-shell-（回到目录）"><a href="#5-希尔排序-shell-（回到目录）" class="headerlink" title="5 希尔排序(shell)（回到目录）"></a>5 希尔排序(shell)（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比O(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</p>
<h2 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ul>
<p><img src="https://images2018.cnblogs.com/blog/849589/201803/849589-20180331170017421-364506073.gif" alt=""></p>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function shellSort(arr) &#123;</div><div class="line">    var len = arr.length,</div><div class="line">        temp,</div><div class="line">        gap = 1;</div><div class="line">    while (gap &lt; len / 3) &#123;          // 动态定义间隔序列</div><div class="line">        gap = gap * 3 + 1;</div><div class="line">    &#125;</div><div class="line">    for (gap; gap &gt; 0; gap = Math.floor(gap / 3)) &#123;</div><div class="line">        for (var i = gap; i &lt; len; i++) &#123;</div><div class="line">            temp = arr[i];</div><div class="line">            for (var j = i-gap; j &gt; 0 &amp;&amp; arr[j]&gt; temp; j-=gap) &#123;</div><div class="line">                arr[j + gap] = arr[j];</div><div class="line">            &#125;</div><div class="line">            arr[j + gap] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6-归并排序（回到目录）"><a href="#6-归并排序（回到目录）" class="headerlink" title="6 归并排序（回到目录）"></a>6 归并排序（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素（认为直接有序）或者2个序列（1次比较和交换），然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</p>
<h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="已知两个排序数组，将这两个数组合并为一个排序数组。"><a href="#已知两个排序数组，将这两个数组合并为一个排序数组。" class="headerlink" title="已知两个排序数组，将这两个数组合并为一个排序数组。"></a>已知两个排序数组，将这两个数组合并为一个排序数组。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sortedTwoVec</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;sub_vec1,vectoer&lt;<span class="keyword">int</span>&gt; &amp;sub_vec2,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i&lt;sub_vec1.size() &amp;&amp; j&lt;sub_vec2.size()) <span class="comment">//注意这里不能用for(;i&lt;sub_vec1.size(),j&lt;sub_vec2.size();)!!!!</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(sub_vec1[i]&lt;=sub_vec2[j])</div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec1[i]);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec2[j]);</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;i&lt;sub_vec1.size();i++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(j&lt;sub_vec2.size();j++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec2[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对一个数组进行归并排序。"><a href="#对一个数组进行归并排序。" class="headerlink" title="对一个数组进行归并排序。"></a>对一个数组进行归并排序。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_vec</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(vec.size())&lt;<span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=vec.size()/<span class="number">2</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec1;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec2;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid;i++)</div><div class="line">    &#123;</div><div class="line">        vec1.push_back(vec[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=mid;j&lt;vec.size();j++)</div><div class="line">    &#123;</div><div class="line">        vec2.push_back(vec[j]);</div><div class="line">    &#125;</div><div class="line">    merge_vec(vec1);</div><div class="line">    merge_vec(vec2);</div><div class="line">    vec.clear();</div><div class="line">    merge_sortedTwoVec(vec1,vec2,vec);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="7-堆排序（回到目录）"><a href="#7-堆排序（回到目录）" class="headerlink" title="7 堆排序（回到目录）"></a>7 堆排序（<a href="#目录"><font size="3" face="微软雅黑">回到目录</font></a>）</h1><p>我们知道堆的结构是节点i的孩子为2 <em> i和2 </em> i + 1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n / 2开始和其子节点共3个值选择最大（大顶堆）或者最小（小顶堆），这3个元素之间的选择当然不会破坏稳定性。但当为n / 2 - 1， n / 2 - 2， … 1这些个父节点选择元素时，就会破坏稳定性。有可能第n / 2个父节点交换把后面一个元素交换过去了，而第n / 2 - 1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode课程]]></title>
      <url>https://winper001.github.io/2018/08/08/leetcode%E8%AF%BE%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h1 id="1-链表-回到目录"><a href="#1-链表-回到目录" class="headerlink" title="1 链表(回到目录)"></a>1 链表(<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>)</h1><h3 id="例1-a-链表逆序-a-206"><a href="#例1-a-链表逆序-a-206" class="headerlink" title="例1-a,链表逆序-a 206"></a>例1-a,链表逆序-a 206</h3><h4 id="已知链表的头节点head-将链表逆序。（不可以申请额外的空间）"><a href="#已知链表的头节点head-将链表逆序。（不可以申请额外的空间）" class="headerlink" title="已知链表的头节点head,将链表逆序。（不可以申请额外的空间）"></a>已知链表的头节点head,将链表逆序。（不可以申请额外的空间）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span></div><div class="line">    &#123;</div><div class="line">        ListNode* new_head=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            ListNode* next=head-&gt;next;<span class="comment">//备份head-&gt;next;</span></div><div class="line">            head-&gt;next=new_head;<span class="comment">//更新head-&gt;next;</span></div><div class="line">            new_head=head;<span class="comment">//移动new_head;</span></div><div class="line">            head=next;<span class="comment">//遍历链表</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> new_head;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例1-b-链表逆序-b-92"><a href="#例1-b-链表逆序-b-92" class="headerlink" title="例1-b,链表逆序-b 92"></a>例1-b,链表逆序-b 92</h3><h4 id="已知链表头节点指针head-将链表从位置m到n逆序。（不申请额外空间）"><a href="#已知链表头节点指针head-将链表从位置m到n逆序。（不申请额外空间）" class="headerlink" title="已知链表头节点指针head,将链表从位置m到n逆序。（不申请额外空间）"></a>已知链表头节点指针head,将链表从位置m到n逆序。（不申请额外空间）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> list_len=n-m+<span class="number">1</span>;</div><div class="line">        ListNode* pre_head=<span class="literal">NULL</span>;</div><div class="line">        ListNode* result=head;</div><div class="line">        <span class="keyword">while</span>(head &amp;&amp; --m)</div><div class="line">        &#123;</div><div class="line">            pre_head=head;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* modify_list_tail=head;</div><div class="line">        ListNode* new_head=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(head &amp;&amp; list_len)</div><div class="line">        &#123;</div><div class="line">            ListNode* next=head-&gt;next;</div><div class="line">            head-&gt;next=new_head;</div><div class="line">            new_head=head;</div><div class="line">            head=next;</div><div class="line">            list_len--;</div><div class="line">        &#125;</div><div class="line">        modify_list_tail-&gt;next=head;</div><div class="line">        <span class="keyword">if</span>(pre_head)</div><div class="line">        &#123;</div><div class="line">            pre_head-&gt;next=new_head;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            result=new_head;</div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例2，求两个链表的交点。160-回到目录"><a href="#例2，求两个链表的交点。160-回到目录" class="headerlink" title="例2，求两个链表的交点。160(回到目录)"></a>例2，求两个链表的交点。160(<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>)</h3><h4 id="已知链表A的头节点指针headA，链表B的头节点指针headB，两个链表相交，求两个链表交点对应的节点。"><a href="#已知链表A的头节点指针headA，链表B的头节点指针headB，两个链表相交，求两个链表交点对应的节点。" class="headerlink" title="已知链表A的头节点指针headA，链表B的头节点指针headB，两个链表相交，求两个链表交点对应的节点。"></a>已知链表A的头节点指针headA，链表B的头节点指针headB，两个链表相交，求两个链表交点对应的节点。</h4><p><strong>方法一</strong>：使用std中的set函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">set</span>&lt;ListNode*&gt; node_set;</div><div class="line">        <span class="keyword">while</span>(headA)</div><div class="line">        &#123;</div><div class="line">            node_set.insert(headA);</div><div class="line">            headA=headA-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(headB)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node_set.find(headB)!=node_set.end())</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> headB;</div><div class="line">            &#125;</div><div class="line">            headB=headB-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法二</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> lenA=compute_len(headA);</div><div class="line">        <span class="keyword">int</span> lenB=compute_len(headB);</div><div class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(lenB&gt;lenA)</div><div class="line">        &#123;</div><div class="line">            t=lenB-lenA;</div><div class="line">            <span class="keyword">while</span>(headB &amp;&amp; t)</div><div class="line">            &#123;</div><div class="line">                headB=headB-&gt;next;</div><div class="line">                t--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(headA &amp;&amp; headB)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(headA==headB) <span class="keyword">return</span> headA;</div><div class="line">                headA=headA-&gt;next;</div><div class="line">                headB=headB-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            t=lenA-lenB;</div><div class="line">            <span class="keyword">while</span>(headA &amp;&amp; t)</div><div class="line">            &#123;</div><div class="line">                headA=headA-&gt;next;</div><div class="line">                t--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(headA &amp;&amp; headB)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(headA==headB) <span class="keyword">return</span> headB;</div><div class="line">                headA=headA-&gt;next;</div><div class="line">                headB=headB-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compute_len</span><span class="params">(ListNode* head)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            len++;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> len;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="例3，链表求环。"><a href="#例3，链表求环。" class="headerlink" title="例3，链表求环。"></a>例3，链表求环。</h3><h4 id="已知链表中可能存在环，若有环返回环起始节点，否则返回NULL"><a href="#已知链表中可能存在环，若有环返回环起始节点，否则返回NULL" class="headerlink" title="已知链表中可能存在环，若有环返回环起始节点，否则返回NULL."></a>已知链表中可能存在环，若有环返回环起始节点，否则返回NULL.</h4><p><strong>方法一</strong>：使用set函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">set</span>&lt;ListNode*&gt; node_set;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node_set.find(head)!=node_set.end())</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            node_set.insert(head);</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法二</strong></p>
<ul>
<li>步骤：<ul>
<li>利用快慢指针求出相遇节点</li>
<li>相遇节点和头节点同时出发，相等时就是环的入口。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span></div><div class="line">    &#123;</div><div class="line">        ListNode* fast=head;</div><div class="line">        ListNode* slow=head;</div><div class="line">        ListNode* meet=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">while</span>(fast)</div><div class="line">        &#123;</div><div class="line">            slow=slow-&gt;next;</div><div class="line">            fast=fast-&gt;next;</div><div class="line">            <span class="keyword">if</span>(!fast)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            fast=fast-&gt;next;</div><div class="line">            <span class="keyword">if</span>(fast==slow)</div><div class="line">            &#123;</div><div class="line">                meet=fast;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(meet==<span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">while</span>(head &amp;&amp; meet)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head==meet)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> head;</div><div class="line">            &#125;</div><div class="line">            head=head-&gt;next;</div><div class="line">            meet=meet-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例4，链表划分。"><a href="#例4，链表划分。" class="headerlink" title="例4，链表划分。"></a>例4，链表划分。</h3><h4 id="已知链表头指针head与数值x，将所有小于X的节点放在大于等于x的节点前，且保持这些节点的原来的顺序。"><a href="#已知链表头指针head与数值x，将所有小于X的节点放在大于等于x的节点前，且保持这些节点的原来的顺序。" class="headerlink" title="已知链表头指针head与数值x，将所有小于X的节点放在大于等于x的节点前，且保持这些节点的原来的顺序。"></a>已知链表头指针head与数值x，将所有小于X的节点放在大于等于x的节点前，且保持这些节点的原来的顺序。</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="keyword">int</span> x)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="function">ListNode <span class="title">less_head</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        <span class="function">ListNode <span class="title">more_head</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode* less_ptr= &amp;less_head;</div><div class="line">        ListNode* more_ptr= &amp;more_head;</div><div class="line">        <span class="keyword">while</span>(head)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(head-&gt;val &lt;x)</div><div class="line">            &#123;</div><div class="line">                less_ptr-&gt;next=head;</div><div class="line">                less_ptr=head;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                more_ptr-&gt;next=head;</div><div class="line">                more_ptr=head;</div><div class="line">            &#125;</div><div class="line">            head=head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        less_ptr-&gt;next=more_head.next;</div><div class="line">        more_ptr-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> less_head.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例5，链表的深度拷贝。。。。。不想做了"><a href="#例5，链表的深度拷贝。。。。。不想做了" class="headerlink" title="例5，链表的深度拷贝。。。。。不想做了"></a>例5，链表的深度拷贝。。。。。不想做了</h3><h3 id="例6-a-排序链表的合并（2个）"><a href="#例6-a-排序链表的合并（2个）" class="headerlink" title="例6-a,排序链表的合并（2个）"></a>例6-a,排序链表的合并（2个）</h3><h4 id="已知两个已排序的链表头节点指针-L-1-和-L-2-将这两个链表合并，合并之后仍为有序的，返回合并后的头节点。"><a href="#已知两个已排序的链表头节点指针-L-1-和-L-2-将这两个链表合并，合并之后仍为有序的，返回合并后的头节点。" class="headerlink" title="已知两个已排序的链表头节点指针$L_1$和$L_2$,将这两个链表合并，合并之后仍为有序的，返回合并后的头节点。"></a>已知两个已排序的链表头节点指针<code>$L_1$</code>和<code>$L_2$</code>,将这两个链表合并，合并之后仍为有序的，返回合并后的头节点。</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="function">ListNode <span class="title">temp</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode* ptr=&amp;temp;</div><div class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">            &#123;</div><div class="line">                ptr-&gt;next=l1;</div><div class="line">                l1=l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ptr-&gt;next=l2;</div><div class="line">                l2=l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            ptr=ptr-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l1)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l2)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> temp.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例6-b-K个排序链表的合并"><a href="#例6-b-K个排序链表的合并" class="headerlink" title="例6-b,K个排序链表的合并"></a>例6-b,K个排序链表的合并</h3><h4 id="已知k个已排序链表头节点指针，将这k个链表合并，合并后仍为有序的，返回合并后的头节点。"><a href="#已知k个已排序链表头节点指针，将这k个链表合并，合并后仍为有序的，返回合并后的头节点。" class="headerlink" title="已知k个已排序链表头节点指针，将这k个链表合并，合并后仍为有序的，返回合并后的头节点。"></a>已知k个已排序链表头节点指针，将这k个链表合并，合并后仍为有序的，返回合并后的头节点。</h4><p><strong>方法一</strong>：将所有的节点放在一个vector,然后再排序，最后相连。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; node_vec;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lists.size();i++)</div><div class="line">        &#123;</div><div class="line">            node_vec.push_back(lists[i]);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node_vec.size()==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        sort(node_vec.begin(),node_vec.end(),cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;node_vec.size();i++)</div><div class="line">        &#123;</div><div class="line">            node_vec[i<span class="number">-1</span>]-&gt;next=node_vec[i];</div><div class="line">        &#125;</div><div class="line">        node_vec[node_vec.size()<span class="number">-1</span>]-&gt;next=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">return</span> node_vec[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> ListNode* a,<span class="keyword">const</span> ListNode* b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a-&gt;val &lt; b-&gt;val;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法二</strong>：使用分治法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(lists.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(lists.size()==<span class="number">1</span>) <span class="keyword">return</span> lists[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span>(lists.size()==<span class="number">2</span>) <span class="keyword">return</span> mergeTwoLists(lists[<span class="number">0</span>],lists[<span class="number">1</span>]);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid=lists.size()/<span class="number">2</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; sublists_1;</div><div class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; sublists_2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid;i++)</div><div class="line">        &#123;</div><div class="line">            sublists_1.push_back(lists[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid;i&lt;lists.size();i++)</div><div class="line">        &#123;</div><div class="line">            sublists_2.push_back(lists[i]);</div><div class="line">        &#125;</div><div class="line">        ListNode* l1=mergeKLists(sublists_1);</div><div class="line">        ListNode* l2=mergeKLists(sublists_2);</div><div class="line">        <span class="keyword">return</span> mergeTwoLists(l1,l2);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1,ListNode* l2)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function">ListNode <span class="title">temp</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line">        ListNode* ptr= &amp;temp;</div><div class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">            &#123;</div><div class="line">                ptr-&gt;next=l1;</div><div class="line">                l1=l1-&gt;next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ptr-&gt;next=l2;</div><div class="line">                l2=l2-&gt;next;</div><div class="line">            &#125;</div><div class="line">            ptr=ptr-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l1)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l2)</div><div class="line">        &#123;</div><div class="line">            ptr-&gt;next=l2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> temp.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="补充对比：分治算法之归并排序。"><a href="#补充对比：分治算法之归并排序。" class="headerlink" title="补充对比：分治算法之归并排序。"></a>补充对比：分治算法之归并排序。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge_sort_two_vec</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;sub_vec1,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;sub_vec2,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;sub_vec1.size() &amp;&amp; j&lt;sub_vec2.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sub_vec1[i]&lt;=sub_vec2[j])</div><div class="line">            &#123;</div><div class="line">                vec.push_back(sub_vec1[i]);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                vec.push_back(sub_vec2[j]);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(;i&lt;sub_vec1.size();i++)</div><div class="line">            &#123;</div><div class="line">                vec.push_back(sub_vec1[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(;j&lt;sub_vec2[j];j++)</div><div class="line">            &#123;</div><div class="line">                vec.push_back(sub_vec2[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(vec.size()&lt;<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sub_vec1;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sun_vec2;</div><div class="line">        <span class="keyword">int</span> mid=vec.size()/<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid;i++)</div><div class="line">        &#123;</div><div class="line">            sub_vec1.push_back(vec[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid;i&lt;vec.size();i++)</div><div class="line">        &#123;</div><div class="line">            sub_vec2.push_back(vec[i]);</div><div class="line">        &#125;</div><div class="line">        merge_sort(sub_vec1);</div><div class="line">        merge_sort(sub_vec2);</div><div class="line">        vec.clear;</div><div class="line">        merge_sort_two_vec(sub_vec1,sub_vec2);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="2-栈-队列-堆-回到目录"><a href="#2-栈-队列-堆-回到目录" class="headerlink" title="2 栈 队列 堆(回到目录)"></a>2 栈 队列 堆(<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>)</h1><h3 id="例1，使用队列实现栈"><a href="#例1，使用队列实现栈" class="headerlink" title="例1，使用队列实现栈"></a>例1，使用队列实现栈</h3><h4 id="使用两个队列设计一个栈。"><a href="#使用两个队列设计一个栈。" class="headerlink" title="使用两个队列设计一个栈。"></a>使用两个队列设计一个栈。</h4><p><strong>思路</strong>：两个队列中，一个做真正的数据队列，一个用作临时队列。并且只是修改push操作，其他操作不变。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MyStack &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    MyStack() &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** Push element x onto stack. */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; temp_queue;</div><div class="line">        temp_queue.push(x);</div><div class="line">        <span class="keyword">while</span>(!data_queue.empty())</div><div class="line">        &#123;</div><div class="line">            temp_queue.push(data_queue.front());</div><div class="line">            data_queue.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!temp_queue.empty())</div><div class="line">        &#123;</div><div class="line">            data_queue.push(temp_queue.front());</div><div class="line">            temp_queue.pop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> x=data_queue.front();</div><div class="line">        data_queue.pop();</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get the top element. */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data_queue.front();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data_queue.empty();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; data_queue;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="例2，使用栈实现队列"><a href="#例2，使用栈实现队列" class="headerlink" title="例2，使用栈实现队列"></a>例2，使用栈实现队列</h3><h4 id="使用两个栈设计一个队列"><a href="#使用两个栈设计一个队列" class="headerlink" title="使用两个栈设计一个队列"></a>使用两个栈设计一个队列</h4><p><strong>思路</strong>：两个栈中，一个做真正的数据栈，一个用作临时栈。并且只是修改push操作，其他操作不变。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MyQueue &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    MyQueue() &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** Push element x to the back of queue. */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; temp_stack;</div><div class="line">        <span class="keyword">while</span>(!data_stack.empty())</div><div class="line">        &#123;</div><div class="line">            temp_stack.push(data_stack.top());</div><div class="line">            data_stack.pop();</div><div class="line">        &#125;</div><div class="line">        temp_stack.push(x);</div><div class="line">        <span class="keyword">while</span>(!temp_stack.empty())</div><div class="line">        &#123;</div><div class="line">            data_stack.push(temp_stack.top());</div><div class="line">            temp_stack.pop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> x=data_stack.top();</div><div class="line">        data_stack.pop();</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** Get the front element. */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data_stack.top();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data_stack.empty();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; data_stack;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="例1例2总结"><a href="#例1例2总结" class="headerlink" title="例1例2总结"></a>例1例2总结</h3><p><strong>把握核心</strong>：</p>
<font size="5" face="华文行楷"><br><br>- 队列实现栈：新来的元素压到队头！<br>- 栈实现队列：新来的元素压到栈底！<br><br></font>

<h3 id="例3，包含min函数的栈"><a href="#例3，包含min函数的栈" class="headerlink" title="例3，包含min函数的栈"></a>例3，包含min函数的栈</h3><h4 id="设计一个栈，支持以下操作，这些操作的算法复杂度为常数级，O-1-。"><a href="#设计一个栈，支持以下操作，这些操作的算法复杂度为常数级，O-1-。" class="headerlink" title="设计一个栈，支持以下操作，这些操作的算法复杂度为常数级，O(1)。"></a>设计一个栈，支持以下操作，这些操作的算法复杂度为常数级，O(1)。</h4><ul>
<li>push(x):将x压入栈中</li>
<li>pop():弹出栈顶元素</li>
<li>top():返回栈顶元素</li>
<li>getMin():返回栈内最小的元素</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MinStack &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/** initialize your data structure here. */</span></div><div class="line">    MinStack() &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        data_stack.push(x);</div><div class="line">        <span class="keyword">if</span>(min_stack.empty())</div><div class="line">        &#123;</div><div class="line">            min_stack.push(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(x&gt;min_stack.top())</div><div class="line">            &#123;</div><div class="line">                x=min_stack.top();</div><div class="line">            &#125;</div><div class="line">            min_stack.push(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        data_stack.pop();</div><div class="line">        min_stack.pop();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data_stack.top();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> min_stack.top();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; data_stack;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; min_stack;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例4，合法的出栈序列"><a href="#例4，合法的出栈序列" class="headerlink" title="例4，合法的出栈序列"></a>例4，合法的出栈序列</h3><h4 id="已知从1至n的数字序列，按顺序入栈，每个数字入栈后即可出栈，也可在栈中停留，等待后面的数字入栈出栈后，该数字再出栈，求该数字序列的出栈序列是否合法。"><a href="#已知从1至n的数字序列，按顺序入栈，每个数字入栈后即可出栈，也可在栈中停留，等待后面的数字入栈出栈后，该数字再出栈，求该数字序列的出栈序列是否合法。" class="headerlink" title="已知从1至n的数字序列，按顺序入栈，每个数字入栈后即可出栈，也可在栈中停留，等待后面的数字入栈出栈后，该数字再出栈，求该数字序列的出栈序列是否合法。"></a>已知从1至n的数字序列，按顺序入栈，每个数字入栈后即可出栈，也可在栈中停留，等待后面的数字入栈出栈后，该数字再出栈，求该数字序列的出栈序列是否合法。</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsPopOrder</span><span class="params">(<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;order)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="keyword">int</span> n=order.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">            s.push(i);</div><div class="line">            <span class="keyword">while</span>(s.top()=order.front() &amp;&amp; !s.empty())</div><div class="line">            &#123;</div><div class="line">                s.pop();</div><div class="line">                order.pop();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!s.empty())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例6，数组中第K大的数字"><a href="#例6，数组中第K大的数字" class="headerlink" title="例6，数组中第K大的数字"></a>例6，数组中第K大的数字</h3><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>
<p><strong>示例1</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入: [3,2,1,5,6,4] 和 k = 2</div><div class="line">输出: 5</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k = 4</div><div class="line">输出: 4</div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;small_heap;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(small_heap.size()&lt;k)</div><div class="line">            &#123;</div><div class="line">                small_heap.push(nums[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(small_heap.top()&lt;nums[i])</div><div class="line">            &#123;</div><div class="line">                small_heap.pop();</div><div class="line">                small_heap.push(nums[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> small_heap.top();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例7，设计一个数据结构，该数据结构可以动态的维护一组数据，且支持如下操作："><a href="#例7，设计一个数据结构，该数据结构可以动态的维护一组数据，且支持如下操作：" class="headerlink" title="例7，设计一个数据结构，该数据结构可以动态的维护一组数据，且支持如下操作："></a>例7，设计一个数据结构，该数据结构可以动态的维护一组数据，且支持如下操作：</h3><p>（1） 添加元素<br>（2） 返回数据的中位数</p>
<hr>
<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><hr>
<h1 id="3-贪心算法（回到目录）"><a href="#3-贪心算法（回到目录）" class="headerlink" title="3 贪心算法（回到目录）"></a>3 贪心算法（<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>）</h1><h3 id="例1，分糖果。已知一些孩纸和糖果，每个孩子都有需求因子g-每个糖果有大小s-当糖果的大小s-gt-g时，代表糖果可以满足该孩子；求使用这些糖果，最多能满足多少个孩子？-每个孩子最多使用一个糖果"><a href="#例1，分糖果。已知一些孩纸和糖果，每个孩子都有需求因子g-每个糖果有大小s-当糖果的大小s-gt-g时，代表糖果可以满足该孩子；求使用这些糖果，最多能满足多少个孩子？-每个孩子最多使用一个糖果" class="headerlink" title="例1，分糖果。已知一些孩纸和糖果，每个孩子都有需求因子g,每个糖果有大小s,当糖果的大小s&gt;=g时，代表糖果可以满足该孩子；求使用这些糖果，最多能满足多少个孩子？(每个孩子最多使用一个糖果)"></a>例1，分糖果。已知一些孩纸和糖果，每个孩子都有需求因子g,每个糖果有大小s,当糖果的大小s&gt;=g时，代表糖果可以满足该孩子；求使用这些糖果，最多能满足多少个孩子？(每个孩子最多使用一个糖果)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; g, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(g.size()==<span class="number">0</span> || s.size()==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        sort(g.begin(),g.end());</div><div class="line">        sort(s.begin(),s.end());</div><div class="line">        <span class="keyword">int</span> child=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> cookie=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(child&lt;g.size() &amp;&amp; cookie&lt;s.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(g[child]&lt;=s[cookie])</div><div class="line">            &#123;</div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            cookie++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> child;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例2，摇摆序列。一个整数序列，如果两个相邻的元素的差恰好正负-负正-交替出现，则该序列被称为摇摆序列。一个小于2个元素的序列直接为摇摆序列。"><a href="#例2，摇摆序列。一个整数序列，如果两个相邻的元素的差恰好正负-负正-交替出现，则该序列被称为摇摆序列。一个小于2个元素的序列直接为摇摆序列。" class="headerlink" title="例2，摇摆序列。一个整数序列，如果两个相邻的元素的差恰好正负(负正)交替出现，则该序列被称为摇摆序列。一个小于2个元素的序列直接为摇摆序列。"></a>例2，摇摆序列。一个整数序列，如果两个相邻的元素的差恰好正负(负正)交替出现，则该序列被称为摇摆序列。一个小于2个元素的序列直接为摇摆序列。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wiggleMaxLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;<span class="number">2</span>) <span class="keyword">return</span> nums.size();</div><div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> BEGIN=<span class="number">0</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> UP=<span class="number">1</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> DOWN=<span class="number">2</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> STATE=BEGIN;</div><div class="line">        <span class="keyword">int</span> max_length=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">switch</span>(STATE)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">case</span> BEGIN:</div><div class="line">                    <span class="keyword">if</span>(nums[i<span class="number">-1</span>]&lt;nums[i])</div><div class="line">                    &#123;</div><div class="line">                        STATE=UP;</div><div class="line">                        max_length++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(nums[i<span class="number">-1</span>]&gt;nums[i])</div><div class="line">                    &#123;</div><div class="line">                        STATE=DOWN;</div><div class="line">                        max_length++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> UP:</div><div class="line">                    <span class="keyword">if</span>(nums[i<span class="number">-1</span>]&gt;nums[i])</div><div class="line">                    &#123;</div><div class="line">                        STATE=DOWN;</div><div class="line">                        max_length++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> DOWN:</div><div class="line">                    <span class="keyword">if</span>(nums[i<span class="number">-1</span>]&lt;nums[i])</div><div class="line">                    &#123;</div><div class="line">                        STATE=UP;</div><div class="line">                        max_length++;</div><div class="line">                    &#125;</div><div class="line">            &#125;   </div><div class="line">                </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_length;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例3，移除k个数字。已知一个使用字符串表示的非负整数num，将num中的k个数字移除，求移除k个数字后，获得的最小的可能的数字。"><a href="#例3，移除k个数字。已知一个使用字符串表示的非负整数num，将num中的k个数字移除，求移除k个数字后，获得的最小的可能的数字。" class="headerlink" title="例3，移除k个数字。已知一个使用字符串表示的非负整数num，将num中的k个数字移除，求移除k个数字后，获得的最小的可能的数字。"></a>例3，移除k个数字。已知一个使用字符串表示的非负整数num，将num中的k个数字移除，求移除k个数字后，获得的最小的可能的数字。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeKdigits</span><span class="params">(<span class="built_in">string</span> num, <span class="keyword">int</span> k)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line">        <span class="built_in">string</span> result=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> number=num[i]-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">while</span>(S.size()!=<span class="number">0</span> &amp;&amp; k&gt;<span class="number">0</span> &amp;&amp; S[S.size()<span class="number">-1</span>]&gt;number)</div><div class="line">            &#123;</div><div class="line">                S.pop_back();</div><div class="line">                k--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(number !=<span class="number">0</span> || S.size()!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                S.push_back(number);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">while</span>(k&gt;<span class="number">0</span> &amp;&amp; S.size()!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                S.pop_back();</div><div class="line">                k--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S.size();i++)</div><div class="line">            &#123;</div><div class="line">                result.append(<span class="number">1</span>,<span class="string">'0'</span>+S[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(result==<span class="string">""</span>)</div><div class="line">            &#123;</div><div class="line">                result=<span class="string">'0'</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例4-a，一组数据存储了非负整数，数组中的第i个元素a-i-，代表了可以从数组第i个位置最多向前跳跃a-i-步；已知数组各元素的情况下，求是否可以从数组中的第0个位置跳跃到最后一个元素的位置？"><a href="#例4-a，一组数据存储了非负整数，数组中的第i个元素a-i-，代表了可以从数组第i个位置最多向前跳跃a-i-步；已知数组各元素的情况下，求是否可以从数组中的第0个位置跳跃到最后一个元素的位置？" class="headerlink" title="例4-a，一组数据存储了非负整数，数组中的第i个元素a[i]，代表了可以从数组第i个位置最多向前跳跃a[i]步；已知数组各元素的情况下，求是否可以从数组中的第0个位置跳跃到最后一个元素的位置？"></a>例4-a，一组数据存储了非负整数，数组中的第i个元素a[i]，代表了可以从数组第i个位置最多向前跳跃a[i]步；已知数组各元素的情况下，求是否可以从数组中的第0个位置跳跃到最后一个元素的位置？</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; index;</div><div class="line">        <span class="keyword">int</span> jump=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            index.push_back(nums[i]+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> max_index=index[<span class="number">0</span>];</div><div class="line">        <span class="keyword">while</span>(jump&lt;=max_index &amp;&amp; jump&lt;index.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(max_index&lt;index[jump])</div><div class="line">            &#123;</div><div class="line">                max_index=index[jump];</div><div class="line">            &#125;</div><div class="line">            jump++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(jump==index.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="还要复习-例4-b-一个数组存储了非负整数，数组中的第i个元素a-i-，代表了可以从数组第i个位置最多向前跳跃a-i-步；已知数组各元素的情况下，确认可以从第0位置跳跃到数组最后一个位置，求最少需要跳跃几次？"><a href="#还要复习-例4-b-一个数组存储了非负整数，数组中的第i个元素a-i-，代表了可以从数组第i个位置最多向前跳跃a-i-步；已知数组各元素的情况下，确认可以从第0位置跳跃到数组最后一个位置，求最少需要跳跃几次？" class="headerlink" title="(还要复习)例4-b,一个数组存储了非负整数，数组中的第i个元素a[i]，代表了可以从数组第i个位置最多向前跳跃a[i]步；已知数组各元素的情况下，确认可以从第0位置跳跃到数组最后一个位置，求最少需要跳跃几次？"></a>(<font size="8" color="#0000">还要复习</font>)例4-b,一个数组存储了非负整数，数组中的第i个元素a[i]，代表了可以从数组第i个位置最多向前跳跃a[i]步；已知数组各元素的情况下，确认可以从第0位置跳跃到数组最后一个位置，求最少需要跳跃几次？</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> current_max_index=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> pre_max_index=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> jump_min=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i&gt;current_max_index)</div><div class="line">            &#123;</div><div class="line">                jump_min++;</div><div class="line">                current_max_index=pre_max_index;</div><div class="line">            &#125;</div><div class="line">                         </div><div class="line">            <span class="keyword">if</span>(pre_max_index&lt;nums[i]+i)</div><div class="line">            &#123;</div><div class="line">                pre_max_index=nums[i]+i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> jump_min;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例5，射击气球。已知在一个平面上有一定数量的气球，平面可以看作一个坐标系，在平面的x轴的不同位置安排弓箭手向y轴射击，弓箭可以向y轴走无穷远；给定气球的宽度（xstart-xend）-问至少需要多少弓箭手，将全部气球打爆？"><a href="#例5，射击气球。已知在一个平面上有一定数量的气球，平面可以看作一个坐标系，在平面的x轴的不同位置安排弓箭手向y轴射击，弓箭可以向y轴走无穷远；给定气球的宽度（xstart-xend）-问至少需要多少弓箭手，将全部气球打爆？" class="headerlink" title="例5，射击气球。已知在一个平面上有一定数量的气球，平面可以看作一个坐标系，在平面的x轴的不同位置安排弓箭手向y轴射击，弓箭可以向y轴走无穷远；给定气球的宽度（xstart,xend）,问至少需要多少弓箭手，将全部气球打爆？"></a>例5，射击气球。已知在一个平面上有一定数量的气球，平面可以看作一个坐标系，在平面的x轴的不同位置安排弓箭手向y轴射击，弓箭可以向y轴走无穷远；给定气球的宽度（xstart,xend）,问至少需要多少弓箭手，将全部气球打爆？</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;a,<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a.first&lt;b.first;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMinArrowShots</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span></div><div class="line">    &#123;     </div><div class="line">        <span class="keyword">if</span>(points.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        sort(points.begin(),points.end(),cmp);</div><div class="line">        <span class="keyword">int</span> shot_count=<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> shot_begin=points[<span class="number">0</span>].first;</div><div class="line">        <span class="keyword">int</span> shot_end=points[<span class="number">0</span>].second;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;points.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(points[i].first&lt;=shot_end)</div><div class="line">            &#123;</div><div class="line">                shot_begin=points[i].first;</div><div class="line">                <span class="keyword">if</span>(shot_end&gt;points[i].second)</div><div class="line">                &#123;</div><div class="line">                    shot_end=points[i].second;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                shot_count++;</div><div class="line">                shot_begin=points[i].first;</div><div class="line">                shot_end=points[i].second;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> shot_count;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="还要复习-例6，最优加油方法。已知一条公路上，有个起点和终点，这之间有n个加油站；已知从这n个加油站到终点的距离d与各个加油站的加油量1-起点位置至终点的距离L与起始时刻油箱中的汽油量P-假设使用1个单位的汽油即走1个单位的距离，油箱没有上限，最少加几次油，可以从起点开至终点？"><a href="#还要复习-例6，最优加油方法。已知一条公路上，有个起点和终点，这之间有n个加油站；已知从这n个加油站到终点的距离d与各个加油站的加油量1-起点位置至终点的距离L与起始时刻油箱中的汽油量P-假设使用1个单位的汽油即走1个单位的距离，油箱没有上限，最少加几次油，可以从起点开至终点？" class="headerlink" title="(还要复习)例6，最优加油方法。已知一条公路上，有个起点和终点，这之间有n个加油站；已知从这n个加油站到终点的距离d与各个加油站的加油量1,起点位置至终点的距离L与起始时刻油箱中的汽油量P;假设使用1个单位的汽油即走1个单位的距离，油箱没有上限，最少加几次油，可以从起点开至终点？"></a>(<font size="8" color="#0000">还要复习</font>)例6，最优加油方法。已知一条公路上，有个起点和终点，这之间有n个加油站；已知从这n个加油站到终点的距离d与各个加油站的加油量1,起点位置至终点的距离L与起始时刻油箱中的汽油量P;假设使用1个单位的汽油即走1个单位的距离，油箱没有上限，最少加几次油，可以从起点开至终点？</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;a,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a.first&gt;b.first;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_minimum_stop</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> P,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;stop)</span></span></div><div class="line">&#123;</div><div class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; Q;</div><div class="line">    <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">    stop.push_back(make_pair(<span class="number">0</span>,<span class="number">0</span>));</div><div class="line">    sort(stop.begin(),stop.end(),cmp);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stop.size();i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> dis=L-stop[i].first;</div><div class="line">        <span class="keyword">while</span>(!Q.empty() &amp;&amp; P&lt;dis)</div><div class="line">        &#123;</div><div class="line">            P +=Q.top();</div><div class="line">            Q.pop();</div><div class="line">            result++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(Q.empty &amp;&amp; P&lt;dis)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        P=P-dis;</div><div class="line">        L=stop[i].first;</div><div class="line">        Q.push(stop[i].second);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="4-递归-回溯与分治（回到目录）"><a href="#4-递归-回溯与分治（回到目录）" class="headerlink" title="4 递归 回溯与分治（回到目录）"></a>4 递归 回溯与分治（<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>）</h1><p>[toc]</p>
<h3 id="例1-a，求子集。已知一组数-其中无重复元素-，求这组数可以组成的所有子集。结果中不可以有重复的子集。"><a href="#例1-a，求子集。已知一组数-其中无重复元素-，求这组数可以组成的所有子集。结果中不可以有重复的子集。" class="headerlink" title="例1-a，求子集。已知一组数(其中无重复元素)，求这组数可以组成的所有子集。结果中不可以有重复的子集。"></a>例1-a，求子集。已知一组数(其中无重复元素)，求这组数可以组成的所有子集。结果中不可以有重复的子集。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,nums,item,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp;result)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size()) <span class="keyword">return</span>;</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        result.push_back(item);</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result);</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>另一种写法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;<span class="comment">//for循环</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;res;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        res.push_back(item);</div><div class="line">        <span class="comment">//sort(nums.begin(),nums.end());//解答错误不是没有排序的问题</span></div><div class="line">        generate(res,item,nums,<span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;item, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> begin)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(begin&gt;=nums.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            item.push_back(nums[i]);</div><div class="line">            res.push_back(item);</div><div class="line">            generate(res,item,nums,i+<span class="number">1</span>);</div><div class="line">            item.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="例1-b-求子集2。已知一组数-其中有重复元素-，求这组数可以组成的所有子集。结果中无重复的子集。"><a href="#例1-b-求子集2。已知一组数-其中有重复元素-，求这组数可以组成的所有子集。结果中无重复的子集。" class="headerlink" title="例1-b,求子集2。已知一组数(其中有重复元素)，求这组数可以组成的所有子集。结果中无重复的子集。"></a>例1-b,求子集2。已知一组数(其中有重复元素)，求这组数可以组成的所有子集。结果中无重复的子集。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsetsWithDup(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res_set;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,nums,item,result,res_set);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;result, <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res_set)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size())</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(res_set.find(item)==res_set.end())</div><div class="line">        &#123;</div><div class="line">            result.push_back(item);</div><div class="line">            res_set.insert(item);</div><div class="line">        &#125;</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例1-c-组合数之和。已知一组数（其中有重复元素），求这组数可以组成的所有子集中，子集的各个元素和为整数target的子集，结果中无重复元素。"><a href="#例1-c-组合数之和。已知一组数（其中有重复元素），求这组数可以组成的所有子集中，子集的各个元素和为整数target的子集，结果中无重复元素。" class="headerlink" title="例1-c,组合数之和。已知一组数（其中有重复元素），求这组数可以组成的所有子集中，子集的各个元素和为整数target的子集，结果中无重复元素。"></a>例1-c,组合数之和。已知一组数（其中有重复元素），求这组数可以组成的所有子集中，子集的各个元素和为整数target的子集，结果中无重复元素。</h3><p><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combinationSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res_set;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,nums,item,result,res_set);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;target_result;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;result.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;result[i].size();j++)</div><div class="line">            &#123;</div><div class="line">                sum=sum+result[i][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(sum==target)</div><div class="line">            &#123;</div><div class="line">                target_result.push_back(result[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> target_result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;result, <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res_set)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size())</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(res_set.find(item)==res_set.end())</div><div class="line">        &#123;</div><div class="line">            result.push_back(item);</div><div class="line">            res_set.insert(item);</div><div class="line">        &#125;</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; combinationSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; item;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res_set;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        result.push_back(item);</div><div class="line">        generate(<span class="number">0</span>,<span class="number">0</span>,nums,item,result,res_set);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> sum, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; item, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;result, <span class="built_in">set</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;res_set)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;=nums.size() || sum&gt;target)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        sum=sum+nums[i];</div><div class="line">        item.push_back(nums[i]);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(res_set.find(item)==res_set.end() &amp;&amp; sum==target)</div><div class="line">        &#123;</div><div class="line">            result.push_back(item);</div><div class="line">            res_set.insert(item);</div><div class="line">        &#125;</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">        sum=sum-nums[i];</div><div class="line">        item.pop_back();</div><div class="line">        generate(i+<span class="number">1</span>,nums,item,result,res_set);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="例2，生成括号，已知n组括号，开发一个程序，生成这n组括号所有合法的组合可能。"><a href="#例2，生成括号，已知n组括号，开发一个程序，生成这n组括号所有合法的组合可能。" class="headerlink" title="例2，生成括号，已知n组括号，开发一个程序，生成这n组括号所有合法的组合可能。"></a>例2，生成括号，已知n组括号，开发一个程序，生成这n组括号所有合法的组合可能。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;result;</div><div class="line">        generate(<span class="string">""</span>,n,n,result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">string</span> item,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;result)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(left==<span class="number">0</span> &amp;&amp; right==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            result.push_back(item);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(left&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            generate(item+<span class="string">'('</span>,left<span class="number">-1</span>,right,result);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(left&lt;right)</div><div class="line">        &#123;</div><div class="line">            generate(item+<span class="string">')'</span>,left,right<span class="number">-1</span>,result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例3，N皇后。"><a href="#例3，N皇后。" class="headerlink" title="例3，N皇后。"></a>例3，N皇后。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; solveNQueens(<span class="keyword">int</span> n) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; location;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mark;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            mark.push_back((<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            &#123;</div><div class="line">                mark[i].push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            location.push_back(<span class="string">""</span>);</div><div class="line">            location[i].append(n,<span class="string">'.'</span>);</div><div class="line">        &#125;</div><div class="line">        generate(<span class="number">0</span>,n,location,result,mark);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">        </div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">void</span> put_down_the_queen(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;mark)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</div><div class="line">        mark[x][y]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;mark.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> new_x=x+i*dx[j];</div><div class="line">                <span class="keyword">int</span> new_y=y+i*dy[j];</div><div class="line">                <span class="keyword">if</span>(new_x&gt;=<span class="number">0</span> &amp;&amp; new_x&lt;mark.size() &amp;&amp; new_y&gt;=<span class="number">0</span> &amp;&amp; new_y&lt;mark.size())</div><div class="line">                &#123;</div><div class="line">                    mark[new_x][new_y]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">void</span> gegerate(<span class="keyword">int</span> k,<span class="keyword">int</span> n,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;location,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;&amp;result,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;mark)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(k==n)</div><div class="line">        &#123;</div><div class="line">            result.push_back(location);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">           <span class="keyword">if</span>(mark[k][i]==<span class="number">0</span>)</div><div class="line">           &#123;</div><div class="line">               <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;temp_mark=mark;</div><div class="line">               location[k][i]=<span class="string">'Q'</span>;</div><div class="line">               put_down_the_queen(k,i,mark);</div><div class="line">               generate(k+<span class="number">1</span>,n,location,result,mark);</div><div class="line">               mark=temp_mark;</div><div class="line">               location[k][i]=<span class="string">'.'</span>;</div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例4，求逆序数。已知数组nums-求新数组count，count-i-代表了在nums-i-右侧且比nums-i-小的元素个数。"><a href="#例4，求逆序数。已知数组nums-求新数组count，count-i-代表了在nums-i-右侧且比nums-i-小的元素个数。" class="headerlink" title="例4，求逆序数。已知数组nums,求新数组count，count[i]代表了在nums[i]右侧且比nums[i]小的元素个数。"></a>例4，求逆序数。已知数组nums,求新数组count，count[i]代表了在nums[i]右侧且比nums[i]小的元素个数。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</div><div class="line">   &#123;</div><div class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count;</div><div class="line">       <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; vec;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">       &#123;</div><div class="line">           vec.push_back(make_pair(nums[i],i));</div><div class="line">           count.push_back(<span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">       merge_sort(vec,count);</div><div class="line">       <span class="keyword">return</span> count;</div><div class="line">   &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge_sort_two_vec</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;sub_vec1,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;sub_vec2,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;vec,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;count)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;sub_vec1.size() &amp;&amp; j&lt;sub_vec2.size())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sub_vec1[i].first&lt;=sub_vec2[j].first)</div><div class="line">            &#123;</div><div class="line">                count[sub_vec1[i].second] +=j;</div><div class="line">                vec.push_back(sub_vec1[i]);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                vec.push_back(sub_vec2[j]);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;i&lt;sub_vec1.size();i++)</div><div class="line">        &#123;   </div><div class="line">            count[sub_vec1[i].second] +=j;</div><div class="line">            vec.push_back(sub_vec1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;j&lt;sub_vec2.size();j++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec2[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &amp;vec,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;count)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(vec.size()&lt;<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid=vec.size()/<span class="number">2</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; sub_vec1;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; sub_vec2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid;i++)</div><div class="line">        &#123;</div><div class="line">            sub_vec1.push_back(vec[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid;i&lt;vec.size();i++)</div><div class="line">        &#123;</div><div class="line">            sub_vec2.push_back(vec[i]);</div><div class="line">        &#125;</div><div class="line">        merge_sort(sub_vec1,count);</div><div class="line">        merge_sort(sub_vec2,count);</div><div class="line">        vec.clear();</div><div class="line">        merge_sort_two_vec(sub_vec1,sub_vec2,vec,count);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="预备知识。归并排序。"><a href="#预备知识。归并排序。" class="headerlink" title="预备知识。归并排序。"></a>预备知识。归并排序。</h3><h4 id="已知两个排序数组，将这两个数组合并为一个排序数组。"><a href="#已知两个排序数组，将这两个数组合并为一个排序数组。" class="headerlink" title="已知两个排序数组，将这两个数组合并为一个排序数组。"></a>已知两个排序数组，将这两个数组合并为一个排序数组。</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sortedTwoVec</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;sub_vec1,vectoer&lt;<span class="keyword">int</span>&gt; &amp;sub_vec2,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i&lt;sub_vec1.size() &amp;&amp; j&lt;sub_vec2.size()) <span class="comment">//注意这里不能用for(;i&lt;sub_vec1.size(),j&lt;sub_vec2.size();)!!!!</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(sub_vec1[i]&lt;=sub_vec2[j])</div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec1[i]);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec2[j]);</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;i&lt;sub_vec1.size();i++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec1[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(j&lt;sub_vec2.size();j++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(sub_vec2[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="对一个数组进行归并排序。"><a href="#对一个数组进行归并排序。" class="headerlink" title="对一个数组进行归并排序。"></a>对一个数组进行归并排序。</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_vec</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(vec.size())&lt;<span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid=vec.size()/<span class="number">2</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec1;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec2;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid;i++)</div><div class="line">    &#123;</div><div class="line">        vec1.push_back(vec[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=mid;j&lt;vec.size();j++)</div><div class="line">    &#123;</div><div class="line">        vec2.push_back(vec[j]);</div><div class="line">    &#125;</div><div class="line">    merge_vec(vec1);</div><div class="line">    merge_vec(vec2);</div><div class="line">    vec.clear();</div><div class="line">    merge_sortedTwoVec(vec1,vec2,vec);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="5-二叉树与图（回到目录）"><a href="#5-二叉树与图（回到目录）" class="headerlink" title="5 二叉树与图（回到目录）"></a>5 二叉树与图（<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>）</h1><h3 id="二分查找的两种方法"><a href="#二分查找的两种方法" class="headerlink" title="二分查找的两种方法"></a>二分查找的两种方法</h3><h4 id="方法1（递归）"><a href="#方法1（递归）" class="headerlink" title="方法1（递归）"></a>方法1（递归）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binary_search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;sort_array,<span class="keyword">int</span> begin,<span class="keyword">int</span> end,<span class="keyword">int</span> target)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(begin&gt;end) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(target==sort_array[mid])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> ture;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;sort_array[mid])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> binary_search(sort_array,begin,mid<span class="number">-1</span>,target);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;sort_array[mid])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> binary_search(sort_array,mid+<span class="number">1</span>,end,target);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="方法2（循环）"><a href="#方法2（循环）" class="headerlink" title="方法2（循环）"></a>方法2（循环）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binary_search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;sort_array,<span class="keyword">int</span> target)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end=sort_array.size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(target==sort_array[mid])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;sort_array[mid])</div><div class="line">        &#123;</div><div class="line">            end=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;sort_array[mid])</div><div class="line">        &#123;</div><div class="line">            begin=mid+<span class="number">1</span>;   </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例1，插入位置。给定一个排序数组nums-无重复元素-与目标值target，如果target在nums里出现，则返回target所在下标，如果target未在nums中出现，则返回target应该插入的位置的数组下标，使得将target插入数组后，数组仍然有序。"><a href="#例1，插入位置。给定一个排序数组nums-无重复元素-与目标值target，如果target在nums里出现，则返回target所在下标，如果target未在nums中出现，则返回target应该插入的位置的数组下标，使得将target插入数组后，数组仍然有序。" class="headerlink" title="例1，插入位置。给定一个排序数组nums(无重复元素)与目标值target，如果target在nums里出现，则返回target所在下标，如果target未在nums中出现，则返回target应该插入的位置的数组下标，使得将target插入数组后，数组仍然有序。"></a>例1，插入位置。给定一个排序数组nums(无重复元素)与目标值target，如果target在nums里出现，则返回target所在下标，如果target未在nums中出现，则返回target应该插入的位置的数组下标，使得将target插入数组后，数组仍然有序。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> index=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(index==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                index=mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(mid==<span class="number">0</span> || target&gt;nums[mid<span class="number">-1</span>])</div><div class="line">                &#123;</div><div class="line">                    index=mid;</div><div class="line">                &#125;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(mid==nums.size()<span class="number">-1</span> || target&lt;nums[mid+<span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    index=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> index;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例2，区间查找。给定一个排序数组nums-有重复元素-与目标值target，如果target在nums里出现，则返回target所在区间的左右断电下标（-左，右-），如果target在nums里未出现，则返回-1-1"><a href="#例2，区间查找。给定一个排序数组nums-有重复元素-与目标值target，如果target在nums里出现，则返回target所在区间的左右断电下标（-左，右-），如果target在nums里未出现，则返回-1-1" class="headerlink" title="例2，区间查找。给定一个排序数组nums(有重复元素)与目标值target，如果target在nums里出现，则返回target所在区间的左右断电下标（[左，右]），如果target在nums里未出现，则返回[-1,-1]"></a>例2，区间查找。给定一个排序数组nums(有重复元素)与目标值target，如果target在nums里出现，则返回target所在区间的左右断电下标（[左，右]），如果target在nums里未出现，则返回[-1,-1]</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        result.push_back(left_bound(nums,target));</div><div class="line">        result.push_back(right_bound(nums,target));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> target)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>,end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[mid<span class="number">-1</span>]&lt;target || mid==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> mid;</div><div class="line">                &#125;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> target)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> begin=<span class="number">0</span>,end=nums.size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(target==nums[mid])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[mid+<span class="number">1</span>]&gt;target || mid==nums.size()<span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">            begin=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">        &#123;</div><div class="line">            end=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">        &#123;</div><div class="line">            begin=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例3，旋转数组。给定一个排序数组nums-没有重复元素-，且nums可能以某个未知下标旋转，给定目标值target-求target是否在nums中出现，若出现返回所在下标，未出现返回-1。"><a href="#例3，旋转数组。给定一个排序数组nums-没有重复元素-，且nums可能以某个未知下标旋转，给定目标值target-求target是否在nums中出现，若出现返回所在下标，未出现返回-1。" class="headerlink" title="例3，旋转数组。给定一个排序数组nums(没有重复元素)，且nums可能以某个未知下标旋转，给定目标值target,求target是否在nums中出现，若出现返回所在下标，未出现返回-1。"></a>例3，旋转数组。给定一个排序数组nums(没有重复元素)，且nums可能以某个未知下标旋转，给定目标值target,求target是否在nums中出现，若出现返回所在下标，未出现返回-1。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[begin]&lt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(target&gt;=nums[begin])</div><div class="line">                    &#123;</div><div class="line">                        end=mid<span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        begin=mid+<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]&gt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    end=mid<span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]==nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[begin]&lt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]&gt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(target&gt;=nums[begin])</div><div class="line">                    &#123;</div><div class="line">                        end=mid<span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        begin=mid+<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]==nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例4，二叉查找树编码和解码。给定一个二叉查找树，实现对该二叉树编码与解码功能。编码即将该二查找树转为字符串，解码即将字符串转为二叉查找树。不限制使用何种编码算法，只需保证当对二叉查找树调用编码功能后可再调用解码功能将其复原。"><a href="#例4，二叉查找树编码和解码。给定一个二叉查找树，实现对该二叉树编码与解码功能。编码即将该二查找树转为字符串，解码即将字符串转为二叉查找树。不限制使用何种编码算法，只需保证当对二叉查找树调用编码功能后可再调用解码功能将其复原。" class="headerlink" title="例4，二叉查找树编码和解码。给定一个二叉查找树，实现对该二叉树编码与解码功能。编码即将该二查找树转为字符串，解码即将字符串转为二叉查找树。不限制使用何种编码算法，只需保证当对二叉查找树调用编码功能后可再调用解码功能将其复原。"></a>例4，二叉查找树编码和解码。给定一个二叉查找树，实现对该二叉树编码与解码功能。编码即将该二查找树转为字符串，解码即将字符串转为二叉查找树。不限制使用何种编码算法，只需保证当对二叉查找树调用编码功能后可再调用解码功能将其复原。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Codec &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="comment">// Encodes a tree to a single string.</span></div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> data;</div><div class="line">        BST_preorder(root,data);</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Decodes your encoded data to tree.</span></div><div class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(<span class="built_in">string</span> data)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(data.length()==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; node_vec;</div><div class="line">        <span class="keyword">int</span> val=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;data.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(data[i]==<span class="string">'#'</span>)</div><div class="line">            &#123;</div><div class="line">                node_vec.push_back(<span class="keyword">new</span> TreeNode(val));</div><div class="line">                val=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                val=val*<span class="number">10</span>+data[i]-<span class="string">'0'</span>;     </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;node_vec.size();i++)</div><div class="line">            &#123;</div><div class="line">                BST_insert(node_vec[<span class="number">0</span>],node_vec[i]);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> node_vec[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_int_to_str</span><span class="params">(<span class="keyword">int</span> val,<span class="built_in">string</span> &amp;str_val)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> temp;</div><div class="line">        <span class="keyword">while</span>(val)</div><div class="line">        &#123;</div><div class="line">            temp +=val%<span class="number">10</span>+<span class="string">'0'</span>;</div><div class="line">            val=val/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=temp.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            str_val += temp[i];</div><div class="line">        &#125;</div><div class="line">        str_val += <span class="string">'#'</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BST_preorder</span><span class="params">(TreeNode* node,<span class="built_in">string</span> &amp;data)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!node)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">string</span> str_val;</div><div class="line">        change_int_to_str(node-&gt;val,str_val);</div><div class="line">        data=data+str_val;</div><div class="line">        BST_preorder(node-&gt;left,data);</div><div class="line">        BST_preorder(node-&gt;right,data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BST_insert</span><span class="params">(TreeNode* node,TreeNode* insert_node)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(insert_node-&gt;val &lt; node-&gt;val)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node-&gt;left)</div><div class="line">            &#123;</div><div class="line">                BST_insert(node-&gt;left,insert_node);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                node-&gt;left=insert_node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node-&gt;right)</div><div class="line">            &#123;</div><div class="line">                BST_insert(node-&gt;right,insert_node);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                node-&gt;right=insert_node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="6-二分查找与二叉查找树（回到目录）"><a href="#6-二分查找与二叉查找树（回到目录）" class="headerlink" title="6 二分查找与二叉查找树（回到目录）"></a>6 二分查找与二叉查找树（<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>）</h1><h3 id="二分查找的两种方法-1"><a href="#二分查找的两种方法-1" class="headerlink" title="二分查找的两种方法"></a>二分查找的两种方法</h3><h4 id="方法1（递归）-1"><a href="#方法1（递归）-1" class="headerlink" title="方法1（递归）"></a>方法1（递归）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binary_search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;sort_array,<span class="keyword">int</span> begin,<span class="keyword">int</span> end,<span class="keyword">int</span> target)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(begin&gt;end) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(target==sort_array[mid])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> ture;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;sort_array[mid])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> binary_search(sort_array,begin,mid<span class="number">-1</span>,target);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;sort_array[mid])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> binary_search(sort_array,mid+<span class="number">1</span>,end,target);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="方法2（循环）-1"><a href="#方法2（循环）-1" class="headerlink" title="方法2（循环）"></a>方法2（循环）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binary_search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;sort_array,<span class="keyword">int</span> target)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end=sort_array.size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(target==sort_array[mid])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;sort_array[mid])</div><div class="line">        &#123;</div><div class="line">            end=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;sort_array[mid])</div><div class="line">        &#123;</div><div class="line">            begin=mid+<span class="number">1</span>;   </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例1，插入位置。给定一个排序数组nums-无重复元素-与目标值target，如果target在nums里出现，则返回target所在下标，如果target未在nums中出现，则返回target应该插入的位置的数组下标，使得将target插入数组后，数组仍然有序。-1"><a href="#例1，插入位置。给定一个排序数组nums-无重复元素-与目标值target，如果target在nums里出现，则返回target所在下标，如果target未在nums中出现，则返回target应该插入的位置的数组下标，使得将target插入数组后，数组仍然有序。-1" class="headerlink" title="例1，插入位置。给定一个排序数组nums(无重复元素)与目标值target，如果target在nums里出现，则返回target所在下标，如果target未在nums中出现，则返回target应该插入的位置的数组下标，使得将target插入数组后，数组仍然有序。"></a>例1，插入位置。给定一个排序数组nums(无重复元素)与目标值target，如果target在nums里出现，则返回target所在下标，如果target未在nums中出现，则返回target应该插入的位置的数组下标，使得将target插入数组后，数组仍然有序。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> index=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(index==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                index=mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(mid==<span class="number">0</span> || target&gt;nums[mid<span class="number">-1</span>])</div><div class="line">                &#123;</div><div class="line">                    index=mid;</div><div class="line">                &#125;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(mid==nums.size()<span class="number">-1</span> || target&lt;nums[mid+<span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    index=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> index;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例2，区间查找。给定一个排序数组nums-有重复元素-与目标值target，如果target在nums里出现，则返回target所在区间的左右断电下标（-左，右-），如果target在nums里未出现，则返回-1-1-1"><a href="#例2，区间查找。给定一个排序数组nums-有重复元素-与目标值target，如果target在nums里出现，则返回target所在区间的左右断电下标（-左，右-），如果target在nums里未出现，则返回-1-1-1" class="headerlink" title="例2，区间查找。给定一个排序数组nums(有重复元素)与目标值target，如果target在nums里出现，则返回target所在区间的左右断电下标（[左，右]），如果target在nums里未出现，则返回[-1,-1]"></a>例2，区间查找。给定一个排序数组nums(有重复元素)与目标值target，如果target在nums里出现，则返回target所在区间的左右断电下标（[左，右]），如果target在nums里未出现，则返回[-1,-1]</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        result.push_back(left_bound(nums,target));</div><div class="line">        result.push_back(right_bound(nums,target));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> target)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>,end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[mid<span class="number">-1</span>]&lt;target || mid==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> mid;</div><div class="line">                &#125;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                end=mid<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                begin=mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> target)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> begin=<span class="number">0</span>,end=nums.size()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(target==nums[mid])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(nums[mid+<span class="number">1</span>]&gt;target || mid==nums.size()<span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">            begin=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">        &#123;</div><div class="line">            end=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">        &#123;</div><div class="line">            begin=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例3，旋转数组。给定一个排序数组nums-没有重复元素-，且nums可能以某个未知下标旋转，给定目标值target-求target是否在nums中出现，若出现返回所在下标，未出现返回-1。-1"><a href="#例3，旋转数组。给定一个排序数组nums-没有重复元素-，且nums可能以某个未知下标旋转，给定目标值target-求target是否在nums中出现，若出现返回所在下标，未出现返回-1。-1" class="headerlink" title="例3，旋转数组。给定一个排序数组nums(没有重复元素)，且nums可能以某个未知下标旋转，给定目标值target,求target是否在nums中出现，若出现返回所在下标，未出现返回-1。"></a>例3，旋转数组。给定一个排序数组nums(没有重复元素)，且nums可能以某个未知下标旋转，给定目标值target,求target是否在nums中出现，若出现返回所在下标，未出现返回-1。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end=nums.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(begin&lt;=end)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[begin]&lt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(target&gt;=nums[begin])</div><div class="line">                    &#123;</div><div class="line">                        end=mid<span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        begin=mid+<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]&gt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    end=mid<span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]==nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[begin]&lt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]&gt;nums[mid])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(target&gt;=nums[begin])</div><div class="line">                    &#123;</div><div class="line">                        end=mid<span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        begin=mid+<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[begin]==nums[mid])</div><div class="line">                &#123;</div><div class="line">                    begin=mid+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例4，二叉查找树编码和解码。给定一个二叉查找树，实现对该二叉树编码与解码功能。编码即将该二查找树转为字符串，解码即将字符串转为二叉查找树。不限制使用何种编码算法，只需保证当对二叉查找树调用编码功能后可再调用解码功能将其复原。-1"><a href="#例4，二叉查找树编码和解码。给定一个二叉查找树，实现对该二叉树编码与解码功能。编码即将该二查找树转为字符串，解码即将字符串转为二叉查找树。不限制使用何种编码算法，只需保证当对二叉查找树调用编码功能后可再调用解码功能将其复原。-1" class="headerlink" title="例4，二叉查找树编码和解码。给定一个二叉查找树，实现对该二叉树编码与解码功能。编码即将该二查找树转为字符串，解码即将字符串转为二叉查找树。不限制使用何种编码算法，只需保证当对二叉查找树调用编码功能后可再调用解码功能将其复原。"></a>例4，二叉查找树编码和解码。给定一个二叉查找树，实现对该二叉树编码与解码功能。编码即将该二查找树转为字符串，解码即将字符串转为二叉查找树。不限制使用何种编码算法，只需保证当对二叉查找树调用编码功能后可再调用解码功能将其复原。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Codec &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="comment">// Encodes a tree to a single string.</span></div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> data;</div><div class="line">        BST_preorder(root,data);</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Decodes your encoded data to tree.</span></div><div class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(<span class="built_in">string</span> data)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(data.length()==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; node_vec;</div><div class="line">        <span class="keyword">int</span> val=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;data.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(data[i]==<span class="string">'#'</span>)</div><div class="line">            &#123;</div><div class="line">                node_vec.push_back(<span class="keyword">new</span> TreeNode(val));</div><div class="line">                val=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                val=val*<span class="number">10</span>+data[i]-<span class="string">'0'</span>;     </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;node_vec.size();i++)</div><div class="line">            &#123;</div><div class="line">                BST_insert(node_vec[<span class="number">0</span>],node_vec[i]);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> node_vec[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_int_to_str</span><span class="params">(<span class="keyword">int</span> val,<span class="built_in">string</span> &amp;str_val)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> temp;</div><div class="line">        <span class="keyword">while</span>(val)</div><div class="line">        &#123;</div><div class="line">            temp +=val%<span class="number">10</span>+<span class="string">'0'</span>;</div><div class="line">            val=val/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=temp.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            str_val += temp[i];</div><div class="line">        &#125;</div><div class="line">        str_val += <span class="string">'#'</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BST_preorder</span><span class="params">(TreeNode* node,<span class="built_in">string</span> &amp;data)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!node)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">string</span> str_val;</div><div class="line">        change_int_to_str(node-&gt;val,str_val);</div><div class="line">        data=data+str_val;</div><div class="line">        BST_preorder(node-&gt;left,data);</div><div class="line">        BST_preorder(node-&gt;right,data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BST_insert</span><span class="params">(TreeNode* node,TreeNode* insert_node)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(insert_node-&gt;val &lt; node-&gt;val)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node-&gt;left)</div><div class="line">            &#123;</div><div class="line">                BST_insert(node-&gt;left,insert_node);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                node-&gt;left=insert_node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(node-&gt;right)</div><div class="line">            &#123;</div><div class="line">                BST_insert(node-&gt;right,insert_node);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                node-&gt;right=insert_node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="7-哈希表与字符串（回到目录）"><a href="#7-哈希表与字符串（回到目录）" class="headerlink" title="7 哈希表与字符串（回到目录）"></a>7 哈希表与字符串（<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>）</h1><h3 id="例1，最长回文串。已知一个只包括大小写字符的字符串，求用该字符串中的字符可以生成的最长回文字符串长度。"><a href="#例1，最长回文串。已知一个只包括大小写字符的字符串，求用该字符串中的字符可以生成的最长回文字符串长度。" class="headerlink" title="例1，最长回文串。已知一个只包括大小写字符的字符串，求用该字符串中的字符可以生成的最长回文字符串长度。"></a>例1，最长回文串。已知一个只包括大小写字符的字符串，求用该字符串中的字符可以生成的最长回文字符串长度。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> char_map[<span class="number">128</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">int</span> max_length=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            char_map[s[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">128</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(char_map[i]%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                max_length=max_length+char_map[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                max_length=max_length+char_map[i]<span class="number">-1</span>;</div><div class="line">                flag=<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_length+flag;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="补充，leetcode-5-最长回文子串"><a href="#补充，leetcode-5-最长回文子串" class="headerlink" title="补充，leetcode 5:最长回文子串"></a>补充，leetcode 5:最长回文子串</h3><p><strong>超出时间限制的做法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> res;</div><div class="line">        <span class="keyword">if</span>(s.empty() || s.length()==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=s.length()<span class="number">-1</span>;j&gt;i;j--)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">string</span> temp=s.substr(i,j-i+<span class="number">1</span>);</div><div class="line">                <span class="keyword">if</span>(isPalindrome(temp))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(temp.length()&gt;res.length())</div><div class="line">                    &#123;</div><div class="line">                        res=temp;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(res.empty() &amp;&amp; !s.empty())</div><div class="line">        &#123;</div><div class="line">            res=s[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> str)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">bool</span> res=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii=<span class="number">0</span>,jj=str.length()<span class="number">-1</span>;ii&lt;jj;ii++,jj--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(str[ii] !=str[jj])</div><div class="line">            &#123;</div><div class="line">                res=<span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="例2，已知字符串pattern与字符串str，确认str是否与pattern匹配。str与pattern匹配代表字符串str中的单词与pattern中的字符一一对应。（其中pattern中只包含小写字符，str中的单词只包含小写字符，使用空格分隔）"><a href="#例2，已知字符串pattern与字符串str，确认str是否与pattern匹配。str与pattern匹配代表字符串str中的单词与pattern中的字符一一对应。（其中pattern中只包含小写字符，str中的单词只包含小写字符，使用空格分隔）" class="headerlink" title="例2，已知字符串pattern与字符串str，确认str是否与pattern匹配。str与pattern匹配代表字符串str中的单词与pattern中的字符一一对应。（其中pattern中只包含小写字符，str中的单词只包含小写字符，使用空格分隔）"></a>例2，已知字符串pattern与字符串str，确认str是否与pattern匹配。str与pattern匹配代表字符串str中的单词与pattern中的字符一一对应。（其中pattern中只包含小写字符，str中的单词只包含小写字符，使用空格分隔）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wordPattern</span><span class="params">(<span class="built_in">string</span> pattern, <span class="built_in">string</span> str)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">char</span>&gt; word_map;</div><div class="line">        <span class="keyword">char</span> used[<span class="number">128</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="built_in">string</span> word;</div><div class="line">        <span class="keyword">int</span> pos=<span class="number">0</span>;</div><div class="line">        str.push_back(<span class="string">' '</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(pos==pattern.length())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(word_map.find(word)==word_map.end())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(used[pattern[pos]])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        word_map[word]=pattern[pos];</div><div class="line">                        used[pattern[pos]]=<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(word_map[word]!=pattern[pos])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                word=<span class="string">""</span>;</div><div class="line">                pos++;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                word=word+str[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(pos!=pattern.length())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例3，同字符词语分组。已知一组字符串，将所有anagram-由叠倒字母顺序而构成的字-放在一起输出。"><a href="#例3，同字符词语分组。已知一组字符串，将所有anagram-由叠倒字母顺序而构成的字-放在一起输出。" class="headerlink" title="例3，同字符词语分组。已知一组字符串，将所有anagram(由叠倒字母顺序而构成的字)放在一起输出。"></a>例3，同字符词语分组。已知一组字符串，将所有anagram(由叠倒字母顺序而构成的字)放在一起输出。</h3><p>例如：[“eat”,”tea”,”tan”,”ate”,”nat”,”bat”]</p>
<p>返回：[[“ate,”eat],”tea”],[“nat”,”tan”],[“bat”]]<br><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; groupAnagrams(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs) </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; anagram;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">string</span> str=strs[i];</div><div class="line">            sort(str.begin(),str.end());</div><div class="line">            <span class="keyword">if</span>(anagram.find(str)==anagram.end())</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; item;</div><div class="line">                anagram[str]=item;</div><div class="line">            &#125;</div><div class="line">            anagram[str].push_back(strs[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; ::iterator it;</div><div class="line">        <span class="keyword">for</span>(it=anagram.begin();it!=anagram.end();it++)</div><div class="line">        &#123;</div><div class="line">            res.push_back((*it).second);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法2</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; groupAnagrams(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs) </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;anagram;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">            change_to_vec(strs[i],vec);</div><div class="line">            <span class="keyword">if</span>(anagram.find(vec)==anagram.end())</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; item;</div><div class="line">                anagram[vec]=item;</div><div class="line">            &#125;</div><div class="line">            anagram[vec].push_back(strs[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;::iterator it;</div><div class="line">        <span class="keyword">for</span>(it=anagram.begin();it!=anagram.end();it++)</div><div class="line">        &#123;</div><div class="line">            res.push_back((*it).second);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_to_vec</span><span class="params">(<span class="built_in">string</span> &amp;str,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</div><div class="line">        &#123;</div><div class="line">            vec.push_back(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</div><div class="line">        &#123;</div><div class="line">            vec[str[i]-<span class="string">'a'</span>]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="例4，无重复字符的最长字串。已知一个字符串，求用该字符串的无重复字符的最长字串的长度。"><a href="#例4，无重复字符的最长字串。已知一个字符串，求用该字符串的无重复字符的最长字串的长度。" class="headerlink" title="例4，无重复字符的最长字串。已知一个字符串，求用该字符串的无重复字符的最长字串的长度。"></a>例4，无重复字符的最长字串。已知一个字符串，求用该字符串的无重复字符的最长字串的长度。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> begin=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> char_map[<span class="number">128</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="built_in">string</span> word=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            char_map[s[i]]++;</div><div class="line">            <span class="keyword">if</span>(char_map[s[i]]==<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                word += s[i];</div><div class="line">                <span class="keyword">if</span>(result&lt;word.length())</div><div class="line">                &#123;</div><div class="line">                    result=word.length();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(begin&lt;i &amp;&amp; char_map[s[i]]&gt;<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    char_map[s[begin]]--;</div><div class="line">                    begin++;</div><div class="line">                &#125;</div><div class="line">                word=<span class="string">""</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=begin;j&lt;=i;j++)</div><div class="line">                &#123;</div><div class="line">                    word += s[j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例5，重复的DNA序列。将DNA序列看作是只包含-‘A’-’C’-’G’-’T’-4个字符的字符串，给一个DNA字符串，找到所有长度为10的且出现超过1次的子串。"><a href="#例5，重复的DNA序列。将DNA序列看作是只包含-‘A’-’C’-’G’-’T’-4个字符的字符串，给一个DNA字符串，找到所有长度为10的且出现超过1次的子串。" class="headerlink" title="例5，重复的DNA序列。将DNA序列看作是只包含[‘A’,’C’,’G’,’T’]4个字符的字符串，给一个DNA字符串，找到所有长度为10的且出现超过1次的子串。"></a>例5，重复的DNA序列。将DNA序列看作是只包含[‘A’,’C’,’G’,’T’]4个字符的字符串，给一个DNA字符串，找到所有长度为10的且出现超过1次的子串。</h3><p><strong>方法1</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; findRepeatedDnaSequences(<span class="built_in">string</span> s) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; str_map;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">string</span> subStr=s.substr(i,<span class="number">10</span>);</div><div class="line">            str_map[subStr]++;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; ::iterator it;</div><div class="line">        <span class="keyword">for</span>(it=str_map.begin();it!=str_map.end();it++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(it-&gt;second &gt;<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                result.push_back(it-&gt;first);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>方法2</strong>:使用编码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> g_hash_map[<span class="number">1048576</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">change_int_to_DNA</span><span class="params">(<span class="keyword">int</span> DNA)</span></span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> DNA_CHAR[] = &#123;<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'G'</span>, <span class="string">'T'</span>&#125;;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> str;		    	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">		str += DNA_CHAR[DNA &amp; <span class="number">3</span>];</div><div class="line">		DNA = DNA &gt;&gt; <span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> str;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; findRepeatedDnaSequences(<span class="built_in">std</span>::<span class="built_in">string</span> s) &#123;</div><div class="line">    	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; result;</div><div class="line">		<span class="keyword">if</span> (s.length() &lt; <span class="number">10</span>)&#123;</div><div class="line">	    	<span class="keyword">return</span> result;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1048576</span>; i++)&#123;</div><div class="line">	    	g_hash_map[i] = <span class="number">0</span>;</div><div class="line">	    &#125;	    </div><div class="line">    	<span class="keyword">int</span> char_map[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    	char_map[<span class="string">'A'</span>] = <span class="number">0</span>;</div><div class="line">    	char_map[<span class="string">'C'</span>] = <span class="number">1</span>;</div><div class="line">    	char_map[<span class="string">'G'</span>] = <span class="number">2</span>;</div><div class="line">    	char_map[<span class="string">'T'</span>] = <span class="number">3</span>;    	</div><div class="line">    	<span class="keyword">int</span> key = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">	    	key = (key &lt;&lt; <span class="number">2</span>) + char_map[s[i]];</div><div class="line">	    &#125;</div><div class="line">    	g_hash_map[key] = <span class="number">1</span>;</div><div class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &lt; s.length(); i++)&#123;</div><div class="line">    		key = key &gt;&gt; <span class="number">2</span>;</div><div class="line">    		key = key | (char_map[s[i]] &lt;&lt; <span class="number">18</span>);</div><div class="line">			g_hash_map[key]++;</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1048576</span>; i++)&#123;</div><div class="line">    		<span class="keyword">if</span> (g_hash_map[i] &gt; <span class="number">1</span>)&#123;</div><div class="line">	    		result.push_back(change_int_to_DNA(i));</div><div class="line">		    &#125;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="例6，已知字符串S与字符串T-求S中的最小窗口（区间），使得这个区间中包含了字符T中的所有字符。"><a href="#例6，已知字符串S与字符串T-求S中的最小窗口（区间），使得这个区间中包含了字符T中的所有字符。" class="headerlink" title="例6，已知字符串S与字符串T,求S中的最小窗口（区间），使得这个区间中包含了字符T中的所有字符。"></a>例6，已知字符串S与字符串T,求S中的最小窗口（区间），使得这个区间中包含了字符T中的所有字符。</h3><p>例如：S=”ADOBECODEBANC”;T=”ABC”。包含T的子区间中，有“ADOBEC”,”CODEBA”,”BANC”等等；最小窗口的区间是“BANC”.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">minWindow</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> len=<span class="number">128</span>;</div><div class="line">        <span class="keyword">int</span> map_s[len]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">map_t</span>[len]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="keyword">vec_t</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">map_t</span>[t[i]]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">map_t</span>[i]&gt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">vec_t</span>.push_back(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> window_begin=<span class="number">0</span>;</div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;</div><div class="line">            map_s[s[i]]++;</div><div class="line">            <span class="keyword">while</span>(window_begin&lt;i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">char</span> begin_char=s[window_begin];</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">map_t</span>[begin_char]==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    window_begin++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">map_t</span>[begin_char]&lt;map_s[begin_char])</div><div class="line">                &#123;</div><div class="line">                    map_s[begin_char]--;</div><div class="line">                    window_begin++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(is_window_ok(map_s,<span class="keyword">map_t</span>,<span class="keyword">vec_t</span>))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> new_window_len=i-window_begin+<span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span>(result==<span class="string">""</span> || result.length()&gt;new_window_len)</div><div class="line">                &#123;</div><div class="line">                    result=s.substr(window_begin,new_window_len);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_window_ok</span><span class="params">(<span class="keyword">int</span> map_s[],<span class="keyword">int</span> <span class="keyword">map_t</span>[],<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="keyword">vec_t</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">vec_t</span>.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">map_t</span>[<span class="keyword">vec_t</span>[i]&gt;map_s[<span class="keyword">vec_t</span>[i]]])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="8-搜索（回到目录）"><a href="#8-搜索（回到目录）" class="headerlink" title="8 搜索（回到目录）"></a>8 搜索（<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>）</h1><hr>
<h1 id="9-动态规划（回到目录）"><a href="#9-动态规划（回到目录）" class="headerlink" title="9 动态规划（回到目录）"></a>9 动态规划（<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>）</h1><h3 id="例3，给定一个数组，求这个数组的连续子数组中，最大的那一段的和。如数组【-2，1，-3，4，-1，2，1，-5，4】"><a href="#例3，给定一个数组，求这个数组的连续子数组中，最大的那一段的和。如数组【-2，1，-3，4，-1，2，1，-5，4】" class="headerlink" title="例3，给定一个数组，求这个数组的连续子数组中，最大的那一段的和。如数组【-2，1，-3，4，-1，2，1，-5，4】"></a>例3，给定一个数组，求这个数组的连续子数组中，最大的那一段的和。如数组【-2，1，-3，4，-1，2，1，-5，4】</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(nums.size()+<span class="number">6</span>,<span class="number">0</span>);</div><div class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> max_res=dp[<span class="number">0</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=max(dp[i<span class="number">-1</span>]+nums[i],nums[i]);</div><div class="line">            <span class="keyword">if</span>(max_res&lt;dp[i])</div><div class="line">            &#123;</div><div class="line">                max_res=dp[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_res;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例5，给定一个二维数组，其保存了一个数字三角形，求从数字三角形顶端到底端各数字和最小的路径之和，每次可以向下走相邻的两个位置。"><a href="#例5，给定一个二维数组，其保存了一个数字三角形，求从数字三角形顶端到底端各数字和最小的路径之和，每次可以向下走相邻的两个位置。" class="headerlink" title="例5，给定一个二维数组，其保存了一个数字三角形，求从数字三角形顶端到底端各数字和最小的路径之和，每次可以向下走相邻的两个位置。"></a>例5，给定一个二维数组，其保存了一个数字三角形，求从数字三角形顶端到底端各数字和最小的路径之和，每次可以向下走相邻的两个位置。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;triangle.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;triangle[i].size();j++)</div><div class="line">            &#123;</div><div class="line">                dp[i].push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dp[dp.size()<span class="number">-1</span>].size();j++)</div><div class="line">        &#123;</div><div class="line">            dp[dp.size()<span class="number">-1</span>][j]=triangle[dp.size()<span class="number">-1</span>][j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=dp.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dp[i].size();j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=min(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>])+triangle[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例6，已知一个未排序的数组，求这个数组的最长上升子序列的长度。例如：【1，3，2，3，1，4】，其中【1，3】，【1，2，3】，【1，2，3，4】都是它的上升子序列。"><a href="#例6，已知一个未排序的数组，求这个数组的最长上升子序列的长度。例如：【1，3，2，3，1，4】，其中【1，3】，【1，2，3】，【1，2，3，4】都是它的上升子序列。" class="headerlink" title="例6，已知一个未排序的数组，求这个数组的最长上升子序列的长度。例如：【1，3，2，3，1，4】，其中【1，3】，【1，2，3】，【1，2，3，4】都是它的上升子序列。"></a>例6，已知一个未排序的数组，求这个数组的最长上升子序列的长度。例如：【1，3，2，3，1，4】，其中【1，3】，【1，2，3】，【1，2，3，4】都是它的上升子序列。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(nums.size(),<span class="number">0</span>);</div><div class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;dp.size();i++)</div><div class="line">        &#123;</div><div class="line">            dp[i]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[j] &amp;&amp; dp[i]&lt;dp[j]+<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    dp[i]=dp[j]+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(res&lt;dp[i])</div><div class="line">            &#123;</div><div class="line">                res=dp[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例7，已知一个二维数组，其中存储了非负整数，找到从左上角到右下角的一条路径，使得路径上的和最小。（移动过程中只能向下或者向右）"><a href="#例7，已知一个二维数组，其中存储了非负整数，找到从左上角到右下角的一条路径，使得路径上的和最小。（移动过程中只能向下或者向右）" class="headerlink" title="例7，已知一个二维数组，其中存储了非负整数，找到从左上角到右下角的一条路径，使得路径上的和最小。（移动过程中只能向下或者向右）"></a>例7，已知一个二维数组，其中存储了非负整数，找到从左上角到右下角的一条路径，使得路径上的和最小。（移动过程中只能向下或者向右）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(grid.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> row=grid.size();</div><div class="line">        <span class="keyword">int</span> col=grid[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;dp(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,<span class="number">0</span>));</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=grid[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;col;j++)</div><div class="line">        &#123;</div><div class="line">            dp[<span class="number">0</span>][j]=grid[<span class="number">0</span>][j]+dp[<span class="number">0</span>][j<span class="number">-1</span>];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;row;i++)</div><div class="line">        &#123;</div><div class="line">            dp[i][<span class="number">0</span>]=grid[i][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;col;j++)</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])+grid[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[row<span class="number">-1</span>][col<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="例8，地下城游戏。一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由-M-x-N-个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。"><a href="#例8，地下城游戏。一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由-M-x-N-个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。" class="headerlink" title="例8，地下城游戏。一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。"></a>例8，地下城游戏。一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。</h3><p>骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。</p>
<p>有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。</p>
<p>为了尽快到达公主，骑士决定每次只向右或向下移动一步。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculateMinimumHP</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; dungeon)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//int res=0;</span></div><div class="line">        <span class="keyword">int</span> row=dungeon.size();</div><div class="line">        <span class="keyword">int</span> col=dungeon[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;dp(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,<span class="number">0</span>));</div><div class="line">        dp[row<span class="number">-1</span>][col<span class="number">-1</span>]=max(<span class="number">1</span>,<span class="number">1</span>-dungeon[row<span class="number">-1</span>][col<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=col<span class="number">-2</span>;j&gt;=<span class="number">0</span>;j--)</div><div class="line">        &#123;</div><div class="line">            dp[row<span class="number">-1</span>][j]=max(<span class="number">1</span>,dp[row<span class="number">-1</span>][j+<span class="number">1</span>]-dungeon[row<span class="number">-1</span>][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=row<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            dp[i][col<span class="number">-1</span>]=max(<span class="number">1</span>,dp[i+<span class="number">1</span>][col<span class="number">-1</span>]-dungeon[i][col<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=row<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=col<span class="number">-2</span>;j&gt;=<span class="number">0</span>;j--)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> dp_min=min(dp[i+<span class="number">1</span>][j],dp[i][j+<span class="number">1</span>]);</div><div class="line">                dp[i][j]=max(<span class="number">1</span>,dp_min-dungeon[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="10-高级数据结构-回到目录"><a href="#10-高级数据结构-回到目录" class="headerlink" title="10 高级数据结构(回到目录)"></a>10 高级数据结构(<a href="#目录"><font size="5" face="微软雅黑">回到目录</font></a>)</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016考研政治经验贴]]></title>
      <url>https://winper001.github.io/2016/08/08/2016%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB%E7%BB%8F%E9%AA%8C%E8%B4%B4/</url>
      <content type="html"><![CDATA[<h1 id="2016考研政治随谈"><a href="#2016考研政治随谈" class="headerlink" title="2016考研政治随谈"></a>2016考研政治随谈</h1><p>本人winper，考的是华南理工大学电信学院的电子与通信工程。考研政治的分数是81，这个分数听起来是挺高的，但是要考取这个分数并不是很难。原因有二：一是今年的政治相对简单，二是存在泄题的现象。对于我本人来说，政治是我四科之中最有信心的学科，这也得益于我平时的政治素养吧。例如大学这几年的有关于政治的课程（思修，近现代史，毛概）上课的时候就很认真，以及平时也很喜欢看一些历史书籍，经常关注我党的理论动态和政策措施，并且我也会经常思考（建议大家在复习之余，也多多关注时事动态，多多思考和感悟）。另外，我记得考完政治之后，对了一下石磊的答案，选择题仅仅是错了一个单项（49分），那也可以得知今年的大题可能存在压分的情况。综上所述，当我自己看到这个分数时，并不吃惊，反而略显失望。<br>好了，下面我简单的介绍一下我去年的政治复习经验和心得。</p>
<p>首先我先说下，我所有的资料：知识点精讲精练，1000题，8套卷，4套卷，肖秀荣真题，风中劲草核心考点，石磊的马原讲解视频和讲义。</p>
<p>我大概是九月底十月初开始复习政治，这个阶段只用复习客观题。那时候用的是肖秀荣的《知识点精讲精炼》和《1000题》结合使用的。很多人会觉得那本《知识点精讲精练》太厚了，怎么看的完呢。对于这个问题，我只能说完全看个人！我是这么想的，那本知识点教材是服务于我做1000题的，我做一千题时候，遇到不会的，我不是直接看答案，而是在书里查找，实在找不到的就翻答案（不过一般都能找到）。有些重点题，我会做标记以示自己应该特别注意。当然1000题的每一章之前，我就会先把书本看一遍（其实就当看课外书一样还是蛮不错的，建议大家也这么做）。当完整的把1000题做完一遍之后，就会发现以前做过的题目也忘得差不多了。没关系，再做一遍！这一遍的时候肯定比第一次快和熟练，我一般对做过的题目印象会很深刻，当然第一遍做的时候很模糊的题，第二遍做依然模糊。所以这种模糊题和错题，就要特别的注意！这个阶段，我在刷题的同时，也还在看风中劲草核心考点，我觉得这本书写的特别好，5门课都浓缩在了一起，选择题和分析题的答题重点都标注的很清楚。对于这本书，建议大家把它至少看两遍！它可以帮大家梳理各科的知识脉络和形成一个知识体系！第一遍复习时，有些科目确实是比较难的。例如马原的政治经济学，对于广大的工科生来说，就是一个大坑，然而这块知识点每年必考，大约有6分左右。所以大家一定要复习好。主要是理解为主，建议大家可以看看石磊的马原课程中的政治经济学部分，个人感觉他讲的确实通俗易懂，出神入化。加上自己的思考和总结，再去做那些选择题就会发现很容易。</p>
<p>到11月份，还算是客观题的复习阶段，如果大家觉得1000题已经看起来没有挑战性了。我建议可以买那本风中劲草的习题，那个题目量很大，但是出题出的很细很广。有空可以把它刷一遍。没有时间的话，那就不做这个题了，直接做真题的客观题。真题我选择的是肖老的书。我觉得它的真题写的特好。他的真题里面有知识点表，是对应于真题的考察的知识点所在。做第一遍的时候，一定要认真，把遗漏的或者自己模糊的知识点要查清楚，可以把他列的所有表格都看一遍或者有些直接背诵，相当有好处。总之，真题的选择题一定要多做几遍！做题同时，不能忘记及时抽空复习知识点（以风中劲草核心考点和肖秀荣真题的知识点表格为主！尤其是要考背诵的考点，如事件的时间和地点等）。</p>
<p>说了这么多，大家可能会很着急，我们把全部精力放在了客观题上，主观题怎么办？其实大家不用担心。我觉得大题更多的是考大家的个人素养。其实我们在复习选择题的时候本身就是在不断地重复考点，所以在复习选择题时候一定要细心，不能急躁，花再多的时间都不为过！</p>
<p>真正开始复习大题，我是从11月底开始！首先是对付真题的大题。说实话，真题的大题我一题都没写过，只是全部看了一下，为啥，因为我觉得没有必要。真题的的分析题看是一定要看的。我建议这么做，题干看完之后，自己可以脑子想想答题思路，想不出来直接看答案，对比下人家的思路。当你把所有的大题都过玩一遍的时候你就会发现，其实官方参考答案都是有套路的。例如：第一大题就是马原的哲学题，无非就是那些原理，结合一些材料去辩证的分析下；近现代史题，就多多的赞扬我党的好等等。好好分析，都是有套路的！不过，像那道哲学题，大家还是要自己先去把那些原理方法论总结出来背一背会更有把握！这个阶段，主要把心思花在8套卷和4套卷，还有要看看石磊的20天20题。把这些题目都分析一遍！尤其是四套卷，无论是选择题还是主观题一定要背的滚瓜烂熟。就拿今年来说，我觉得四套卷的答案好多都能用上，石磊的20天20题也完全压中马原的那道大题！反正我写起来特别顺。当然，也有很多同学说，答案写的不长。其实我觉得还是背的不够熟练的原因，没有大量的输入哪有输出嘛？！所以哦，在十二月份一定要全力以赴的开始背答题了！我一般是早上花一个小时背，晚上再花一个小时背诵或者复习。当然，这个阶段，客观题的复习不能忘了！！！！</p>
<p>对了还有时事政治的选择题，2单2双，加起来有6分。这个完全是靠记忆了。没办法！但是还是有复习方法的！建议大家去网上搜一些资料或者有些考研辅导机构他们会出时事政治选择题的书，可以采取刷题背答案的策略，多找一些题目！相信我，一定能撞上原题的！</p>
<p>我就是以这么一种方式去学习考研政治的额，最后还算是取得了不错的成绩。</p>
<p>最后，我统一回答几个大众困惑：<br>1，  要不要报班？<br>我建议可以不用，烧钱。但是可以去网上下载视频去听一听课，例如石磊的冲刺课，肖秀荣的冲刺课程，听完之后自己也会自信些。<br>2，  政治时间如何安排<br>我建议12月份以前，2小时左右为宜，12月份冲刺阶段至少要有3小时。不同意的，看个人。<br>暂时想不起来了。。。。。。亲们还有其他问题,可以联系QQ1048784174</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第一次冒泡]]></title>
      <url>https://winper001.github.io/2016/08/07/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
      <content type="html"><![CDATA[<p>最恨英雄迟暮，最忌美人残颜。<br>因为觉得好玩，所以不能自控的搭建了一个博客。</p>
]]></content>
    </entry>
    
  
  
</search>
